// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.layout.library-all');
if ( !jQuery.sap.isDeclared('sap.ui.layout.DynamicSideContent') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.layout.DynamicSideContent.
jQuery.sap.declare('sap.ui.layout.DynamicSideContent'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/DynamicSideContent",['jquery.sap.global', 'sap/ui/core/Control', 'sap/ui/core/ResizeHandler'],
	function (jQuery, Control, ResizeHandler) {
		"use strict";

		/**
		 * Constructor for a new <code>DynamicSideContent</code>.
		 *
		 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
		 * @param {object} [mSettings] Initial settings for the new control
		 *
		 * @class
		 * Layout control that allows additional (side) content to be displayed dynamically.
		 *
		 * <h3>Overview</h3>
		 *
		 * <code>DynamicSideContent</code> is a layout control that allows additional content
		 * to be displayed in a way that flexibly adapts to different screen sizes. The side
		 * content appears in a container next to or directly below the main content
		 * (it doesn't overlay). When the side content is triggered, the main content becomes
		 * narrower (if appearing side-by-side). The side content contains a separate scrollbar
		 * when appearing next to the main content.
		 *
		 * <h3>Usage</h3>
		 *
		 * <i>When to use?</i>
		 *
		 * Use this control if you want to display relevant information that is not critical
		 * for users to complete a task. Users should have access to all the key functions and
		 * critical information in the app even if they do not see the side content. This is
		 * important because on smaller screen sizes it may be difficult to display the side
		 * content in a way that is easily accessible for the user.
		 *
		 * <i>When not to use?</i>
		 *
		 * Don't use it if you want to display navigation or critical information that prevents
		 * users from completing a task when they have no access to the side content.
		 *
		 * <h3>Responsive Behavior</h3>
		 *
		 * Screen width > 1440 px
		 *
		 * <ul><li>Main vs. side content ratio is 75 vs. 25 percent (with a minimum of 320px
		 * each).</li>
		 * <li>If the application defines a trigger, the side content can be hidden.</li></ul>
		 *
		 * Screen width <= 1440 px and > 720px
		 *
		 * <ul><li>Main vs. side content ratio is 66.666 vs. 33.333 percent (with a minimum of
		 * 320px each). If the side content width falls below 320 px, it automatically slides
		 * under the main content, unless the app development team specifies that it should
		 * disappear.</li></ul>
		 *
		 * Screen width <= 720 px (for example on a mobile device)
		 *
		 * <ul><li>In this case, the side content automatically disappears from the screen (unless
		 * specified to stay under the content) and can be triggered from a pre-set trigger
		 * (specified within the app). When the side content is triggered, it replaces the
		 * main content. We recommend that you always place the trigger for the side content
		 * in the same location, such as in the app footer.</li></ul>
		 *
		 * A special case, allows for comparison mode between the main and side content. In
		 * this case, the screen is split into 50:50 percent for main vs. side content. The
		 * responsive behavior of the equal split is the same as in the standard view - the
		 * side content disappears on screen widths of less than 720 px and can only be
		 * viewed by triggering it.
		 *
		 * @extends sap.ui.core.Control
		 *
		 * @author SAP SE
		 * @version 1.48.5
		 *
		 * @constructor
		 * @public
		 * @since 1.30
		 * @alias sap.ui.layout.DynamicSideContent
		 */
		var DynamicSideContent = Control.extend("sap.ui.layout.DynamicSideContent", /** @lends sap.ui.layout.DynamicSideContent.prototype */ { metadata : {
			library : "sap.ui.layout",
			properties : {

				/**
				 * Determines whether the side content is visible or hidden.
				 */
				showSideContent : {type : "boolean", group : "Appearance", defaultValue : true},

				 /**
				 * Determines whether the main content is visible or hidden.
				 */
				showMainContent : {type : "boolean", group : "Appearance", defaultValue : true},

				/**
				 * Determines on which breakpoints the side content is visible.
				 */
				sideContentVisibility : {type : "sap.ui.layout.SideContentVisibility", group : "Appearance", defaultValue : sap.ui.layout.SideContentVisibility.ShowAboveS},

				/**
				 * Determines on which breakpoints the side content falls down below the main content.
				 */
				sideContentFallDown : {type : "sap.ui.layout.SideContentFallDown", group : "Appearance", defaultValue : sap.ui.layout.SideContentFallDown.OnMinimumWidth},

				/**
				 * Defines whether the control is in equal split mode. In this mode, the side and the main content
				 * take 50:50 percent of the container on all screen sizes except for phone, where the main and
				 * side contents are switching visibility using the toggle method.
				 */
				equalSplit : {type : "boolean", group : "Appearance", defaultValue : false},

				/**
				 * If set to TRUE, then not the media Query (device screen size) but the size of the container, surrounding the control, defines the current range.
				 */
				containerQuery : {type : "boolean", group : "Behavior", defaultValue : false},

				/**
				 * Determines whether the side content is on the left or on the right side of the main content.
				 * @since 1.36
				 */
				sideContentPosition : {type : "sap.ui.layout.SideContentPosition", group : "Appearance", defaultValue : sap.ui.layout.SideContentPosition.End}
			},
			defaultAggregation : "mainContent",
			events : {
				/**
				 * Fires when the current breakpoint has been changed.
				 * @since 1.32
				 */
				breakpointChanged : {
					parameters : {
						currentBreakpoint : {type : "string"}
					}
				}
			},
			aggregations : {

				/**
				 * Main content controls.
				 */
				mainContent : {type: "sap.ui.core.Control", multiple:  true},

				/**
				 * Side content controls.
				 */
				sideContent : {type: "sap.ui.core.Control", multiple:  true}
			}
		}});

		var	S = "S",
			M = "M",
			L = "L",
			XL = "XL",
			HIDDEN_CLASS = "sapUiHidden",
			SPAN_SIZE_12_CLASS = "sapUiDSCSpan12",
			MC_FIXED_CLASS = "sapUiDSCMCFixed",
			SC_FIXED_CLASS = "sapUiDSCSCFixed",
			SPAN_SIZE_3 = 3,
			SPAN_SIZE_4 = 4,
			SPAN_SIZE_6 = 6,
			SPAN_SIZE_8 = 8,
			SPAN_SIZE_9 = 9,
			SPAN_SIZE_12 = 12,
			INVALID_BREAKPOINT_ERROR_MSG = "Invalid Breakpoint. Expected: S, M, L or XL",
			SC_GRID_CELL_SELECTOR = "SCGridCell",
			MC_GRID_CELL_SELECTOR = "MCGridCell",
			S_M_BREAKPOINT = 720,
			M_L_BREAKPOINT = 1024,
			L_XL_BREAKPOINT = 1440;

		DynamicSideContent.prototype.init = function () {
			this._bSuppressInitialFireBreakPointChange = true;
		};

		/**
		 * Sets the showSideContent property.
		 * @param {boolean} bVisible Determines if the side content part is visible
		 * @param {boolean} bSuppressVisualUpdate Determines if the visual state is updated
		 * @returns {sap.ui.layout.DynamicSideContent} this pointer for chaining
		 * @override
		 * @public
		 */
		DynamicSideContent.prototype.setShowSideContent = function (bVisible, bSuppressVisualUpdate) {
			this.setProperty("showSideContent", bVisible, true);
			this._SCVisible = bVisible;
			if (!bSuppressVisualUpdate && this.$().length) {
				this._setResizeData(this.getCurrentBreakpoint(), this.getEqualSplit());
				if (this._currentBreakpoint === S) {
					this._MCVisible = true;
				}
				this._changeGridState();
			}
			return this;
		};

		/**
		 * Sets the showMainContent property.
		 * @param {boolean} bVisible Determines if the main content part is visible
		 * @param {boolean} bSuppressVisualUpdate Determines if the visual state is updated
		 * @returns {sap.ui.layout.DynamicSideContent} this pointer for chaining
		 * @override
		 * @public
		 */
		DynamicSideContent.prototype.setShowMainContent = function (bVisible, bSuppressVisualUpdate) {
			this.setProperty("showMainContent", bVisible, true);
			this._MCVisible = bVisible;
			if (!bSuppressVisualUpdate && this.$().length) {
				this._setResizeData(this.getCurrentBreakpoint(), this.getEqualSplit());
				if (this._currentBreakpoint === S) {
					this._SCVisible = true;
				}
				this._changeGridState();
			}
			return this;
		};

		/**
		 * Gets the value of showSideContent property.
		 * @returns {boolean} Side content visibility state
		 * @override
		 * @public
		 */
		DynamicSideContent.prototype.getShowSideContent = function () {
			if (this._currentBreakpoint === S) {
				return this._SCVisible && this.getProperty("showSideContent");
			} else {
				return this.getProperty("showSideContent");
			}
		};

		/**
		 * Gets the value of showMainContent property.
		 * @returns {boolean} Side content visibility state
		 * @override
		 * @public
		 */
		DynamicSideContent.prototype.getShowMainContent = function () {
			if (this._currentBreakpoint === S) {
				return this._MCVisible && this.getProperty("showMainContent");
			} else {
				return this.getProperty("showMainContent");
			}
		};

		/**
		 * Sets or unsets the page in equalSplit mode.
		 * @param {boolean}[bState] Determines if the page is set to equalSplit mode
		 * @returns {sap.ui.layout.DynamicSideContent} this pointer for chaining
		 * @override
		 * @public
		 */
		DynamicSideContent.prototype.setEqualSplit = function (bState) {
			this._MCVisible = true;
			this._SCVisible = true;
			this.setProperty("equalSplit", bState, true);
			if (this._currentBreakpoint) {
				this._setResizeData(this._currentBreakpoint, bState);
				this._changeGridState();
			}
			return this;
		};

		/**
		 * Adds a control to the side content area.
		 * Only the side content part in the aggregation is re-rendered.
		 * @param {object} oControl Object to be added in the aggregation
		 * @returns {sap.ui.layout.DynamicSideContent} this pointer for chaining
		 * @override
		 * @public
		 */
		DynamicSideContent.prototype.addSideContent = function (oControl) {
			this.addAggregation("sideContent", oControl, true);
			// Rerender only the part of the control that is changed
			this._rerenderControl(this.getAggregation("sideContent"), this.$(SC_GRID_CELL_SELECTOR));
			return this;
		};

		/**
		 * Adds a control to the main content area.
		 * Only the main content part in the aggregation is re-rendered.
		 * @param {object} oControl Object to be added in the aggregation
		 * @returns {sap.ui.layout.DynamicSideContent} this pointer for chaining
		 * @override
		 * @public
		 */
		DynamicSideContent.prototype.addMainContent = function (oControl) {
			this.addAggregation("mainContent", oControl, true);
			// Rerender only the part of the control that is changed
			this._rerenderControl(this.getAggregation("mainContent"), this.$(MC_GRID_CELL_SELECTOR));
			return this;
		};

		/**
		 * Used for the toggle button functionality.
		 * When the control is on a phone screen size only, one control area is visible.
		 * This helper method is used to implement a button/switch for changing
		 * between the main and side content areas.
		 * Only works if the current breakpoint is "S".
		 * @returns {sap.ui.layout.DynamicSideContent} this pointer for chaining
		 * @public
		 */
		DynamicSideContent.prototype.toggle = function () {
			if (this._currentBreakpoint === S) {

				if (!this.getProperty("showMainContent")) {
					this.setShowMainContent(true, true);
					this._MCVisible = false;
				}
				if (!this.getProperty("showSideContent")) {
					this.setShowSideContent(true, true);
					this._SCVisible = false;
				}

				if (this._MCVisible && !this._SCVisible) {
					this._SCVisible = true;
					this._MCVisible = false;
				} else if (!this._MCVisible && this._SCVisible) {
					this._MCVisible = true;
					this._SCVisible = false;
				}

				this._changeGridState();
			}
			return this;
		};

		/**
		 * Returns the breakpoint for the current state of the control.
		 * @returns {String} currentBreakpoint
		 * @public
		 */
		DynamicSideContent.prototype.getCurrentBreakpoint = function () {
			return this._currentBreakpoint;
		};

		/**
		 * Function is called before the control is rendered.
		 * @private
		 * @override
		 */
		DynamicSideContent.prototype.onBeforeRendering = function () {
			this._detachContainerResizeListener();

			this._SCVisible = this.getProperty("showSideContent");
			this._MCVisible = this.getProperty("showMainContent");

			if (!this.getContainerQuery()) {
				this._iWindowWidth = jQuery(window).width();
				this._setBreakpointFromWidth(this._iWindowWidth);
				this._setResizeData(this._currentBreakpoint, this.getEqualSplit());
			}
		};

		/**
		 * Function is called after the control is rendered.
		 * @private
		 * @override
		 */
		DynamicSideContent.prototype.onAfterRendering = function () {
			if (this.getContainerQuery()) {
				this._attachContainerResizeListener();
				this._adjustToScreenSize();
			} else {
				var that = this;
				jQuery(window).resize(function() {
					that._adjustToScreenSize();
				});
			}
			this._changeGridState();
			this._initScrolling();
		};

		/**
		 * Function is called when exiting the control.
		 * @private
		 */
		DynamicSideContent.prototype.exit = function () {
			this._detachContainerResizeListener();

			if (this._oSCScroller) {
				this._oSCScroller.destroy();
				this._oSCScroller = null;
			}

			if (this._oMCScroller) {
				this._oMCScroller.destroy();
				this._oMCScroller = null;
			}
		};

		/**
		 * Re-renders only part of the control that is changed.
		 * @param {object} aControls Array containing the passed aggregation controls
		 * @param {object} $domElement DOM reference of the control to be re-rendered
		 * @returns {sap.ui.layout.DynamicSideContent} this pointer for chaining
		 * @private
		 */
		DynamicSideContent.prototype._rerenderControl = function (aControls, $domElement) {
			if (this.getDomRef()) {
				var oRm = sap.ui.getCore().createRenderManager();
				this.getRenderer().renderControls(oRm, aControls);
				oRm.flush($domElement[0]);
				oRm.destroy();
			}
			return this;
		};

		/**
		 * Initializes scroll for side and main content.
		 * @private
		 */
		DynamicSideContent.prototype._initScrolling = function () {
			var sControlId = this.getId(),
				sSideContentId = sControlId + "-" + SC_GRID_CELL_SELECTOR,
				sMainContentId = sControlId + "-" + MC_GRID_CELL_SELECTOR;

			if (!this._oSCScroller && !this._oMCScroller) {
				jQuery.sap.require("sap.ui.core.delegate.ScrollEnablement");
				this._oSCScroller = new sap.ui.core.delegate.ScrollEnablement(this, null, {
					scrollContainerId: sSideContentId,
					horizontal: false,
					vertical: true
				});
				this._oMCScroller = new sap.ui.core.delegate.ScrollEnablement(this, null, {
					scrollContainerId: sMainContentId,
					horizontal: false,
					vertical: true
				});
			}
		};

		/**
		 * Attaches event listener for the needed breakpoints to the container.
		 * @private
		 */
		DynamicSideContent.prototype._attachContainerResizeListener = function () {
			if (!this._sContainerResizeListener) {
				this._sContainerResizeListener = ResizeHandler.register(this, jQuery.proxy(this._adjustToScreenSize, this));
			}
		};

		/**
		 * Detaches event listener for the needed breakpoints to the container.
		 * @private
		 */
		DynamicSideContent.prototype._detachContainerResizeListener = function () {
			if (this._sContainerResizeListener) {
				ResizeHandler.deregister(this._sContainerResizeListener);
				this._sContainerResizeListener = null;
			}
		};

		/**
		 * Gets the current breakpoint, related to the width, which is passed to the method.
		 * @private
		 * @param {int} iWidth The parent container width
		 * @returns {String} Breakpoint corresponding to the width passed
		 */
		DynamicSideContent.prototype._getBreakPointFromWidth = function (iWidth) {
			if (iWidth <= S_M_BREAKPOINT && this._currentBreakpoint !== S) {
				return S;
			} else if ((iWidth > S_M_BREAKPOINT) && (iWidth <= M_L_BREAKPOINT) && this._currentBreakpoint !== M) {
				return M;
			} else if ((iWidth > M_L_BREAKPOINT) && (iWidth <= L_XL_BREAKPOINT) && this._currentBreakpoint !== L) {
				return L;
			} else if (iWidth > L_XL_BREAKPOINT && this._currentBreakpoint !== XL) {
				return XL;
			}
			return this._currentBreakpoint;
		};


		/**
		 * Sets the current breakpoint, related to the width, which is passed to the method.
		 * @private
		 * @param {int} iWidth is the parent container width
		 */
		DynamicSideContent.prototype._setBreakpointFromWidth = function (iWidth) {
			this._currentBreakpoint = this._getBreakPointFromWidth(iWidth);
			if (this._bSuppressInitialFireBreakPointChange) {
				this._bSuppressInitialFireBreakPointChange = false;
			} else {
				this.fireBreakpointChanged({currentBreakpoint : this._currentBreakpoint});
			}
		};

		/**
		 * Handles the screen size breakpoints.
		 * @private
		 */
		DynamicSideContent.prototype._adjustToScreenSize = function () {
			if (this.getContainerQuery()){
				this._iWindowWidth = this.$().parent().width();
			} else {
				this._iWindowWidth = jQuery(window).width();
			}

			if (this._iWindowWidth !== this._iOldWindowWidth) {
				this._iOldWindowWidth = this._iWindowWidth;

				this._oldBreakPoint = this._currentBreakpoint;
				this._setBreakpointFromWidth(this._iWindowWidth);

				if ((this._oldBreakPoint !== this._currentBreakpoint)
					|| (this._currentBreakpoint === M
					&& this.getSideContentFallDown() === sap.ui.layout.SideContentFallDown.OnMinimumWidth)) {
					this._setResizeData(this._currentBreakpoint, this.getEqualSplit());
					this._changeGridState();
				}
			}
		};

		/**
		 * Returns object with data about the size of the main and the side content, based on the screen breakpoint and
		 * control mode.
		 * @param {string} sSizeName Possible values S, M, L, XL
		 * @param {boolean} bComparison Checks if the page is in equalSplit mode
		 * @returns {sap.ui.layout.DynamicSideContent} this pointer for chaining
		 * @private
		 */
		DynamicSideContent.prototype._setResizeData = function (sSizeName, bComparison) {
			var sideContentVisibility = this.getSideContentVisibility(),
				sideContentFallDown = this.getSideContentFallDown();

			if (!bComparison) {
				// Normal mode
				switch (sSizeName) {
					case S:
						this._setSpanSize(SPAN_SIZE_12, SPAN_SIZE_12);
						if (this.getProperty("showSideContent") && this.getProperty("showMainContent")) {
							this._SCVisible = sideContentVisibility === sap.ui.layout.SideContentVisibility.AlwaysShow;
						}
						this._bFixedSideContent = false;
						break;
					case M:
						var iSideContentWidth = Math.ceil((33.333 / 100) * this._iWindowWidth);
						if (sideContentFallDown === sap.ui.layout.SideContentFallDown.BelowL ||
							sideContentFallDown === sap.ui.layout.SideContentFallDown.BelowXL ||
							(iSideContentWidth <= 320 && sideContentFallDown === sap.ui.layout.SideContentFallDown.OnMinimumWidth)) {
							this._setSpanSize(SPAN_SIZE_12, SPAN_SIZE_12);
							this._bFixedSideContent = false;
						} else {
							this._setSpanSize(SPAN_SIZE_4, SPAN_SIZE_8);
							this._bFixedSideContent = true;
						}
						this._SCVisible = sideContentVisibility === sap.ui.layout.SideContentVisibility.ShowAboveS ||
							sideContentVisibility === sap.ui.layout.SideContentVisibility.AlwaysShow;

						this._MCVisible = true;
						break;
					case L:
						if (sideContentFallDown === sap.ui.layout.SideContentFallDown.BelowXL) {
							this._setSpanSize(SPAN_SIZE_12, SPAN_SIZE_12);
						} else {
							this._setSpanSize(SPAN_SIZE_4, SPAN_SIZE_8);
						}
						this._SCVisible = sideContentVisibility === sap.ui.layout.SideContentVisibility.ShowAboveS ||
							sideContentVisibility === sap.ui.layout.SideContentVisibility.ShowAboveM ||
							sideContentVisibility === sap.ui.layout.SideContentVisibility.AlwaysShow;
						this._MCVisible = true;
						this._bFixedSideContent = false;
						break;
					case XL:
						this._setSpanSize(SPAN_SIZE_3, SPAN_SIZE_9);
						this._SCVisible = sideContentVisibility !== sap.ui.layout.SideContentVisibility.NeverShow;
						this._MCVisible = true;
						this._bFixedSideContent = false;
						break;
					default:
						throw new Error(INVALID_BREAKPOINT_ERROR_MSG);
				}
			} else {
				// Equal split mode
				switch (sSizeName) {
					case S:
						this._setSpanSize(SPAN_SIZE_12, SPAN_SIZE_12);
						this._SCVisible = false;
						break;
					default:
						this._setSpanSize(SPAN_SIZE_6, SPAN_SIZE_6);
						this._SCVisible = true;
						this._MCVisible = true;
				}
				this._bFixedSideContent = false;
			}

			return this;
		};

		/**
		 * Determines if the control sets height, based on the control state.
		 * @private
		 * @return {boolean} If the control sets height
		 */
		DynamicSideContent.prototype._shouldSetHeight = function () {
			var bSameLine,
				bBothVisible,
				bOnlyScVisible,
				bOnlyMcVisible,
				bOneVisible,
				bFixedSC,
				bSCNeverShow;

			bSameLine = (this._iScSpan + this._iMcSpan) === SPAN_SIZE_12;
			bBothVisible = this._MCVisible && this._SCVisible;

			bOnlyScVisible = !this._MCVisible && this._SCVisible;
			bOnlyMcVisible = this._MCVisible && !this._SCVisible;
			bOneVisible = bOnlyScVisible || bOnlyMcVisible;

			bFixedSC = this._fixedSideContent;
			bSCNeverShow = this.getSideContentVisibility() === sap.ui.layout.SideContentVisibility.NeverShow;

			return ((bSameLine && bBothVisible) || bOneVisible || bFixedSC || bSCNeverShow);
		};

		/**
		 * Changes the state of the grid without re-rendering the control.
		 * Shows and hides the main and side content.
		 * @private
		 */
		DynamicSideContent.prototype._changeGridState = function () {
			var $sideContent = this.$(SC_GRID_CELL_SELECTOR),
				$mainContent = this.$(MC_GRID_CELL_SELECTOR),
				bMainContentVisibleProperty = this.getProperty("showMainContent"),
				bSideContentVisibleProperty = this.getProperty("showSideContent");

			if (this._bFixedSideContent) {
				$sideContent.removeClass().addClass(SC_FIXED_CLASS);
				$mainContent.removeClass().addClass(MC_FIXED_CLASS);
			} else {
				$sideContent.removeClass(SC_FIXED_CLASS);
				$mainContent.removeClass(MC_FIXED_CLASS);
			}

			if (this._SCVisible && this._MCVisible && bSideContentVisibleProperty && bMainContentVisibleProperty) {
				if (!this._bFixedSideContent) {
					$mainContent.removeClass().addClass("sapUiDSCSpan" + this._iMcSpan);
					$sideContent.removeClass().addClass("sapUiDSCSpan" + this._iScSpan);
				}
				if (this._shouldSetHeight()) {
					$sideContent.css("height", "100%").css("float", "left");
					$mainContent.css("height", "100%").css("float", "left");
				} else {
					$sideContent.css("height", "auto").css("float", "none");
					$mainContent.css("height", "auto").css("float", "none");
				}
			} else if (!this._SCVisible && !this._MCVisible) {
				$mainContent.addClass(HIDDEN_CLASS);
				$sideContent.addClass(HIDDEN_CLASS);
			} else if (this._MCVisible && bMainContentVisibleProperty) {
				$mainContent.removeClass().addClass(SPAN_SIZE_12_CLASS);
				$sideContent.addClass(HIDDEN_CLASS);
			} else if (this._SCVisible && bSideContentVisibleProperty) {
				$sideContent.removeClass().addClass(SPAN_SIZE_12_CLASS);
				$mainContent.addClass(HIDDEN_CLASS);
			} else if (!bMainContentVisibleProperty && !bSideContentVisibleProperty) {
				$mainContent.addClass(HIDDEN_CLASS);
				$sideContent.addClass(HIDDEN_CLASS);
			}
		};

		/**
		 * Sets the main and side content span size.
		 * @param {int} iScSpan Side content span size
		 * @param {int} iMcSpan Main content span size
		 * @private
		 */
		DynamicSideContent.prototype._setSpanSize = function (iScSpan, iMcSpan) {
			this._iScSpan = iScSpan;
			this._iMcSpan = iMcSpan;
		};

		return DynamicSideContent;
	}, /* bExport= */ true);

}; // end of sap/ui/layout/DynamicSideContent.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.DynamicSideContentRenderer') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.layout.DynamicSideContent
jQuery.sap.declare('sap.ui.layout.DynamicSideContentRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/layout/DynamicSideContentRenderer",[],
	function() {
		"use strict";

		var SIDE_CONTENT_LABEL = "SIDE_CONTENT_LABEL";

		/**
		 * Renderer for sap.ui.layout.DynamicSideContent.
		 * @namespace
		 */
		var DynamicSideContentRenderer = {};

		DynamicSideContentRenderer.render = function (oRm, oSideContent) {
			oRm.write("<div");
			oRm.writeControlData(oSideContent);

			oRm.addClass("sapUiDSC");
			oRm.writeClasses();
			oRm.addStyle("height", "100%");
			oRm.writeStyles();
			oRm.write(">");

			this.renderSubControls(oRm, oSideContent);

			oRm.write("</div>");

		};

		DynamicSideContentRenderer.renderSubControls = function (oRm, oSideControl) {
			var iSideContentId = oSideControl.getId(),
				bShouldSetHeight = oSideControl._shouldSetHeight(),
				bPageRTL = sap.ui.getCore().getConfiguration().getRTL(),
				position = oSideControl.getSideContentPosition();

			if ((position === sap.ui.layout.SideContentPosition.Begin && !bPageRTL) || (bPageRTL && position === sap.ui.layout.SideContentPosition.End)) {
				this._renderSideContent(oRm, oSideControl, iSideContentId, bShouldSetHeight);
				this._renderMainContent(oRm, oSideControl, iSideContentId, bShouldSetHeight);
			} else {
				this._renderMainContent(oRm, oSideControl, iSideContentId, bShouldSetHeight);
				this._renderSideContent(oRm, oSideControl, iSideContentId, bShouldSetHeight);
			}
		};

		DynamicSideContentRenderer.renderControls = function (oRM, aContent) {
			var iLength = aContent.length,
				i = 0;

			for (; i < iLength; i++) {
				oRM.renderControl(aContent[i]);
			}
		};

		DynamicSideContentRenderer._renderMainContent = function(oRm, oSideControl, iSideContentId, bShouldSetHeight) {
			oRm.write("<div id='" + iSideContentId + "-MCGridCell'");

			if (oSideControl._iMcSpan) {
				oRm.addClass("sapUiDSCSpan" + oSideControl._iMcSpan);
				oRm.writeClasses();
			}
			if (bShouldSetHeight) {
				oRm.addStyle("height", "100%");
				oRm.writeStyles();
			}
			oRm.write(">");

			this.renderControls(oRm, oSideControl.getMainContent());
			oRm.write("</div>");
		};

		DynamicSideContentRenderer._renderSideContent = function(oRm, oSideControl, iSideContentId, bShouldSetHeight) {
			// on firefox the 'aside' side content is not shown when below the main content; use div instead
			var sSideContentTag = sap.ui.Device.browser.firefox ? "div" : "aside";

			oRm.write("<" + sSideContentTag + " id='" + iSideContentId + "-SCGridCell'");

			var oMessageBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.layout");
			oRm.writeAttribute("aria-label", oMessageBundle.getText(SIDE_CONTENT_LABEL));

			oRm.writeAccessibilityState(oSideControl, {
				role: "complementary"
			});

			if (oSideControl._iScSpan) {
				oRm.addClass("sapUiDSCSpan" + oSideControl._iScSpan);
				oRm.writeClasses();
			}
			if (bShouldSetHeight) {
				oRm.addStyle("height", "100%");
				oRm.writeStyles();
			}
			oRm.write(">");

			this.renderControls(oRm, oSideControl.getSideContent());
			oRm.write("</" + sSideContentTag + ">");
		};

		return DynamicSideContentRenderer;
	}, /* bExport= */ true);

}; // end of sap/ui/layout/DynamicSideContentRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.FixFlexRenderer') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare('sap.ui.layout.FixFlexRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/FixFlexRenderer",['jquery.sap.global'],
	function (jQuery) {
		"use strict";

		/**
		 * FixFlex renderer
		 * @namespace
		 */
		var FixFlexRenderer = {};

		/**
		 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
		 *
		 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
		 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
		 */
		FixFlexRenderer.render = function (oRm, oControl) {
			// Control container
			oRm.write('<div');
			oRm.writeControlData(oControl);
			oRm.addClass('sapUiFixFlex');

			if (oControl.getMinFlexSize() !== 0) {
				oRm.addClass('sapUiFixFlexInnerScrolling');
			}

			// Setting css class for horizontal layout
			if (!oControl.getVertical()) {
				oRm.addClass('sapUiFixFlexRow');
			}

			// Setting css class for older browsers
			if (!jQuery.support.hasFlexBoxSupport) {
				oRm.addClass('sapUiFixFlex-Legacy');
			}

			oRm.writeClasses();
			oRm.write('>');

			// Defines the rendering sequence - fix/flex or flex/fix
			if (oControl.getFixFirst()) {
				this.renderFixChild(oRm, oControl);
				this.renderFlexChild(oRm, oControl);
			} else {
				this.renderFlexChild(oRm, oControl);
				this.renderFixChild(oRm, oControl);
			}

			// Close the FixFlex Control container
			oRm.write('</div>');
		};

		/**
		 * Render the controls in the flex container
		 *
		 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
		 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
		 */
		FixFlexRenderer.renderFixChild = function (oRm, oControl) {
			var aFixContent = oControl.getFixContent();

			oRm.write('<div id="' + oControl.getId() + '-Fixed" class="sapUiFixFlexFixed"');

			// Set specific height/width to the element depending of the orientation of the layout
			if (oControl.getFixContentSize() !== 'auto') {
				if (oControl.getVertical()) {
					oRm.addStyle('height', oControl.getFixContentSize());
				} else {
					oRm.addStyle('width', oControl.getFixContentSize());
				}
				oRm.writeStyles();
			}

			oRm.write('>');

			// Render the children
			for (var i = 0; i < aFixContent.length; i++) {
				oRm.renderControl(aFixContent[i]);
			}

			oRm.write('</div>');
		};

		/**
		 * Render the controls in the fix container
		 *
		 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
		 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
		 */
		FixFlexRenderer.renderFlexChild = function (oRm, oControl) {
			var oFlexContent = oControl.getFlexContent();

			oRm.write('<div id="' + oControl.getId() + '-Flexible" class="sapUiFixFlexFlexible">');
			oRm.write('<div id="' + oControl.getId() + '-FlexibleContainer" class="sapUiFixFlexFlexibleContainer"');
			if (oControl.getMinFlexSize() !== 0) {
				if (oControl.getVertical()) {
					oRm.write('style="min-height:' + oControl.getMinFlexSize() + 'px"');
				} else {
					oRm.write('style="min-width:' + oControl.getMinFlexSize() + 'px"');
				}
			}
			oRm.write('>');

			// Render the child
			oRm.renderControl(oFlexContent);

			oRm.write('</div>');
			oRm.write('</div>');
		};

		return FixFlexRenderer;

	}, /* bExport= */ true);

}; // end of sap/ui/layout/FixFlexRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.Grid.designtime') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the Design Time Metadata for the sap.ui.layout.Grid control
jQuery.sap.declare('sap.ui.layout.Grid.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/layout/Grid.designtime",[],
	function () {
		"use strict";

		return {
			actions: {
				remove: {
					changeType: "hideControl"
				},
				reveal: {
					changeType: "unhideControl"
				}
			},
			aggregations: {
				content: {
					domRef: ":sap-domref",
					actions: {
						move: "moveControls"
					}
				}
			},
			name: {
				singular: "GRID_CONTROL_NAME",
				plural: "GRID_CONTROL_NAME_PLURAL"
			}
		};
	}, /* bExport= */ false);
}; // end of sap/ui/layout/Grid.designtime.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.GridRenderer') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare('sap.ui.layout.GridRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/GridRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * @author SAP SE
	 * @version
	 * 1.48.5
	 * @namespace
	 */
	var GridRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager}
	 *            oRm the RenderManager that can be used for writing to the render
	 *            output buffer
	 * @param {sap.ui.core.Control}
	 *            oControl an object representation of the control that should be
	 *            rendered
	 */
	GridRenderer.render = function(oRm, oControl) {
		var INDENTPATTERN = /^([X][L](?:[0-9]|1[0-1]))? ?([L](?:[0-9]|1[0-1]))? ?([M](?:[0-9]|1[0-1]))? ?([S](?:[0-9]|1[0-1]))?$/i;
		var SPANPATTERN =   /^([X][L](?:[1-9]|1[0-2]))? ?([L](?:[1-9]|1[0-2]))? ?([M](?:[1-9]|1[0-2]))? ?([S](?:[1-9]|1[0-2]))?$/i;

		// write the HTML into the render manager
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapUiRespGrid");

		var  sMedia = oControl._getCurrentMediaContainerRange(sap.ui.Device.media.RANGESETS.SAP_STANDARD_EXTENDED).name;
		oRm.addClass("sapUiRespGridMedia-Std-" + sMedia);

		var fHSpacing = oControl.getHSpacing();
		// Check for allowed values, if not matching, set to to default 1 rem.
		if (fHSpacing == 0.5) {
			fHSpacing = "05";
		} else if ((fHSpacing !== 0) && (fHSpacing !== 1) && (fHSpacing !== 2)) {
			fHSpacing = 1;
		}

		oRm.addClass("sapUiRespGridHSpace" + fHSpacing);

		var fVSpacing = oControl.getVSpacing();
		// Check for allowed values, if not matching, set to to default 1 rem.
		if (fVSpacing == 0.5) {
			fVSpacing = "05";
		} else if ((fVSpacing !== 0) && (fVSpacing !== 1) && (fVSpacing !== 2)) {
			fVSpacing = 1;
		}

		oRm.addClass("sapUiRespGridVSpace" + fVSpacing);

		var sPosition = oControl.getPosition();
		if (sPosition) {
			sPosition = sPosition.toUpperCase();
			if (sPosition === sap.ui.layout.GridPosition.Center.toUpperCase()) {
				oRm.addClass("sapUiRespGridPosCenter");
			} else if (sPosition === sap.ui.layout.GridPosition.Right.toUpperCase()) {
				oRm.addClass("sapUiRespGridPosRight");
			}
		}

		oRm.writeClasses();
		var sWidth = oControl.getWidth();
		if (sWidth !== "100%" && sWidth !== "auto" && sWidth !== "inherit") {
			if (fHSpacing == 0) {
				sWidth = "width: " + sWidth;
			} else {
				sWidth = "width: -webkit-calc(" + sWidth + " - " + fHSpacing  + "rem); width: calc(" + sWidth + " - " + fHSpacing  + "rem); ";
			}
			oRm.writeAttribute("style", sWidth);
		}

		var sRole = oControl._getAccessibleRole();
		var mAriaProps;
		if (sRole) {
			mAriaProps = {role: sRole};
		}

		oRm.writeAccessibilityState(oControl, mAriaProps);

		oRm.write(">");

		var aItems = oControl.getContent();

		var defaultSpan = oControl.getDefaultSpan();

		// Default Span if nothing is specified at all, not on Grid , not on the
		// cell.
		var aInitialSpan = [ "", "XL3", "L3", "M6", "S12"];

		// Default Indent if nothing is specified at all, not on Grid , not on the
		// cell.
		var aInitialIndent = [ "", "XL0", "L0", "M0", "S0"];

		// Default Span values defined on the whole Grid, that is used if there is
		// no individual span defined for the cell.
		var aDefaultSpan = SPANPATTERN.exec(defaultSpan);

		// Determinate if default span value for XL was changed.
		var bDefaultSpanXLChanged = oControl._getSpanXLChanged();

		// Determinate if default indent value for Indent was changed.
		var bDefaultIndentXLChanged = oControl._getIndentXLChanged();

		// Default indent of the whole Grid control
		var sDefaultIndent = oControl.getDefaultIndent();
		var aDefaultIndent = INDENTPATTERN.exec(sDefaultIndent);


		for ( var i = 0; i < aItems.length; i++) { // loop over all child controls
			oRm.write("<div");
			var oLay = oControl._getLayoutDataForControl(aItems[i]);
			var bCellSpanXLChanged = false;

			if (oLay) {

				//************************************************************************
				//  LINE BREAK
				//************************************************************************
				var bBreakXLChanged = false;
				if (oLay.getLinebreak() === true) {
					oRm.addClass("sapUiRespGridBreak");
				} else {
					if (oLay.getLinebreakXL() === true) {
						bBreakXLChanged = true;
						oRm.addClass("sapUiRespGridBreakXL");
					}
					if (oLay.getLinebreakL() === true) {
						if (!bBreakXLChanged && !oLay._getLinebreakXLChanged()){
							oRm.addClass("sapUiRespGridBreakXL");
						}
						oRm.addClass("sapUiRespGridBreakL");
					}
					if (oLay.getLinebreakM() === true) {
						oRm.addClass("sapUiRespGridBreakM");
					}
					if (oLay.getLinebreakS() === true) {
						oRm.addClass("sapUiRespGridBreakS");
					}
				}




				//************************************************************************
				//  SPAN
				//************************************************************************
				// array of spans
				var aSpan;
				// sSpanL needed for XL if XL is not defined at all
				var sSpanL;
				var sSpan = oLay.getSpan();
				if (!sSpan || !sSpan.lenght == 0) {
					aSpan = aDefaultSpan;
				} else {
					aSpan = SPANPATTERN.exec(sSpan);
					if (/XL/gi.test(sSpan)) {
						bCellSpanXLChanged = true;
					}
				}


				if (aSpan) {
					for ( var j = 1; j < aSpan.length; j++) {
						var span = aSpan[j];
						if (!span) {
							span = aDefaultSpan[j];
							if (!span) {
								span = aInitialSpan[j];
							}
						}

						if (span.substr(0, 1) === "L") {
							sSpanL = span.substr(1, 2);
						}

						// Catch the Individual Spans
						var iSpanXLarge = oLay.getSpanXL();
						var iSpanLarge = oLay.getSpanL();
						var iSpanMedium = oLay.getSpanM();
						var iSpanSmall = oLay.getSpanS();

						span = span.toUpperCase();
						if ((span.substr(0, 2) === "XL") && (iSpanXLarge > 0)	&& (iSpanXLarge < 13)) {
							oRm.addClass("sapUiRespGridSpanXL" + iSpanXLarge);
							bCellSpanXLChanged = true;
						} else if ((span.substr(0, 1) === "L") && (iSpanLarge > 0)	&& (iSpanLarge < 13)) {
							oRm.addClass("sapUiRespGridSpanL" + iSpanLarge);
							sSpanL = iSpanLarge;
						} else if ((span.substr(0, 1) === "M") && (iSpanMedium > 0)	&& (iSpanMedium < 13)) {
							oRm.addClass("sapUiRespGridSpanM" + iSpanMedium);
						} else if ((span.substr(0, 1) === "S") && (iSpanSmall > 0) && (iSpanSmall < 13)) {
							oRm.addClass("sapUiRespGridSpanS" + iSpanSmall);
						} else {
							if ((span.substr(0, 2) !== "XL") || bDefaultSpanXLChanged || bCellSpanXLChanged){
								oRm.addClass("sapUiRespGridSpan" + span);
							}
						}
					}

					if (!bDefaultSpanXLChanged && !bCellSpanXLChanged) {
						// Backwards compatibility - if the XL not defined - it should be as L.
						oRm.addClass("sapUiRespGridSpanXL" + sSpanL);
					}
				}




				//************************************************************************
				//  INDENT
				//************************************************************************

				var aIndent;
				var sIndentL;
				var sIndent = oLay.getIndent();
				if (!sIndent || sIndent.length == 0) {
					aIndent = aDefaultIndent;
				} else {
					aIndent = INDENTPATTERN.exec(sIndent);
					if (/XL/gi.test(sIndent)) {
						bDefaultIndentXLChanged = true;
					}
				}

				if (!aIndent) {
					aIndent = aDefaultIndent;
					if (!aIndent) {
						aIndent = undefined; // no indent
					}
				}

				// Catch the Individual Indents
				var iIndentXLarge = oLay.getIndentXL();
				var iIndentLarge = oLay.getIndentL();
				var iIndentMedium = oLay.getIndentM();
				var iIndentSmall = oLay.getIndentS();

				if (aIndent) {
					for ( var j = 1; j < aIndent.length; j++) {
						var indent = aIndent[j];
						if (!indent) {
							if (aDefaultIndent && aDefaultIndent[j]) {
								indent = aDefaultIndent[j];
							} else {
								indent = aInitialIndent[j];
							}
						}
						if (indent) {
							indent = indent.toUpperCase();
							if (indent.substr(0, 1) === "L") {
								sIndentL = indent.substr(1, 2);
							}



							if ((indent.substr(0, 2) === "XL") && (iIndentXLarge > 0) && (iIndentXLarge < 12)) {
									oRm.addClass("sapUiRespGridIndentXL" + iIndentXLarge);
									bDefaultIndentXLChanged = true;
							} else if ((indent.substr(0, 1) === "L") && (iIndentLarge > 0)
									&& (iIndentLarge < 12)) {
								oRm.addClass("sapUiRespGridIndentL" + iIndentLarge);
								sIndentL = iIndentLarge;
							} else if ((indent.substr(0, 1) === "M")
									&& (iIndentMedium > 0) && (iIndentMedium < 12)) {
								oRm.addClass("sapUiRespGridIndentM"	+ iIndentMedium);
							} else if ((indent.substr(0, 1) === "S")
									&& (iIndentSmall > 0) && (iIndentSmall < 12)) {
								oRm.addClass("sapUiRespGridIndentS" + iIndentSmall);
							} else {
								if (!(/^(XL0)? ?(L0)? ?(M0)? ?(S0)?$/.exec(indent))) {
									oRm.addClass("sapUiRespGridIndent" + indent);
								}
							}
						}
					}
					if (!bDefaultIndentXLChanged) {
						// Backwards compatibility - if the XL not defined - it should be as L.
						if (sIndentL && sIndentL > 0) {
							oRm.addClass("sapUiRespGridIndentXL" + sIndentL);
						}
					}

				}




				// Visibility
				var
				l = oLay.getVisibleL(),
				m = oLay.getVisibleM(),
				s = oLay.getVisibleS();

				// TODO: visibility of XL different to L

				if (!l && m && s) {
					oRm.addClass("sapUiRespGridHiddenL");
					oRm.addClass("sapUiRespGridHiddenXL");
				} else if (!l && !m && s) {
					oRm.addClass("sapUiRespGridVisibleS");
				} else if (l && !m && !s) {
					oRm.addClass("sapUiRespGridVisibleL");
					oRm.addClass("sapUiRespGridVisibleXL");
				} else if (!l && m && !s) {
					oRm.addClass("sapUiRespGridVisibleM");
				} else if (l && !m && s) {
					oRm.addClass("sapUiRespGridHiddenM");
				} else if (l && m && !s) {
					oRm.addClass("sapUiRespGridHiddenS");
				}

				// Move - moveBackwards shifts a grid element to the left in LTR mode and
				// opposite in RTL mode

				var sMoveB = oLay.getMoveBackwards();

				if (sMoveB && sMoveB.length > 0) {
					var aMoveB = INDENTPATTERN.exec(sMoveB);
					if (aMoveB) {
						for ( var j = 1; j < aMoveB.length; j++) {
							var moveB = aMoveB[j];
							if (moveB) {
								oRm.addClass("sapUiRespGridBwd"	+ moveB.toUpperCase());
							}
						}
					}
				}
				// ... while moveForward shifts it to the right in LTR mode and opposite
				// in RTL
				var sMoveF = oLay.getMoveForward();

				if (sMoveF && sMoveF.length > 0) {
					var aMoveF = INDENTPATTERN.exec(sMoveF);
					if (aMoveF) {
						for ( var j = 1; j < aMoveF.length; j++) {
							var moveF = aMoveF[j];
							if (moveF) {
								oRm.addClass("sapUiRespGridFwd"	+ moveF.toUpperCase());
							}
						}
					}
				}

				// Internal additional classes
				if (oLay._sStylesInternal) {
					oRm.addClass(oLay._sStylesInternal);
				}
			}

			// No layoutData - apply default values. it could be
			// default value defined on Grid control, or id it is does not exist default parameter value "XL3 L3 M6 S12"
			// XL default value changes if L is defined.
			if (!oLay) {
				var span = "";
				if (aDefaultSpan) {
					for ( var j = 1; j < aDefaultSpan.length; j++) {
						span = aDefaultSpan[j];
						if (!span) {
							if ((j == 1) && (aDefaultSpan[j + 1])) {
								span = "X" + aDefaultSpan[j + 1];
							} else {
								span = aInitialSpan[j];
							}
						}
						oRm.addClass("sapUiRespGridSpan" + span.toUpperCase());
					}
				} else {
					for ( var j = 1; j < aInitialSpan.length; j++) {
						span = aInitialSpan[j];
						oRm.addClass("sapUiRespGridSpan" + span.toUpperCase());
					}
				}

				var indent = "";
				if (aDefaultIndent) {
					for ( var j = 1; j < aDefaultIndent.length; j++) {
						indent = aDefaultIndent[j];
						if (!indent) {
							if ((j == 1) && (aDefaultIndent[j + 1])) {
								indent = "X" + aDefaultIndent[j + 1];
							} else {
								indent = aInitialIndent[j];
							}
						}
						if (((indent.substr(0,1) !== "X") && (indent.substr(1,1) !== "0")) || ((indent.substr(0,1) == "X") && (indent.substr(2,1) !== "0"))) {
							oRm.addClass("sapUiRespGridIndent" + indent.toUpperCase());
						}
					}
				}
			}

			oRm.writeClasses();
			oRm.write(">");

			oRm.renderControl(aItems[i]); // render the child control (could even
											// be a big control tree, but you don't
											// need to care)

			oRm.write("</div>"); // end of the box around the respective child
		}

		oRm.write("</div>"); // end of the complete grid  control
	};

	return GridRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/layout/GridRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.HorizontalLayout.designtime') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the Design Time Metadata for the sap.ui.layout.HorizontalLayout control
jQuery.sap.declare('sap.ui.layout.HorizontalLayout.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/layout/HorizontalLayout.designtime",[],
	function() {
	"use strict";

	return {
		aggregations: {
			content: {
				domRef: ":sap-domref",
				actions: {
					move: "moveControls"
				}
			}
		},
		actions: {
			remove: {
				changeType: "hideControl"
			},
			reveal: {
				changeType: "unhideControl"
			}
		},
		name: {
			singular: "HORIZONTAL_LAYOUT_CONTROL_NAME",
			plural: "HORIZONTAL_LAYOUT_CONTROL_NAME_PLURAL"
		}
	};

}, /* bExport= */ false);

}; // end of sap/ui/layout/HorizontalLayout.designtime.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.HorizontalLayoutRenderer') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare('sap.ui.layout.HorizontalLayoutRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/HorizontalLayoutRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * HorizontalLayout renderer.
	 * @namespace
	 */
	var HorizontalLayoutRenderer = {
	};


	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	HorizontalLayoutRenderer.render = function(oRenderManager, oControl){
		// convenience variable
		var rm = oRenderManager;
		var bNoWrap = !oControl.getAllowWrapping();

		// write the HTML into the render manager
		rm.write("<div");
		rm.writeControlData(oControl);
		rm.addClass("sapUiHLayout");
		if (bNoWrap) {
			rm.addClass("sapUiHLayoutNoWrap");
		}
		rm.writeClasses();
		rm.write(">"); // div element

		var aChildren = oControl.getContent();
		for (var i = 0; i < aChildren.length; i++) {
			if (bNoWrap) {
				rm.write("<div class='sapUiHLayoutChildWrapper'>");
			}
			rm.renderControl(aChildren[i]);
			if (bNoWrap) {
				rm.write("</div>");
			}
		}

		rm.write("</div>");
	};


	return HorizontalLayoutRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/layout/HorizontalLayoutRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.ResponsiveFlowLayoutRenderer') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare('sap.ui.layout.ResponsiveFlowLayoutRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/ResponsiveFlowLayoutRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * ResponsiveFlowLayout renderer.
	 * @namespace
	 */
	var ResponsiveFlowLayoutRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager}
	 *            oRm The RenderManager that can be used for writing to the render
	 *            output buffer
	 * @param {sap.ui.core.Control}
	 *            oControl An object representation of the control that should be
	 *            rendered
	 */
	(function() {
		ResponsiveFlowLayoutRenderer.render = function(oRm, oControl) {
			oRm.write("<div");
			oRm.writeControlData(oControl);
			oRm.addClass("sapUiRFL");
			oRm.writeClasses();

			var sRole = oControl._getAccessibleRole();
			var mAriaProps;
			if (sRole) {
				mAriaProps = {role: sRole};
			}

			oRm.writeAccessibilityState(oControl, mAriaProps);

			oRm.write(">"); // div element

			// rendering of content happens in oControl.fnRenderContent

			oRm.write("</div>");
		};
	}());


	return ResponsiveFlowLayoutRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/layout/ResponsiveFlowLayoutRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.ResponsiveSplitterRenderer') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare('sap.ui.layout.ResponsiveSplitterRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/ResponsiveSplitterRenderer",['sap/ui/core/IconPool'],
	function (IconPool) {
	"use strict";

	/**
	 * ResponsiveSplitter renderer.
	 * @namespace
	 */
	var ResponsiveSplitterRenderer = {};
	IconPool.insertFontFaceStyle();

	ResponsiveSplitterRenderer.render = function (oRm, oControl) {
		oRm.write("<div ");
		oRm.addClass("sapUiResponsiveSplitter");
		oRm.writeControlData(oControl);
		oRm.addStyle("width", oControl.getWidth());
		oRm.addStyle("height", oControl.getHeight());
		oRm.writeStyles();
		oRm.writeClasses();
		oRm.write(">");

		var aPages = oControl.getAggregation("_pages");

		if (aPages) {
			oControl.getAggregation("_pages").forEach(oRm.renderControl);
			this.renderPaginator(oRm, oControl);
		}

		oRm.write("</div>");
	};

	ResponsiveSplitterRenderer.renderPaginator = function (oRm, oControl) {
		var bpCount = oControl._getMaxPageCount(),
			aPages = oControl.getAggregation("_pages") || [],
			oBundle = sap.ui.getCore().getLibraryResourceBundle('sap.ui.layout');

		oRm.write("<div ");
		oRm.writeAttribute("role", "navigation");
		oRm.addClass("sapUiResponsiveSplitterPaginator");
		oRm.writeClasses();
		oRm.write(">");

		oRm.write("<div ");
		oRm.addClass("sapUiResponsiveSplitterPaginatorNavButton");
		oRm.addClass("sapUiResponsiveSplitterHiddenPaginatorButton");
		oRm.addClass("sapUiResponsiveSplitterPaginatorButtonBack");
		oRm.writeClasses();
		oRm.write("></div>");

		oRm.write("<div ");
		oRm.addClass("sapUiResponsiveSplitterPaginatorButtons");
		oRm.writeClasses();
		oRm.writeAttribute("role", "radiogroup");
		oRm.writeAttributeEscaped("aria-label", oBundle.getText("RESPONSIVE_SPLITTER_ARIA_PAGINATOR_LABEL"));
		if (aPages.length > 0) {
			oRm.writeAttribute("aria-controls", aPages[0].getParent().getId());
		}
		oRm.write(">");

		for (var i = 0; i < bpCount; i++) {
			oRm.write("<div tabindex='0' ");
			oRm.write("page-index='" + i + "'");
			if (i === 0) {
				oRm.addClass("sapUiResponsiveSplitterPaginatorSelectedButton");
			}
			oRm.addClass("sapUiResponsiveSplitterHiddenElement");
			oRm.addClass("sapUiResponsiveSplitterPaginatorButton");
			oRm.writeClasses();
			oRm.writeAttribute("role", "radio");
			oRm.writeAttribute("aria-checked", false);
			oRm.write("></div>");
		}

		oRm.write("</div>");

		oRm.write("<div ");
		oRm.addClass("sapUiResponsiveSplitterPaginatorNavButton");
		oRm.addClass("sapUiResponsiveSplitterHiddenPaginatorButton");
		oRm.addClass("sapUiResponsiveSplitterPaginatorButtonForward");
		oRm.writeClasses();
		oRm.write("></div>");

		oRm.write("</div>");
	};

	return ResponsiveSplitterRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/layout/ResponsiveSplitterRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.ResponsiveSplitterUtilities') ) {
/*!
* UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
*/
jQuery.sap.declare('sap.ui.layout.ResponsiveSplitterUtilities'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/ResponsiveSplitterUtilities",["jquery.sap.global", "sap/ui/core/Control"], function (jQuery, Control) {
	"use strict";

	var RSUtil = {};

	/**
	 * Recursively visits all splitPanes inside the given PaneContainer
	 */
	RSUtil.visitPanes = function (oPaneContainer, fnCallback) {
		var aPanes, oPane;
		if (!oPaneContainer) {
			return;
		}

		aPanes = oPaneContainer.getPanes();
		for (var i = 0; i < aPanes.length; i++) {
			oPane = aPanes[i];
			if (oPane instanceof sap.ui.layout.SplitPane) {
				fnCallback(oPane);
			} else {
				RSUtil.visitPanes(oPane, fnCallback);
			}
		}
	};

	/**
	 * Helper structure used to represent an interval inside the ResponsiveSplitter.
	 * The intervals are defined by the requiredParentWidth properties of the splitPanes
	 * @param iFrom - Staring point for the interval
	 * @param iTo - End point of the interval
	 * @param oPaneContainer - The content of the RSLayout
	 */
	RSUtil.splitterInterval = function (iFrom, iTo, oPaneContainer) {
		this.iFrom = iFrom;
		this.iTo = iTo;
		this.iPagesCount = 0;
		var oMainPage = [],
			aPages = [oMainPage];

		RSUtil.visitPanes(oPaneContainer, function (pane) {
			var width = pane.getRequiredParentWidth();
			var paneDescriptor = {
				demandPane: pane.getDemandPane()
			};
			if (width <= iFrom) {
				oMainPage.push(paneDescriptor);
			} else {
				aPages.push(paneDescriptor);
			}
		});

		if (oMainPage.length == 0) {
			aPages.splice(0, 1);
		}

		this.iPagesCount = aPages.length;
		this.aPages = aPages;
	};

	return RSUtil;

}, /* bExport= */ true);

}; // end of sap/ui/layout/ResponsiveSplitterUtilities.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.SplitterRenderer') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare('sap.ui.layout.SplitterRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/SplitterRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * Splitter renderer.
	 * @namespace
	 */
	var SplitterRenderer = {
	};


	/**
	 * Renders the main HTML element for the Splitter control and everything else is rendered in a
	 * hidden area inside the splitter. The content of that hidden area is shown after rendering to
	 * avoid flickering.
	 *
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	SplitterRenderer.render = function(oRm, oControl){
		var bHorizontal       = oControl.getOrientation() === sap.ui.core.Orientation.Horizontal;
		var sOrientationClass = bHorizontal ? "sapUiLoSplitterH" : "sapUiLoSplitterV";
		var bAnimate          = sap.ui.getCore().getConfiguration().getAnimation();


		// Make sure we have the main element available before rendering the children so we can use
		// the element width to calculate before rendering the children.
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapUiLoSplitter");
		oRm.addClass(sOrientationClass);
		if (bAnimate && !oControl._liveResize) {
			// Do not animate via CSS when liveResize is enabled
			oRm.addClass("sapUiLoSplitterAnimated");
		}
		oRm.writeClasses();
		oRm.addStyle("width", oControl.getWidth());
		oRm.addStyle("height", oControl.getHeight());
		oRm.writeStyles();
		oRm.write(">"); // main div

		this.renderInitialContent(oRm, oControl);

		oRm.write("</div>"); // main control
	};

	SplitterRenderer.renderInitialContent = function(oRm, oControl) {
		var sId         = oControl.getId();
		var bHorizontal = oControl.getOrientation() === sap.ui.core.Orientation.Horizontal;
		var sSizeType   = bHorizontal ? "width" : "height";
		var sGripIcon = "sap-icon://" + (bHorizontal ? "horizontal" : "vertical") + "-grip";

		var aContents = oControl._getContentAreas();
		var iLen = aContents.length;
		var aCalculatedSizes = oControl.getCalculatedSizes();
		for (var i = 0; i < iLen; ++i) {
			var oLayoutData = aContents[i].getLayoutData();
			var sSize = "0";
			if (aCalculatedSizes[i]) {
				// Use precalculated sizes if available
				sSize = aCalculatedSizes[i] + "px";
			} else if (oLayoutData) {
				sSize = oLayoutData.getSize();
			}

			// Render content control
			oRm.write(
				"<section " +
				"id=\"" + sId + "-content-" + i + "\" " +
				"style=\"" + sSizeType + ": " + sSize + ";\" " +
				"class=\"sapUiLoSplitterContent\">"
			);
			oRm.renderControl(aContents[i]);
			oRm.write("</section>");

			if (i < iLen - 1) {
				// Render splitter if this is not the last control
				oRm.write(
					"<div id=\"" + sId + "-splitbar-" + i + "\" " +
						"role=\"separator\" " +
						"title=\"" + oControl._getText("SPLITTER_MOVE") + "\" " +
						"class=\"sapUiLoSplitterBar\" " +
						"aria-orientation=\"" + (bHorizontal ? "vertical" : "horizontal") + "\" " +
						"tabindex=\"0\">"
				);

				if (oControl._bUseIconForSeparator) {
					// Icon ID must start with sId + "-splitbar-" + i so that the target is recognized for resizing
					oRm.writeIcon(sGripIcon, "sapUiLoSplitterBarIcon", {
						"id" : sId + "-splitbar-" + i + "-icon",
						// prevent any tooltip / ARIA attributes on the icon as they
						// are already set on the outer div
						"title" : null,
						"aria-label" : null
					});
				} else {
					oRm.write("<span class='sapUiLoSplitterBarIcon'></span>");
				}
				oRm.write("</div>");
			}
		}

		oRm.write(
			"<div id=\"" + sId + "-overlay\" class=\"sapUiLoSplitterOverlay\" style=\"display: none;\">" +
			"<div id=\"" + sId + "-overlayBar\" class=\"sapUiLoSplitterOverlayBar\">"
		);

		if (oControl._bUseIconForSeparator) {
			// Icon ID must start with sId + "-splitbar" so that the target is recognized for resizing
			oRm.writeIcon(sGripIcon, "sapUiLoSplitterBarIcon", {
				"id" : sId + "-splitbar-Overlay-icon",
				// prevent any tooltip / ARIA attributes on the icon as they
				// are already set on the outer div
				"title" : null,
				"aria-label" : null
			});
		} else {
			oRm.write("<span class=\"sapUiLoSplitterBarIcon\"></span>");
		}
		oRm.write(
			"</div>" +
			"</div>"
		);
	};



	return SplitterRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/layout/SplitterRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.VerticalLayout.designtime') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the Design Time Metadata for the sap.ui.layout.VerticalLayout control
jQuery.sap.declare('sap.ui.layout.VerticalLayout.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/layout/VerticalLayout.designtime",[],
	function () {
		"use strict";

		return {
			actions: {
				remove: {
					changeType: "hideControl"
				},
				reveal: {
					changeType: "unhideControl"
				}
			},
			aggregations: {
				content: {
					domRef: ":sap-domref",
					actions: {
						move: "moveControls"
					}
				}
			},
			name: {
				singular: "VERTICAL_LAYOUT_CONTROL_NAME",
				plural: "VERTICAL_LAYOUT_NAME_PLURAL"
			}
		};

	}, /* bExport= */ false);
}; // end of sap/ui/layout/VerticalLayout.designtime.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.VerticalLayoutRenderer') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.layout.VerticalLayout
jQuery.sap.declare('sap.ui.layout.VerticalLayoutRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/VerticalLayoutRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * layout/VerticalLayout renderer.
	 * @namespace
	 */
	var VerticalLayoutRenderer = {
	};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	VerticalLayoutRenderer.render = function(oRenderManager, oVerticalLayout){
		// convenience variable
		var rm = oRenderManager;

		// write the HTML into the render manager
		rm.write("<DIV");
		rm.writeControlData(oVerticalLayout);
		rm.addClass("sapUiVlt");
		rm.addClass("sapuiVlt"); // for compatibility keep the old, wrong class name

		if (oVerticalLayout.getWidth() && oVerticalLayout.getWidth() != '') {
			rm.addStyle("width", oVerticalLayout.getWidth());
		}
		rm.writeStyles();
		rm.writeClasses();
		rm.write(">"); // DIV element

		// render content
		var aContent = oVerticalLayout.getContent();

		for ( var i = 0; i < aContent.length; i++) {
			rm.write("<DIV class=\"sapUiVltCell sapuiVltCell\">"); // for compatibility keep the old, wrong class name
			rm.renderControl(aContent[i]);
			rm.write("</DIV>");
		}

		rm.write("</DIV>");
	};


	return VerticalLayoutRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/layout/VerticalLayoutRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.changeHandler.AddFormContainer') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare('sap.ui.layout.changeHandler.AddFormContainer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.Base'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.JsControlTreeModifier'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/changeHandler/AddFormContainer",[
		"sap/ui/fl/Utils", "jquery.sap.global", "sap/ui/fl/changeHandler/Base", "sap/ui/fl/changeHandler/JsControlTreeModifier"
	], function(FlexUtils, jQuery, Base, JsControlTreeModifier) {
		"use strict";

		/*
		 * Change handler for adding a form group.
		 * @alias sap.ui.layout.changeHandler.AddFormContainer
		 * @author SAP SE
		 * @version 1.48.5
		 * @experimental Since 1.48.0
		 */
		var AddGroup = { };

		/**
		 * Adds a form group.
		 *
		 * @param {sap.ui.fl.Change} oChange Change object with instructions to be applied on the control map
		 * @param {sap.ui.layout.form.Form} oForm Form control that matches the change selector for applying the change
		 * @param {object} mPropertyBag
		 * @param {object} mPropertyBag.modifier Modifier for the controls
		 * @public
		 */
		AddGroup.applyChange = function(oChange, oForm, mPropertyBag) {
			var oModifier = mPropertyBag.modifier,
				oAppComponent = mPropertyBag.appComponent,
				oView = FlexUtils.getViewForControl(oForm),
				oChangeDefinition = oChange.getDefinition();

			if (oChangeDefinition.texts && oChangeDefinition.texts.groupLabel && oChangeDefinition.texts.groupLabel.value && oChangeDefinition.content && oChangeDefinition.content.group && (oChangeDefinition.content.group.selector || oChangeDefinition.content.group.id)) {
				var sTitleText = oChangeDefinition.texts.groupLabel.value,
					iInsertIndex = oChangeDefinition.content.group.index,
					oTitle = oModifier.createControl("sap.ui.core.Title", oAppComponent, oView, oView.createId(jQuery.sap.uid())),
					oGroup = oModifier.createControl("sap.ui.layout.form.FormContainer", oAppComponent, oView, oChangeDefinition.content.group.selector || oChangeDefinition.content.group.id);

				oModifier.setProperty(oTitle, "text", sTitleText);
				oModifier.insertAggregation(oGroup, "title", oTitle);
				oModifier.insertAggregation(oForm, "formContainers", oGroup, iInsertIndex, oView);

			} else {
				FlexUtils.log.error("Change does not contain sufficient information to be applied: [" + oChangeDefinition.layer + "]" + oChangeDefinition.namespace + "/" + oChangeDefinition.fileName + "." + oChangeDefinition.fileType);
				//however subsequent changes should be applied
			}
		};

		/**
		 * Completes the change by adding change handler specific content
		 *
		 * @param {sap.ui.fl.Change} oChange Change wrapper object to be completed
		 * @param {object} oSpecificChangeInfo with attributes "groupLabel", the group label to be included in the change and "newControlId", the control ID for the control to be added
		 * @param {object} mPropertyBag
		 * @param {sap.ui.core.UiComponent} mPropertyBag.appComponent Component in which the change should be applied
		 * @public
		 */
		AddGroup.completeChangeContent = function(oChange, oSpecificChangeInfo, mPropertyBag) {
			var oChangeDefinition = oChange.getDefinition(),
				oAppComponent = mPropertyBag.appComponent;

			if (oSpecificChangeInfo.newLabel) {
				Base.setTextInChange(oChangeDefinition, "groupLabel", oSpecificChangeInfo.newLabel, "XFLD");
			} else {
				throw new Error("Cannot create a new group: oSpecificChangeInfo.groupLabel attribute required");
			}
			if (!oChangeDefinition.content) {
				oChangeDefinition.content = {};
			}
			if (!oChangeDefinition.content.group) {
				oChangeDefinition.content.group = {};
			}

			if (oSpecificChangeInfo.index === undefined) {
				throw new Error("Cannot create a new group: oSpecificChangeInfo.index attribute required");
			} else {
				oChangeDefinition.content.group.index = oSpecificChangeInfo.index;
			}

			if ( oSpecificChangeInfo.newControlId ){
				oChangeDefinition.content.group.selector = JsControlTreeModifier.getSelector(oSpecificChangeInfo.newControlId, oAppComponent);
			} else {
				throw new Error("Cannot create a new group: oSpecificChangeInfo.newControlId attribute required");
			}
		};

		return AddGroup;
	},
	/* bExport= */true);

}; // end of sap/ui/layout/changeHandler/AddFormContainer.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.changeHandler.AddSimpleFormGroup') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare('sap.ui.layout.changeHandler.AddSimpleFormGroup'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.Base'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.JsControlTreeModifier'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/changeHandler/AddSimpleFormGroup",[
		'sap/ui/fl/Utils', 'jquery.sap.global', 'sap/ui/fl/changeHandler/Base', "sap/ui/fl/changeHandler/JsControlTreeModifier"
	], function (Utils, jQuery, Base, JsControlTreeModifier) {
		"use strict";

		/*
		 * Change handler for adding a simple form group.
		 * @alias sap.ui.layout.changeHandler.AddSimpleFormGroup
		 * @author SAP SE
		 * @version 1.48.5
		 * @experimental Since 1.27.0
		 */
		var AddSimpleFormGroup = {};

		AddSimpleFormGroup.CONTENT_AGGREGATION = "content";

		var fnFirstGroupWithoutTitle = function(oModifier, aStopToken, aContent) {
			for (var i = 0; i < aContent.length; i++) {
				var sType = oModifier.getControlType(aContent[i]);
				if (aStopToken.indexOf(sType) === -1) {
					if (aContent[i].getVisible()) {
						return true;
					}
				} else {
					return false;
				}
			}
		};

		var fnMapGroupIndexToContentAggregationIndex = function(oModifier, aStopToken, aContent, iGroupIndex) {
			var oResult;
			var iCurrentGroupIndex = -1;

			// Empty simpleform case, when the title is null
			if (iGroupIndex === 0) {
				return iGroupIndex;
			}

			if (fnFirstGroupWithoutTitle(oModifier, aStopToken, aContent)) {
				iCurrentGroupIndex++;
			}

			for (var i = 0; i < aContent.length; i++) {
				var sType = oModifier.getControlType(aContent[i]);
				if (aStopToken.indexOf(sType) > -1) {
					iCurrentGroupIndex++;
					if (iCurrentGroupIndex === iGroupIndex) {
						oResult = aContent[i];
						return aContent.indexOf(oResult);
					}
				}
			}
			return aContent.length;
		};

		/**
		 * Adds a smart form group.
		 *
		 * @param {sap.ui.fl.Change} oChangeWrapper change wrapper object with instructions to be applied on the control map
		 * @param {sap.ui.layout.SimpleForm} oForm smart form control that matches the change selector for applying the change
         * @param {object} mPropertyBag
         * @param {sap.ui.core.UiComponent} mPropertyBag.appComponent component in which the change should be applied
		 * @public
		 */
		AddSimpleFormGroup.applyChange = function (oChangeWrapper, oForm, mPropertyBag) {
			var oModifier = mPropertyBag.modifier;
			var oView = mPropertyBag.view;
            var oAppComponent = mPropertyBag.appComponent;

			var oChange = oChangeWrapper.getDefinition();
			if (oChange.texts && oChange.texts.groupLabel && oChange.texts.groupLabel.value &&
				oChange.content && oChange.content.group &&
				(oChange.content.group.selector || oChange.content.group.id)) {
				var oGroupSelector = oChange.content.group.selector;
				var sGroupId;
				if (oGroupSelector) {
					if (oGroupSelector.idIsLocal) {
						sGroupId = oAppComponent.createId(oGroupSelector.id);
					} else {
						sGroupId = oGroupSelector.id;
					}
				} else {
					sGroupId = oChange.content.group.id;
				}
				var sLabelText = oChange.texts.groupLabel.value;

				var aContent = oModifier.getAggregation(oForm, AddSimpleFormGroup.CONTENT_AGGREGATION);

				var iInsertIndex;
				var iRelativeIndex;

				if (typeof oChange.content.group.index === "number") {
					// The old code support
					iInsertIndex = oChange.content.group.index;
				} else {
					iRelativeIndex = oChange.content.group.relativeIndex;
					iInsertIndex = fnMapGroupIndexToContentAggregationIndex(oModifier,
						["sap.ui.core.Title", "sap.m.Title", "sap.m.Toolbar", "sap.m.OverflowToolbar"],
						aContent, iRelativeIndex);
				}

				var oTitle = oModifier.createControl("sap.ui.core.Title", oAppComponent, oView, sGroupId);

				oModifier.setProperty(oTitle, "text", sLabelText);
				oModifier.insertAggregation(oForm, "content", oTitle, iInsertIndex, oView);

			} else {
				Utils.log.error("Change does not contain sufficient information to be applied: [" + oChange.layer + "]" + oChange.namespace + "/" + oChange.fileName + "." + oChange.fileType);
				//however subsequent changes should be applied
			}

			return true;
		};

		/**
		 * Completes the change by adding change handler specific content
		 *
		 * @param {sap.ui.fl.Change} oChangeWrapper change wrapper object to be completed
		 * @param {object} oSpecificChangeInfo with attributes "groupLabel", the group label to be included in the change and "newControlId", the control ID for the control to be added
         * @param {object} mPropertyBag
         * @param {sap.ui.core.UiComponent} mPropertyBag.appComponent component in which the change should be applied
		 * @public
		 */
		AddSimpleFormGroup.completeChangeContent = function (oChangeWrapper, oSpecificChangeInfo, mPropertyBag) {
			var oChange = oChangeWrapper.getDefinition();
			var oAppComponent = mPropertyBag.appComponent;

			if (oSpecificChangeInfo.newLabel) {
				Base.setTextInChange(oChange, "groupLabel", oSpecificChangeInfo.newLabel, "XFLD");
			} else {
				throw new Error("oSpecificChangeInfo.newLabel attribute required");
			}
			if (!oChange.content) {
				oChange.content = {};
			}
			if (!oChange.content.group) {
				oChange.content.group = {};
			}
			if (oSpecificChangeInfo.newControlId) {
				oChange.content.group.selector = JsControlTreeModifier.getSelector(oSpecificChangeInfo.newControlId, oAppComponent);
			} else {
				throw new Error("oSpecificChangeInfo.newControlId attribute required");
			}

			if (oSpecificChangeInfo.index === undefined) {
				throw new Error("oSpecificChangeInfo.index attribute required");
			} else {
				oChange.content.group.relativeIndex = oSpecificChangeInfo.index;
			}
		};

		/**
		 * Gets the id from the group to be added.
		 *
		 * @param {sap.ui.fl.Change} oChange - addSimpleFormGroup change, which contains the group id within the content
		 * @returns {string} groupId
		 * @public
		 */
		AddSimpleFormGroup.getControlIdFromChangeContent = function (oChange) {
			var sControlId;

			if (oChange && oChange._oDefinition) {
				sControlId = oChange._oDefinition.content.group.id;
			}

			return sControlId;
		};

		return AddSimpleFormGroup;
	}, /* bExport= */true);

}; // end of sap/ui/layout/changeHandler/AddSimpleFormGroup.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.changeHandler.HideSimpleForm') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare('sap.ui.layout.changeHandler.HideSimpleForm'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.JsControlTreeModifier'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/changeHandler/HideSimpleForm",[
	'jquery.sap.global',
	'sap/ui/fl/changeHandler/JsControlTreeModifier'
], function(jQuery, JsControlTreeModifier) {
	"use strict";

	/**
	 * Change handler for hiding of a control.
	 * @alias sap.ui.fl.changeHandler.HideControl
	 * @author SAP SE
	 * @version 1.48.5
	 * @experimental Since 1.27.0
	 */
	var HideForm = { };

	var fnIsTitleOrToolbar = function(oControl, oModifier){
		var sControlType = oModifier.getControlType(oControl);
		return (sControlType === "sap.ui.core.Title") ||
			(sControlType === "sap.m.Title") ||
			(sControlType === "sap.m.Toolbar") ||
			(sControlType === "sap.m.OverflowToolbar");
	};

	var fnGetFirstToolbarOrTitle = function(aContent, oModifier) {
		var iIndex;
		for (iIndex = 0; iIndex < aContent.length; ++iIndex){
			if (fnIsTitleOrToolbar(aContent[iIndex], oModifier)){
				return aContent[iIndex];
			}
		}
	};

	/**
	 * Hides a control.
	 *
	 * @param {sap.ui.fl.Change} oChange change object with instructions to be applied on the control map
	 * @param {sap.ui.core.Control} oControl control that matches the change selector for applying the change
	 * @param {object} mPropertyBag - map of properties
	 * @returns {boolean} true - if change could be applied
	 * @public
	 */
	HideForm.applyChange = function(oChange, oControl, mPropertyBag) {
		var oModifier = mPropertyBag.modifier;
		var oView = mPropertyBag.view;
		var oAppComponent = mPropertyBag.appComponent;

		var oChangeDefinition = oChange.getDefinition();

		// !important : sHideId was used in 1.40, do not remove for compatibility!
		var oRemovedElement = oModifier.bySelector(oChangeDefinition.content.elementSelector || oChangeDefinition.content.sHideId, oAppComponent, oView);
		var aContent = oModifier.getAggregation(oControl, "content");
		var iStart = -1;

		// this is needed to trigger a refresh of a simpleform! Otherwise simpleForm content and visualization are not in sync
		oModifier.removeAllAggregation(oControl, "content");
		for (var i = 0; i < aContent.length; ++i) {
			oModifier.insertAggregation(oControl, "content", aContent[i], i);
		}

		if (oChangeDefinition.changeType === "hideSimpleFormField") {
			aContent.some(function (oField, index) {
				if (oField === oRemovedElement) {
					iStart = index;
					oModifier.setVisible(oField, false);
				}
				if (iStart >= 0 && index > iStart) {
					if ((oModifier.getControlType(oField) === "sap.m.Label") ||
						(oModifier.getControlType(oField) === "sap.ui.comp.smartfield.SmartLabel") ||
						fnIsTitleOrToolbar(oField, oModifier)) {
						return true;
					} else {
						oModifier.setVisible(oField, false);
					}
				}
			});
		} else if (oChangeDefinition.changeType === "removeSimpleFormGroup") {
			var oTitleOrToolbar = fnGetFirstToolbarOrTitle(aContent, oModifier);
			var bFirstContainerWithoutTitle = oTitleOrToolbar && !oRemovedElement;
			aContent.some(function (oField, index) {
				// if there is no Title/Toolbar, there is only the one FormContainer without Title/Toolbar.
				// Therefor all Fields will be hidden.
				if (!oTitleOrToolbar) {
					oModifier.setVisible(oField, false);
				} else if (bFirstContainerWithoutTitle) {
					// if there is oTitleOrToolbar but no oRemovedElement the first FormContainer needs to be hidden.
					// This FormContainer has no Title/Toolbar, but there are FormContainers with Title/Toolbar
					// Therefor we have to set iStart to 0 and hide the first Field once
					iStart = 0;
					oModifier.setVisible(oField, false);
					bFirstContainerWithoutTitle = false;
				} else {
					if (oField === oRemovedElement) {
						iStart = index;
					}
					if (iStart >= 0 && index > iStart) {
						if (fnIsTitleOrToolbar(oField, oModifier)) {
							if (iStart === 0) {
								oModifier.removeAggregation(oControl, "content", oField, oView);
								oModifier.insertAggregation(oControl, "content", oField, 0, oView);
							}
							return true;
						} else {
							oModifier.setVisible(oField, false);
						}
					}
				}
			});
			if (oRemovedElement) {
				oModifier.removeAggregation(oControl, "content", oRemovedElement, oView);
			}
		}

		return true;
	};

	/**
	 * @param {object} oElement - removedElement
	 * @returns {object} stable element
	 * @private
	 */
	HideForm._getStableElement = function(oElement) {
		if (oElement.getMetadata().getName() === "sap.ui.layout.form.FormContainer") {
			return oElement.getTitle() || oElement.getToolbar();
		} else if (oElement.getMetadata().getName() === "sap.ui.layout.form.FormElement") {
			return oElement.getLabel();
		} else {
			return oElement;
		}
	};

	/**
	 * Completes the change by adding change handler specific content
	 *
	 * @param {sap.ui.fl.oChangeWrapper} oChangeWrapper change object to be completed
	 * @param {object} oSpecificChangeInfo as an empty object since no additional attributes are required for this operation
	 * @param {object} mPropertyBag - map of properties
	 * @param {sap.ui.core.UiComponent} mPropertyBag.appComponent component in which the change should be applied
	 * @public
	 */
	HideForm.completeChangeContent = function(oChangeWrapper, oSpecificChangeInfo, mPropertyBag) {
		var oChange = oChangeWrapper.getDefinition();
		if (oSpecificChangeInfo.removedElement && oSpecificChangeInfo.removedElement.id) {
			var oStableElement = this._getStableElement(sap.ui.getCore().byId(oSpecificChangeInfo.removedElement.id));
			oChange.content.elementSelector = JsControlTreeModifier.getSelector(oStableElement, mPropertyBag.appComponent);
			oChangeWrapper.addDependentControl(oStableElement, "elementSelector", mPropertyBag);
		} else {
			throw new Error("oSpecificChangeInfo.removedElement.id attribute required");
		}
	};

	return HideForm;
},
/* bExport= */true);

}; // end of sap/ui/layout/changeHandler/HideSimpleForm.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.changeHandler.MoveSimpleForm') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare('sap.ui.layout.changeHandler.MoveSimpleForm'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.JsControlTreeModifier'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/changeHandler/MoveSimpleForm",["jquery.sap.global", "sap/ui/fl/changeHandler/JsControlTreeModifier", "sap/ui/fl/Utils"],
		function(jQuery, JsControlTreeModifier, Utils) {
			"use strict";

			/**
			 * Change handler for moving elements.
			 *
			 * @alias sap.ui.fl.changeHandler.MoveElements
			 * @author SAP SE
			 * @version 1.48.5
			 * @experimental Since 1.34.0
			 */
			var MoveSimpleForm = {};

			MoveSimpleForm.CHANGE_TYPE_MOVE_FIELD = "moveSimpleFormField";
			MoveSimpleForm.CHANGE_TYPE_MOVE_GROUP = "moveSimpleFormGroup";
			MoveSimpleForm.sTypeTitle = "sap.ui.core.Title";
			MoveSimpleForm.sTypeMTitle = "sap.m.Title";
			MoveSimpleForm.sTypeToolBar = "sap.m.Toolbar";
			MoveSimpleForm.sTypeOverflowToolBar = "sap.m.OverflowToolbar";
			MoveSimpleForm.sTypeLabel = "sap.m.Label";
			MoveSimpleForm.sTypeSmartLabel = "sap.ui.comp.smartfield.SmartLabel";
			MoveSimpleForm.CONTENT_AGGREGATION = "content";

			var fnFirstGroupWithoutTitle = function(oModifier, aStopToken, aContent) {
				for (var i = 0; i < aContent.length; i++) {
					var sType = oModifier.getControlType(aContent[i]);
					if (aStopToken.indexOf(sType) === -1) {
						if (aContent[i].getVisible()) {
							return true;
						}
					} else {
						return false;
					}
				}
			};

			var fnAddTitleToFirstGroupIfNeeded = function(oModifier, aContent, oSimpleForm, mPropertyBag, aStopToken) {
				if (fnFirstGroupWithoutTitle(oModifier, aStopToken, aContent)) {
					var oView = mPropertyBag.view;
					var oAppComponent = mPropertyBag.appComponent;
					var sGroupId = oAppComponent.createId(jQuery.sap.uid());

					var oTitle = oModifier.createControl("sap.ui.core.Title", oAppComponent, oView, sGroupId);
					oModifier.setProperty(oTitle, "text", "");
					oModifier.insertAggregation(oSimpleForm, "content", oTitle, 0, oView);
				}

				return oSimpleForm.getContent();
			};

			/**
			 * Moves an element from one aggregation to another.
			 *
			 * @param {sap.ui.fl.Change} oChangeWrapper
			 *          change object with instructions to be applied on the control map
			 * @param {sap.ui.core.Control} oSimpleForm
			 *          oSourceParent control that matches the change selector for applying the change, which is the source of
			 *          the move
			 * @param {object} mPropertyBag
			 *          map containing the control modifier object (either sap.ui.fl.changeHandler.JsControlTreeModifier or
			 *          sap.ui.fl.changeHandler.XmlTreeModifier), the view object where the controls are embedded and the application component
			 * @returns {boolean} true - if change could be applied
			 * @public
			 */
			MoveSimpleForm.applyChange = function(oChangeWrapper, oSimpleForm, mPropertyBag) {
				var oModifier = mPropertyBag.modifier;
				var oView = mPropertyBag.view;
				var oAppComponent = mPropertyBag.appComponent;

				var oContent = oChangeWrapper.getContent();
				var mMovedElement = oContent.movedElements[0];
				var aContent = oModifier.getAggregation(oSimpleForm, MoveSimpleForm.CONTENT_AGGREGATION);

				if (oChangeWrapper.getChangeType() === MoveSimpleForm.CHANGE_TYPE_MOVE_FIELD) {
					// !important : element was used in 1.40, do not remove for compatibility!
					var oSourceField = oModifier.bySelector(mMovedElement.elementSelector || mMovedElement.element, oAppComponent, oView);
					var iSourceFieldIndex = aContent.indexOf(oSourceField);
					var iSourceFieldLength = fnGetFieldLength(oModifier, aContent, iSourceFieldIndex);

					// Compute the fields target index
					// !important : groupId was used in 1.40, do not remove for compatibility!
					var oTargetGroup = oModifier.bySelector(mMovedElement.target.groupSelector || mMovedElement.target.groupId, oAppComponent, oView);
					var iTargetGroupIndex = aContent.indexOf(oTargetGroup);
					// !important : groupId was used in 1.40, do not remove for compatibility!
					var oSourceGroup = oModifier.bySelector(mMovedElement.source.groupSelector || mMovedElement.source.groupId, oAppComponent, oView);
					var iSourceGroupIndex = aContent.indexOf(oSourceGroup);

					var iTargetFieldIndex = fnMapFieldIndexToContentAggregationIndex(oModifier, aContent, iTargetGroupIndex,
							mMovedElement.target.fieldIndex, (iSourceGroupIndex === iTargetGroupIndex)
									&& (mMovedElement.source.fieldIndex < mMovedElement.target.fieldIndex));
					var iTargetFieldLength = fnGetFieldLength(oModifier, aContent, iTargetFieldIndex);

					var aContentClone = aContent.slice();
					var aFieldElements = aContentClone.slice(iSourceFieldIndex, iSourceFieldIndex + iSourceFieldLength);

					var aSegmentBeforeSource, aSegmentBeforeTarget, aSegmentBetweenSourceAndTarget, aSegmentTillEnd;
					if (iSourceFieldIndex < iTargetFieldIndex) {
						aSegmentBeforeSource = aContentClone.slice(0, iSourceFieldIndex);
						aSegmentBetweenSourceAndTarget = aContentClone.slice(iSourceFieldIndex + iSourceFieldLength, iTargetFieldIndex
								+ iTargetFieldLength);
						aSegmentTillEnd = aContentClone.slice(iTargetFieldIndex + iTargetFieldLength, aContentClone.length);
						aContentClone = aSegmentBeforeSource.concat(aSegmentBetweenSourceAndTarget.concat(aFieldElements.concat(aSegmentTillEnd)));
					} else if (iSourceFieldIndex > iTargetFieldIndex) {
						aSegmentBeforeTarget = aContentClone.slice(0, iTargetFieldIndex + iTargetFieldLength);
						aSegmentBetweenSourceAndTarget = aContentClone.slice(iTargetFieldIndex + iTargetFieldLength, iSourceFieldIndex);
						aSegmentTillEnd = aContentClone.slice(iSourceFieldIndex + iSourceFieldLength, aContentClone.length);
						aContentClone = aSegmentBeforeTarget.concat(aFieldElements.concat(aSegmentBetweenSourceAndTarget.concat(aSegmentTillEnd)));
					}

					if (iSourceFieldIndex != iTargetFieldIndex) {
						oModifier.removeAllAggregation(oSimpleForm, MoveSimpleForm.CONTENT_AGGREGATION);
						for (var i = 0; i < aContentClone.length; ++i) {
							oModifier.insertAggregation(oSimpleForm, MoveSimpleForm.CONTENT_AGGREGATION, aContentClone[i], i);
						}
					}

				} else if (oChangeWrapper.getChangeType() === MoveSimpleForm.CHANGE_TYPE_MOVE_GROUP) {

					var aStopGroupToken = [MoveSimpleForm.sTypeTitle,
											MoveSimpleForm.sTypeToolBar,
											MoveSimpleForm.sTypeMTitle,
											MoveSimpleForm.sTypeOverflowToolBar];
					// !important : element was used in 1.40, do not remove for compatibility!
					var oMovedGroup = oModifier.bySelector(mMovedElement.elementSelector || mMovedElement.element, oAppComponent, oView);

					// If needed, insert a Title for the first group.
					if (mMovedElement.target.groupIndex === 0 || !oMovedGroup) {
						aContent = fnAddTitleToFirstGroupIfNeeded(oModifier, aContent, oSimpleForm, mPropertyBag, aStopGroupToken, oContent.newControlId);
					}

					var iMovedGroupIndex = oMovedGroup ? aContent.indexOf(oMovedGroup) : 0;

					var iTargetIndex = fnMapGroupIndexToContentAggregationIndex(oModifier, aStopGroupToken, aContent,
							mMovedElement.target.groupIndex);
					var oTargetGroup = aContent[iTargetIndex];
					var iTargetLength = fnMeasureLengthOfSequenceUntilStopToken(oModifier, iTargetIndex, aContent,
							aStopGroupToken);

					var iMovedLength = fnMeasureLengthOfSequenceUntilStopToken(oModifier, iMovedGroupIndex, aContent,
							aStopGroupToken);
					var aContentClone = aContent.slice();
					// Cut the moved group from the result array...
					aContentClone.splice(iMovedGroupIndex, iMovedLength);

					iTargetIndex = aContentClone.indexOf(oTargetGroup);

					var iOffset = mMovedElement.source.groupIndex < mMovedElement.target.groupIndex ? iTargetLength : 0;
					// and insert it at the target index
					aContentClone = fnArrayRangeCopy(aContent, iMovedGroupIndex, aContentClone, iTargetIndex + iOffset,
							iMovedLength);

					oModifier.removeAllAggregation(oSimpleForm, MoveSimpleForm.CONTENT_AGGREGATION);
					for (var i = 0; i < aContentClone.length; ++i) {
						oModifier.insertAggregation(oSimpleForm, MoveSimpleForm.CONTENT_AGGREGATION, aContentClone[i], i);
					}

				} else {
					jQuery.sap.log.warning("Unknown change type detected. Cannot apply to SimpleForm");
				}

				return true;

			};

			var fnMapGroupIndexToContentAggregationIndex = function(oModifier, aStopToken, aContent, iGroupIndex) {
				var oResult;
				var iCurrentGroupIndex = -1;

				if (fnFirstGroupWithoutTitle(oModifier, aStopToken, aContent)) {
					iCurrentGroupIndex++;
				}

				for (var i = 0; i < aContent.length; i++) {
					var sType = oModifier.getControlType(aContent[i]);
					if (aStopToken.indexOf(sType) > -1) {
						iCurrentGroupIndex++;
						if (iCurrentGroupIndex === iGroupIndex) {
							oResult = aContent[i];
							break;
						}
					}
				}
				return aContent.indexOf(oResult);
			};

			var fnIsTitleOrToolbar = function(aElements, iIndex) {
				if (iIndex >= aElements.length || iIndex === -1) {
					return true;
				}
				var sType = aElements[iIndex].getMetadata().getName();
				return (MoveSimpleForm.sTypeTitle === sType
						|| MoveSimpleForm.sTypeToolBar === sType
						|| MoveSimpleForm.sTypeMTitle === sType
						|| MoveSimpleForm.sTypeOverflowToolBar === sType);
			};

			var fnMeasureLengthOfSequenceUntilStopToken = function(oModifier, iMovedElementIndex, aContent, aStopToken) {
				var i = 0;
				for (i = iMovedElementIndex + 1; i < aContent.length; ++i) {
					var sType = oModifier.getControlType(aContent[i]);
					if (aStopToken.indexOf(sType) > -1) {
						break;
					}
				}
				return i - iMovedElementIndex;
			};

			var fnGetFieldLength = function(oModifier, aElements, iIndex) {
				return fnMeasureLengthOfSequenceUntilStopToken(oModifier, iIndex, aElements,
					[MoveSimpleForm.sTypeTitle,
					MoveSimpleForm.sTypeMTitle,
					MoveSimpleForm.sTypeToolBar,
					MoveSimpleForm.sTypeOverflowToolBar,
					MoveSimpleForm.sTypeLabel,
					MoveSimpleForm.sTypeSmartLabel
					]);
			};

			var fnMapFieldIndexToContentAggregationIndex = function(oModifier, aContent, iGroupStart, iFieldIndex, bUp) {
				if (!fnIsTitleOrToolbar(aContent, iGroupStart)) {
					jQuery.sap.log.error("Illegal argument. iIndex has to point to a Label.");
				} else {
					iFieldIndex = bUp ? iFieldIndex + 1 : iFieldIndex;
					var iCurrentRelativeFieldIndex = 0;
					var iAbsolutIndex = iGroupStart;
					var iActLength;
					while (iAbsolutIndex < aContent.length && iCurrentRelativeFieldIndex < iFieldIndex) {
						++iCurrentRelativeFieldIndex;
						iActLength = fnGetFieldLength(oModifier, aContent, iAbsolutIndex);
						iAbsolutIndex += iActLength;
					}
					return iAbsolutIndex;
				}
			};

			var fnArrayRangeCopy = function(aSource, iSourceIndex, aTarget, iTargetIndex, iMovedLength) {
				var aResult = aTarget;
				for (var i = 0; i < iMovedLength; i++) {
					aResult.splice(iTargetIndex + i, 0, aSource[iSourceIndex + i]);
				}
				return aResult;
			};

			var fnGetGroupHeader = function(oHeader) {
				var oResult = oHeader.getTitle();
				if (!oResult) {
					oResult = oHeader.getToolbar();
				}
				return oResult;
			};

			var fnMoveFormContainer = function(oSimpleForm, mMovedElement, oSource, oTarget, mPropertyBag) {
				var oMovedGroupTitle = fnGetGroupHeader(mMovedElement.element);
				var oSimpleFormSelector = JsControlTreeModifier.getSelector(oSimpleForm, mPropertyBag.appComponent);
				var mMovedSimpleFormElement = {
					elementSelector : JsControlTreeModifier.getSelector(oMovedGroupTitle, mPropertyBag.appComponent),
					source : {
						groupIndex : mMovedElement.sourceIndex
					},
					target : {
						groupIndex : mMovedElement.targetIndex
					}
				};

				return {
					changeType : MoveSimpleForm.CHANGE_TYPE_MOVE_GROUP,
					targetSelector : oSimpleFormSelector,
					movedControl : oMovedGroupTitle,
					movedElements : [mMovedSimpleFormElement]
				};

			};

			var fnMoveFormElement = function(oSimpleForm, mMovedElement, oSource, oTarget, mPropertyBag) {
				var oSimpleFormSelector = JsControlTreeModifier.getSelector(oSimpleForm, mPropertyBag.appComponent);
				var oLabel = mMovedElement.element.getLabel();
				var oLabelSelector = JsControlTreeModifier.getSelector(oLabel, mPropertyBag.appComponent);
				var oTargetGroupHeader = fnGetGroupHeader(oTarget.parent);
				var oSourceGroupHeader = fnGetGroupHeader(oSource.parent);
				var oTargetGroupSelector = JsControlTreeModifier.getSelector(oTargetGroupHeader, mPropertyBag.appComponent);
				var oSourceGroupSelector = JsControlTreeModifier.getSelector(oSourceGroupHeader, mPropertyBag.appComponent);

				var oMovedElement = {
					elementSelector : oLabelSelector,
					source : {
						groupSelector : oSourceGroupSelector,
						fieldIndex : mMovedElement.sourceIndex
					},
					target : {
						groupSelector : oTargetGroupSelector,
						fieldIndex : mMovedElement.targetIndex
					}
				};

				return {
					changeType : MoveSimpleForm.CHANGE_TYPE_MOVE_FIELD,
					targetSelector : oSimpleFormSelector,
					target : oTargetGroupHeader,
					source : oSourceGroupHeader,
					movedControl : oLabel,
					movedElements : [oMovedElement]
				};
			};


			/**
			 * Completes the change by adding change handler specific content
			 *
			 * @param {sap.ui.fl.Change}
			 *          oChangeWrapper change object to be completed
			 * @param {object}
			 *          mSpecificChangeInfo as an empty object since no additional attributes are required for this operation
			 * @param {object}
			 *          mPropertyBag map containing the application component
			 * @public
			 */
			MoveSimpleForm.completeChangeContent = function(oChangeWrapper, mSpecificChangeInfo, mPropertyBag) {
				var mStableChangeInfo;

				var oModifier = mPropertyBag.modifier;
				var oView = mPropertyBag.view;
				var oAppComponent = mPropertyBag.appComponent;

				var oSimpleForm = oModifier.bySelector(mSpecificChangeInfo.selector, oAppComponent, oView);
				var aMovedElements = mSpecificChangeInfo.movedElements;
				if (aMovedElements.length > 1) {
					jQuery.sap.log.warning("Moving more than 1 Formelement is not yet supported.");
				}
				var mMovedElement = aMovedElements[0];
				mMovedElement.element = sap.ui.getCore().byId(mMovedElement.id);
				var oSource = jQuery.extend({}, mSpecificChangeInfo.source);
				var oTarget = jQuery.extend({}, mSpecificChangeInfo.target);
				if (!oTarget.parent) {
					oTarget.parent = sap.ui.getCore().byId(oTarget.id);
				}
				if (!oSource.parent) {
					oSource.parent = sap.ui.getCore().byId(oSource.id);
				}
				if (oSimpleForm && mMovedElement.element && oTarget.parent) {
					if (mSpecificChangeInfo.changeType === "moveSimpleFormGroup") {
						mStableChangeInfo = fnMoveFormContainer(oSimpleForm, mMovedElement, oSource, oTarget, mPropertyBag);
					} else if (mSpecificChangeInfo.changeType === "moveSimpleFormField") {
						mStableChangeInfo = fnMoveFormElement(oSimpleForm, mMovedElement, oSource, oTarget, mPropertyBag);
					}
				} else {
					jQuery.sap.log.error("Element not found. This may caused by an instable id!");
				}

				var mChangeData = oChangeWrapper.getDefinition();
				mChangeData.content.targetSelector = mStableChangeInfo.targetSelector;
				mChangeData.content.movedElements = mStableChangeInfo.movedElements;

				if (mStableChangeInfo.source && mStableChangeInfo.target){
					oChangeWrapper.addDependentControl(mStableChangeInfo.source, "sourceParent", mPropertyBag);
					oChangeWrapper.addDependentControl(mStableChangeInfo.target, "targetParent", mPropertyBag);
				}
				oChangeWrapper.addDependentControl([mStableChangeInfo.movedControl], "movedElements", mPropertyBag);
			};

			return MoveSimpleForm;
		},
		/* bExport= */true);

}; // end of sap/ui/layout/changeHandler/MoveSimpleForm.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.changeHandler.RenameFormContainer') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/*global sap */

jQuery.sap.declare('sap.ui.layout.changeHandler.RenameFormContainer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.Base'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.JsControlTreeModifier'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/changeHandler/RenameFormContainer",[
	"jquery.sap.global", "sap/ui/fl/changeHandler/Base", "sap/ui/fl/changeHandler/JsControlTreeModifier", "sap/ui/fl/Utils"
], function(jQuery, BaseChangeHandler, JsControlTreeModifier, Utils) {
	"use strict";

	/**
	 * Change handler for renaming labels and titles inside the FormContainer Control
	 *
	 * @alias sap.ui.layout.changeHandler.RenameFormContainer
	 * @author SAP SE
	 * @version 1.48.5
	 * @since 1.48
	 * @private
	 * @experimental Since 1.48. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var RenameFormContainer = { };

	// Defines object which contains constants used in the handler
	var _CONSTANTS = {
		TARGET_ALIAS: "target"
	};

	/**
	 * Changes the properties on the given control
	 *
	 * @param {sap.ui.fl.Change} oChangeWrapper Change object with instructions to be applied on the control
	 * @param {object} oControl The control which has been determined by the selector id
	 * @param {object} mPropertyBag Map containing the control modifier object (either sap.ui.fl.changeHandler.JsControlTreeModifier or
	 *                                sap.ui.fl.changeHandler.XmlTreeModifier), the view object where the controls are embedded and the application component
	 * @private
	 * @name sap.ui.layout.changeHandler.RenameFormControl#applyChange
	 */
	RenameFormContainer.applyChange = function(oChangeWrapper, oControl, mPropertyBag) {
		var oModifier = mPropertyBag.modifier,
			oChangeDefinition = oChangeWrapper.getDefinition(),
			oRenamedElement = oChangeWrapper.getDependentControl(_CONSTANTS.TARGET_ALIAS, mPropertyBag),
			oTitle = oModifier.getAggregation(oRenamedElement, "title");

		if (oChangeDefinition.texts && oChangeDefinition.texts.formText && this._isProvided(oChangeDefinition.texts.formText.value)) {

			var sValue = oChangeDefinition.texts.formText.value;

			if (typeof oTitle === "string") {
				oModifier.insertAggregation(oRenamedElement, "title", sValue);
			} else {
				oModifier.setProperty(oTitle, "text", sValue);
			}

			return true;
		} else {
			Utils.log.error("Change does not contain sufficient information to be applied: [" + oChangeDefinition.layer + "]" + oChangeDefinition.namespace + "/" + oChangeDefinition.fileName + "." + oChangeDefinition.fileType);
			//however subsequent changes should be applied
		}
	};

	/**
	 * Completes the change by adding change handler specific content
	 *
	 * @param {sap.ui.fl.Change} oChangeWrapper Change wrapper object to be completed
	 * @param {object} oSpecificChangeInfo With attribute fieldLabel, the new field label to be included in the change
	 * @param {object} mPropertyBag Map containing the application component
	 * @private
	 */
	RenameFormContainer.completeChangeContent = function(oChangeWrapper, oSpecificChangeInfo, mPropertyBag) {
		var oChangeDefinition = oChangeWrapper.getDefinition();

		if (!(oSpecificChangeInfo.renamedElement && oSpecificChangeInfo.renamedElement.id)) {
			throw new Error("Rename of the group cannot be executed: oSpecificChangeInfo.renamedElement attribute required");
		}

		if (!this._isProvided(oSpecificChangeInfo.value)) {
			throw new Error("Rename of the group cannot be executed: oSpecificChangeInfo.value attribute required");
		}

		oChangeWrapper.addDependentControl(oSpecificChangeInfo.renamedElement.id, _CONSTANTS.TARGET_ALIAS, mPropertyBag);
		BaseChangeHandler.setTextInChange(oChangeDefinition, "formText", oSpecificChangeInfo.value, "XGRP");

	};

	RenameFormContainer._isProvided = function(sString){
		return typeof (sString) === "string";
	};

	return RenameFormContainer;
}, /* bExport= */true);

}; // end of sap/ui/layout/changeHandler/RenameFormContainer.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.changeHandler.RenameSimpleForm') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/*global sap */

jQuery.sap.declare('sap.ui.layout.changeHandler.RenameSimpleForm'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.Base'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.JsControlTreeModifier'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/changeHandler/RenameSimpleForm",[
	"jquery.sap.global", "sap/ui/fl/changeHandler/Base", "sap/ui/fl/changeHandler/JsControlTreeModifier", "sap/ui/fl/Utils"
], function(jQuery, BaseChangeHandler, JsControlTreeModifier, Utils) {
	"use strict";

	/**
	 * Change handler for renaming labels and titles inside the SimpleForm Control
	 *
	 * @alias sap.ui.layout.changeHandler.RenameForm
	 * @author SAP SE
	 * @version 1.48.5
	 * @since 1.40
	 * @private
	 * @experimental Since 1.40. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var RenameForm = { };

	/**
	 * Changes the properties on the given control
	 *
	 * @param {sap.ui.fl.Change} oChangeWrapper - change object with instructions to be applied on the control
	 * @param {object} oControl - the control which has been determined by the selector id
	 * @param {object} mPropertyBag - map containing the control modifier object (either sap.ui.fl.changeHandler.JsControlTreeModifier or
	 *                                sap.ui.fl.changeHandler.XmlTreeModifier), the view object where the controls are embedded and the application component
	 * @private
	 * @name sap.ui.layout.changeHandler.RenameForm#applyChange
	 */
	RenameForm.applyChange = function(oChangeWrapper, oControl, mPropertyBag) {
		var oModifier = mPropertyBag.modifier;
		var oView = mPropertyBag.view;
		var oAppComponent = mPropertyBag.appComponent;

		var oChangeDefinition = oChangeWrapper.getDefinition();

		// !important : sRenameId was used in 1.40, do not remove for compatibility!
		var vSelector = oChangeDefinition.content.elementSelector || oChangeDefinition.content.sRenameId;
		var oRenamedElement = oModifier.bySelector(vSelector, oAppComponent, oView);

		if (oChangeDefinition.texts && oChangeDefinition.texts.formText && this._isProvided(oChangeDefinition.texts.formText.value)) {
			if (!oControl) {
				throw new Error("no Control provided for renaming");
			}

			var sValue = oChangeDefinition.texts.formText.value;
			oModifier.setProperty(oRenamedElement, "text", sValue);

			return true;
		} else {
			Utils.log.error("Change does not contain sufficient information to be applied: [" + oChangeDefinition.layer + "]" + oChangeDefinition.namespace + "/" + oChangeDefinition.fileName + "." + oChangeDefinition.fileType);
			//however subsequent changes should be applied
		}
	};

	/**
	 * Completes the change by adding change handler specific content
	 *
	 * @param {sap.ui.fl.Change} oChangeWrapper - change wrapper object to be completed
	 * @param {object} oSpecificChangeInfo - with attribute fieldLabel, the new field label to be included in the change
	 * @param {object} mPropertyBag - map containing the application component
	 * @private
	 */
	RenameForm.completeChangeContent = function(oChangeWrapper, oSpecificChangeInfo, mPropertyBag) {
		var oChangeDefinition = oChangeWrapper.getDefinition();

		if (!oSpecificChangeInfo.changeType) {
			throw new Error("oSpecificChangeInfo.changeType attribute required");
		}

		if (oSpecificChangeInfo.renamedElement && oSpecificChangeInfo.renamedElement.id) {
			var oRenamedElement = sap.ui.getCore().byId(oSpecificChangeInfo.renamedElement.id);
			var oStableRenamedElement;
			if (oSpecificChangeInfo.changeType === "renameLabel") {
				oStableRenamedElement = oRenamedElement.getLabel();
			} else if (oSpecificChangeInfo.changeType === "renameTitle") {
				oStableRenamedElement = oRenamedElement.getTitle();
			}
			oChangeDefinition.content.elementSelector = JsControlTreeModifier.getSelector(oStableRenamedElement, mPropertyBag.appComponent);
			oChangeWrapper.addDependentControl(oStableRenamedElement, "elementSelector", mPropertyBag);
		} else {
			throw new Error("oSpecificChangeInfo.renamedElement attribute required");
		}

		if (this._isProvided(oSpecificChangeInfo.value)) {
			BaseChangeHandler.setTextInChange(oChangeDefinition, "formText", oSpecificChangeInfo.value, "XFLD");
		} else {
			throw new Error("oSpecificChangeInfo.value attribute required");
		}
	};

	RenameForm._isProvided = function(sString){
		return typeof (sString) === "string";
	};

	return RenameForm;
}, /* bExport= */true);

}; // end of sap/ui/layout/changeHandler/RenameSimpleForm.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.changeHandler.UnhideSimpleForm') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare('sap.ui.layout.changeHandler.UnhideSimpleForm'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.JsControlTreeModifier'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/changeHandler/UnhideSimpleForm",[
	'jquery.sap.global', "sap/ui/fl/changeHandler/JsControlTreeModifier"
], function(jQuery, JsControlTreeModifier) {
	"use strict";

	/**
	 * Change handler for hiding of a control.
	 * @alias sap.ui.fl.changeHandler.HideControl
	 * @author SAP SE
	 * @version 1.48.5
	 * @experimental Since 1.27.0
	 */
	var UnhideForm = { };

	/**
	 * Unhides a control.
	 *
	 * @param {sap.ui.fl.Change} oChangeWrapper - change object with instructions to be applied on the control map
	 * @param {sap.ui.core.Control} oControl - control that matches the change selector for applying the change
	 * @param {object} mPropertyBag - map containing the control modifier object (either sap.ui.fl.changeHandler.JsControlTreeModifier or
	 *                                sap.ui.fl.changeHandler.XmlTreeModifier), the view object where the controls are embedded and the application component
	 * @public
	 */
	UnhideForm.applyChange = function(oChangeWrapper, oControl, mPropertyBag) {
		var oModifier = mPropertyBag.modifier;
		var oView = mPropertyBag.view;
		var oAppComponent = mPropertyBag.appComponent;

		var oChangeDefinition = oChangeWrapper.getDefinition();

		// !important : sUnhideId was used in 1.40, do not remove for compatibility!
		var oControlToUnhide = oModifier.bySelector(oChangeDefinition.content.elementSelector || oChangeDefinition.content.sUnhideId, oAppComponent, oView);
		var aContent = oModifier.getAggregation(oControl, "content");
		var iStart = -1;

		if (oChangeDefinition.changeType === "unhideSimpleFormField") {
			aContent.some(function (oField, index) {
				if (oField === oControlToUnhide) {
					iStart = index;
					oModifier.setVisible(oField, true);
				}
				if (iStart >= 0 && index > iStart) {
					if ((oModifier.getControlType(oField) === "sap.m.Label")
						|| (oModifier.getControlType(oField) === "sap.ui.comp.smartfield.SmartLabel")
						|| (oModifier.getControlType(oField) === "sap.ui.core.Title")
						|| (oModifier.getControlType(oField) === "sap.m.Title")
						|| (oModifier.getControlType(oField) === "sap.m.Toolbar")
						|| (oModifier.getControlType(oField) === "sap.m.OverflowToolbar")) {
						return true;
					} else {
						oModifier.setVisible(oField, true);
					}
				}
			});
		}

		return true;
	};

	/**
	 * Completes the change by adding change handler specific content
	 *
	 * @param {sap.ui.fl.Change} oChangeWrapper - change object to be completed
	 * @param {object} - oSpecificChangeInfo with attribute sUnhideId, the id of the control to unhide
	 * @param {object} mPropertyBag - map containing the application component
	 * @public
	 */
	UnhideForm.completeChangeContent = function(oChangeWrapper, oSpecificChangeInfo, mPropertyBag) {
		var oChangeDefinition = oChangeWrapper.getDefinition();
		//TODO remove sUnhideId when rta is switched to new logic to create reveal changes
		if (oSpecificChangeInfo.sUnhideId) {
			var oUnhideElement = sap.ui.getCore().byId(oSpecificChangeInfo.sUnhideId);
			oChangeDefinition.content.elementSelector = JsControlTreeModifier.getSelector(oUnhideElement, mPropertyBag.appComponent);
			oChangeWrapper.addDependentControl(oUnhideElement, "elementSelector", mPropertyBag);
		} else if (oSpecificChangeInfo.revealedElementId ) {
			//translate from FormElement (unstable id) to the label control (stable id and in public aggregation)
			var oFormElement = sap.ui.getCore().byId(oSpecificChangeInfo.revealedElementId || oSpecificChangeInfo.sUnhideId);
			var oLabel = oFormElement.getLabel();
			oChangeDefinition.content.elementSelector = JsControlTreeModifier.getSelector(oLabel, mPropertyBag.appComponent);
			oChangeWrapper.addDependentControl(oLabel, "elementSelector", mPropertyBag);
		} else {
			throw new Error("oSpecificChangeInfo.revealedElementId attribute required");
		}
	};

	return UnhideForm;
},
/* bExport= */true);

}; // end of sap/ui/layout/changeHandler/UnhideSimpleForm.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.flexibility.Form.flexibility') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/*global sap */

jQuery.sap.declare('sap.ui.layout.flexibility.Form.flexibility'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/layout/flexibility/Form.flexibility",[
	"sap/ui/layout/changeHandler/AddFormContainer"
], function (AddGroup) {
	"use strict";

	return {
		"moveControls": "default",
		"addGroup": AddGroup

	};
}, /* bExport= */true);

}; // end of sap/ui/layout/flexibility/Form.flexibility.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.flexibility.FormContainer.flexibility') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/*global sap */

jQuery.sap.declare('sap.ui.layout.flexibility.FormContainer.flexibility'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/layout/flexibility/FormContainer.flexibility",[
	"sap/ui/layout/changeHandler/RenameFormContainer"
], function (RenameFormContainer) {
	"use strict";

	return {
		"hideControl": "default",
		"renameGroup": RenameFormContainer,
		"moveControls": "default"

	};
}, /* bExport= */true);

}; // end of sap/ui/layout/flexibility/FormContainer.flexibility.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.flexibility.FormElement.flexibility') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/*global sap */

jQuery.sap.declare('sap.ui.layout.flexibility.FormElement.flexibility'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.changeHandler.BaseRename'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/flexibility/FormElement.flexibility",[
	"sap/ui/fl/changeHandler/BaseRename"
], function (BaseRename) {
	"use strict";

	return {
		"hideControl": "default",
		"unhideControl": "default",
		"renameField": BaseRename.createRenameChangeHandler({
			propertyName: "label",
			translationTextType: "XFLD",
			changePropertyName: "fieldLabel"
		})
	};
}, /* bExport= */true);
}; // end of sap/ui/layout/flexibility/FormElement.flexibility.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.flexibility.SimpleForm.flexibility') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/*global sap */

jQuery.sap.declare('sap.ui.layout.flexibility.SimpleForm.flexibility'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/layout/flexibility/SimpleForm.flexibility",[
    "sap/ui/layout/changeHandler/RenameSimpleForm",
    "sap/ui/layout/changeHandler/MoveSimpleForm",
    "sap/ui/layout/changeHandler/HideSimpleForm",
    "sap/ui/layout/changeHandler/UnhideSimpleForm",
    "sap/ui/layout/changeHandler/AddSimpleFormGroup"
], function (RenameSimpleForm, MoveSimpleForm, HideSimpleForm, UnhideSimpleForm, AddSimpleFormGroup) {
    "use strict";

    return {
        "renameLabel": RenameSimpleForm,
        "renameTitle": RenameSimpleForm,
        "moveSimpleFormField": MoveSimpleForm,
        "moveSimpleFormGroup": MoveSimpleForm,
        "hideSimpleFormField": HideSimpleForm,
        "unhideSimpleFormField": UnhideSimpleForm,
        "removeSimpleFormGroup": HideSimpleForm,
        "addSimpleFormGroup": AddSimpleFormGroup
    };
}, /* bExport= */true);

}; // end of sap/ui/layout/flexibility/SimpleForm.flexibility.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.form.Form.designtime') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the Design Time Metadata for the sap.ui.layout.form.Form control
jQuery.sap.declare('sap.ui.layout.form.Form.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/layout/form/Form.designtime",[],
	function() {
	"use strict";

	return {
		aggregations : {
			title : {
				ignore : true
			},
			toolbar : {
				ignore : function(oForm){
					return !oForm.getToolbar();
				},
				domRef : function(oForm){
					return oForm.getToolbar().getDomRef();
				}
			},
			formContainers : {
				childNames : {
					singular : "GROUP_CONTROL_NAME",
					plural : "GROUP_CONTROL_NAME_PLURAL"
				},
				domRef: ":sap-domref",
				actions: {
					move: "moveControls",
					createContainer :  {
						changeType : "addGroup",
						isEnabled : true,
						getCreatedContainerId : function(sNewControlID) {
							return sNewControlID;
						}
					}
				}

			}
		}
	};

}, /* bExport= */ false);
}; // end of sap/ui/layout/form/Form.designtime.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.form.FormContainer.designtime') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the Design Time Metadata for the sap.ui.layout.form.FormContainer control
jQuery.sap.declare('sap.ui.layout.form.FormContainer.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/layout/form/FormContainer.designtime",[],
	function() {
	"use strict";

	function _allFormElementsInvisible(oFormContainer){

		return oFormContainer.getFormElements().every(function(oFormElement){
			return oFormElement.getVisible() === false;
		});
	}

	return {
		actions: {
			remove: {
				changeType: "hideControl"
			},
			rename: {
				changeType: "renameGroup",
				domRef: function (oFormContainer) {
					return jQuery(oFormContainer.getRenderedDomRef()).find(".sapUiFormTitle")[0];
				},
				isEnabled : function (oFormContainer) {
					return !(oFormContainer.getToolbar() || !oFormContainer.getTitle());
				}
			}
		},
		aggregations : {
			formElements : {
				domRef: function (oFormContainer) {
					var oDomRef = oFormContainer.getDomRef();
					if (!oDomRef && oFormContainer.getFormElements().length === 0 || _allFormElementsInvisible(oFormContainer)) {
						var oHeader = oFormContainer.getTitle() || oFormContainer.getToolbar();
						if (oHeader) {
							return oHeader.getDomRef();
						}
					} else {
						return oDomRef;
					}
				},
				actions: {
					move: "moveControls"
				}
			},
			toolbar : {
				domRef: function (oFormContainer) {
					var oToolbar = oFormContainer.getToolbar();
					if (oToolbar) {
						return oToolbar.getDomRef();
					}
				}
			}
		},
		name: {
			singular: "GROUP_CONTROL_NAME",
			plural: "GROUP_CONTROL_NAME_PLURAL"
		}
	};

}, /* bExport= */ false);
}; // end of sap/ui/layout/form/FormContainer.designtime.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.form.FormLayoutRenderer') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare('sap.ui.layout.form.FormLayoutRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/form/FormLayoutRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";

	/**
	 * FormLayout renderer.
	 * @namespace
	 */
	var FormLayoutRenderer = {
	};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oLayout an object representation of the control that should be rendered
	 */
	FormLayoutRenderer.render = function(oRenderManager, oLayout){
		// convenience variable
		var rm = oRenderManager;

		var oForm = oLayout.getParent();
		if (oForm && oForm instanceof sap.ui.layout.form.Form) {
			this.renderForm(rm, oLayout, oForm);
		}

	};

	/**
	 * Renders the HTML for the given form content, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oLayout an object representation of the Layout control that should be rendered
	 * @param {sap.ui.layout.form.Form} oForm, a form control to render its content
	 */
	FormLayoutRenderer.renderForm = function(rm, oLayout, oForm){

		var oToolbar = oForm.getToolbar();

		rm.write("<div");
		rm.writeControlData(oLayout);
		rm.addClass(this.getMainClass());
		if (oToolbar) {
			rm.addClass("sapUiFormToolbar");
		}
		this.addBackgroundClass(rm, oLayout);
		rm.writeClasses();
		rm.write(">");

		// Form header
		if (oToolbar) {
			rm.renderControl(oToolbar);
		} else {
			var sSize = sap.ui.core.theming.Parameters.get('sap.ui.layout.FormLayout:_sap_ui_layout_FormLayout_FormTitleSize');
			this.renderTitle(rm, oForm.getTitle(), undefined, false, sSize, oForm.getId());
		}

		this.renderContainers(rm, oLayout, oForm);

		rm.write("</div>");
	};

	FormLayoutRenderer.getMainClass = function(){
		return "sapUiFormLayout";
	};

	FormLayoutRenderer.addBackgroundClass = function(rm, oLayout){

		var sBackgroundDesign = oLayout.getBackgroundDesign();
		if (sBackgroundDesign != sap.ui.layout.BackgroundDesign.Transparent) {
			rm.addClass("sapUiFormBackgr" + sBackgroundDesign);
		}

	};

	FormLayoutRenderer.renderContainers = function(rm, oLayout, oForm){

		var aContainers = oForm.getFormContainers();
		for (var i = 0, il = aContainers.length; i < il; i++) {
			var oContainer = aContainers[i];
			if (oContainer.getVisible()) {
				this.renderContainer(rm, oLayout, oContainer);
			}
		}

	};

	FormLayoutRenderer.renderContainer = function(rm, oLayout, oContainer){

		var bExpandable = oContainer.getExpandable();
		var oToolbar = oContainer.getToolbar();
		var oTitle = oContainer.getTitle();

		rm.write("<section");
		rm.writeElementData(oContainer);
		rm.addClass("sapUiFormContainer");

		if (oToolbar) {
			rm.addClass("sapUiFormContainerToolbar");
		} else if (oTitle) {
			rm.addClass("sapUiFormContainerTitle");
		}

		if (oContainer.getTooltip_AsString()) {
			rm.writeAttributeEscaped('title', oContainer.getTooltip_AsString());
		}
		rm.writeClasses();

		this.writeAccessibilityStateContainer(rm, oContainer);

		rm.write(">");

		if (oToolbar) {
			rm.renderControl(oToolbar);
		} else {
			this.renderTitle(rm, oTitle, oContainer._oExpandButton, bExpandable, sap.ui.core.TitleLevel.H4, oContainer.getId());
		}

		if (bExpandable) {
			rm.write("<div id='" + oContainer.getId() + "-content'");
			if (!oContainer.getExpanded()) {
				rm.addStyle("display", "none");
				rm.writeStyles();
			}
			rm.write(">");
		}

		var aElements = oContainer.getFormElements();
		for (var j = 0, jl = aElements.length; j < jl; j++) {

			var oElement = aElements[j];

			if (oElement.getVisible()) {
				this.renderElement(rm, oLayout, oElement);
			}

		}
		if (bExpandable) {
			rm.write("</div>");
		}
		rm.write("</section>");

	};

	FormLayoutRenderer.renderElement = function(rm, oLayout, oElement){

		var oLabel = oElement.getLabelControl();

		rm.write("<div");
		rm.writeElementData(oElement);
		rm.addClass("sapUiFormElement");
		if (oLabel) {
			rm.addClass("sapUiFormElementLbl");
		}
		rm.writeClasses();
		rm.write(">");

		if (oLabel) {
			rm.renderControl(oLabel);
		}

		var aFields = oElement.getFields();
		if (aFields && aFields.length > 0) {
			for (var k = 0, kl = aFields.length; k < kl; k++) {
				var oField = aFields[k];
				rm.renderControl(oField);
			}
		}
		rm.write("</div>");

	};

	/*
	 * Renders the title for a Form or a FormContainer
	 * If this function is overwritten in a Layout please use the right IDs to be sure aria-describedby works fine
	 */
	FormLayoutRenderer.renderTitle = function(rm, oTitle, oExpandButton, bExpander, sLevelDefault, sContentId){

		if (oTitle) {
			//determine title level -> if not set use H4 as default
			var sLevel = sap.ui.core.theming.Parameters.get('sap.ui.layout.FormLayout:_sap_ui_layout_FormLayout_FormSubTitleSize');
			if (sLevelDefault) {
				sLevel = sLevelDefault;
			}
			if (typeof oTitle !== "string" && oTitle.getLevel() != sap.ui.core.TitleLevel.Auto) {
				sLevel = oTitle.getLevel();
			}

			// just reuse TextView class because there font size & co. is already defined
			rm.write("<" + sLevel + " ");
			rm.addClass("sapUiFormTitle");
			rm.addClass("sapUiFormTitle" + sLevel);

			if (typeof oTitle !== "string") {
				rm.writeElementData(oTitle);
				if (oTitle.getTooltip_AsString()) {
					rm.writeAttributeEscaped('title', oTitle.getTooltip_AsString());
				}
				if (oTitle.getEmphasized()) {
					rm.addClass("sapUiFormTitleEmph");
				}
			} else {
				rm.writeAttribute("id", sContentId + "--title");
			}
			rm.writeClasses();
			rm.write(">");

			if (bExpander && oExpandButton) {
				rm.renderControl(oExpandButton);
			}
			if (typeof oTitle === "string") {
				// Title is just a string
				rm.writeEscaped(oTitle, true);
			} else {
				// title control
				var sIcon = oTitle.getIcon();

				if (sIcon) {
					var aClasses = [];
					var mAttributes = {
						"title": null // prevent default icon tooltip
					};

					mAttributes["id"] = oTitle.getId() + "-ico";
					rm.writeIcon(sIcon, aClasses, mAttributes);
				}
				rm.writeEscaped(oTitle.getText(), true);
			}

			rm.write("</" + sLevel + ">");
		}

	};

	/*
	 * Writes the accessibility attributes for FormContainers
	 */
	FormLayoutRenderer.writeAccessibilityStateContainer = function(rm, oContainer){

		var mAriaProps = {role: "form"};
		var oTitle = oContainer.getTitle();
		var oToolbar = oContainer.getToolbar();
		if (oToolbar) {
			if (!oContainer.getAriaLabelledBy() || oContainer.getAriaLabelledBy().length == 0) {
				// no aria-label -> use complete Toolbar as fallback
				mAriaProps["labelledby"] = oToolbar.getId();
			}
		} else if (oTitle) {
			var sId = "";
			if (typeof oTitle == "string") {
				sId = oContainer.getId() + "--title";
			} else {
				sId = oTitle.getId();
			}
			mAriaProps["labelledby"] = sId;
		}

		rm.writeAccessibilityState(oContainer, mAriaProps);

	};

	return FormLayoutRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/layout/form/FormLayoutRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.form.FormRenderer') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare('sap.ui.layout.form.FormRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/form/FormRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * Form renderer.
	 * @namespace
	 */
	var FormRenderer = {
	};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oForm an object representation of the control that should be rendered
	 */
	FormRenderer.render = function(oRenderManager, oForm){
		// convenience variable
		var rm = oRenderManager;
		var oLayout = oForm.getLayout();

		// write only a DIV for the form and let the layout render the rest
		rm.write("<div");
		rm.writeControlData(oForm);
		rm.addClass("sapUiForm");
		rm.addClass("sapUiFormLblColon"); // to always have the ":" at the Labels
		rm.writeAttribute("data-sap-ui-customfastnavgroup", "true");

		var sClass = sap.ui.layout.form.FormHelper.addFormClass();
		if (sClass) {
			rm.addClass(sClass);
		}

		if (oForm.getEditable()) {
			rm.addClass("sapUiFormEdit");
			rm.addClass("sapUiFormEdit-CTX");
		}

		if (oForm.getWidth()) {
			rm.addStyle("width", oForm.getWidth());
		}
		if (oForm.getTooltip_AsString()) {
			rm.writeAttributeEscaped('title', oForm.getTooltip_AsString());
		}
		rm.writeClasses();
		rm.writeStyles();

		var mAriaProps = {role: "form"};
		var oTitle = oForm.getTitle();
		var oToolbar = oForm.getToolbar();
		if (oToolbar) {
			if (!oForm.getAriaLabelledBy() || oForm.getAriaLabelledBy().length == 0) {
				// no aria-label -> use complete Toolbar as fallback
				mAriaProps["labelledby"] = oToolbar.getId();
			}
		} else if (oTitle) {
			var sId = "";
			if (typeof oTitle == "string") {
				sId = oForm.getId() + "--title";
			} else {
				sId = oTitle.getId();
			}
			mAriaProps["labelledby"] = {value: sId, append: true};
		}

		rm.writeAccessibilityState(oForm, mAriaProps);

		rm.write(">");

		if (oLayout) {
			// render the layout with the content of this form control
			rm.renderControl(oLayout);
		} else {
			jQuery.sap.log.warning("Form \"" + oForm.getId() + "\" - Layout missing!", "Renderer", "Form");
		}

		rm.write("</div>");
	};

	return FormRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/layout/form/FormRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.form.GridLayoutRenderer') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare('sap.ui.layout.form.GridLayoutRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/form/GridLayoutRenderer",['jquery.sap.global', 'sap/ui/core/Renderer', './FormLayoutRenderer'],
	function(jQuery, Renderer, FormLayoutRenderer) {
	"use strict";


	/**
	 * form/GridLayout renderer.
	 * @namespace
	 */
	var GridLayoutRenderer = Renderer.extend(FormLayoutRenderer);

	/**
	 * Renders the HTML for the given form content, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oLayout an object representation of the Layout control that should be rendered
	 * @param {sap.ui.layout.form.Form} oForm, a form control to render its content
	 */
	GridLayoutRenderer.renderForm = function(rm, oLayout, oForm){

		var bSingleColumn = oLayout.getSingleColumn();
		var iColumns = 16;
		var bSeparatorColumn = false;
		var iColumnsHalf = 0;
		var aContainers = oForm.getFormContainers();
		var iContainerLength = aContainers.length;
		var i = 0;

		var oContainer;
		var oContainerData;
		var oToolbar = oForm.getToolbar();
		var oTitle = oForm.getTitle();

		if (bSingleColumn) {
			iColumns = iColumns / 2;
			iColumnsHalf = iColumns;
		} else {
			iColumnsHalf = iColumns / 2;
			//check if the separator column is needed -> if there are half containers
			for ( i = 0; i < iContainerLength; i++) {
				oContainerData = this.getContainerData(oLayout, aContainers[i]);
				if (oContainerData && oContainerData.getHalfGrid()) {
					bSeparatorColumn = true;
					break;
				}
			}
		}

		rm.write("<table role=\"presentation\"");
		rm.writeControlData(oLayout);
		rm.write(" cellpadding=\"0\" cellspacing=\"0\"");
		rm.addStyle("border-collapse", "collapse");
		rm.addStyle("table-layout", "fixed");
		rm.addStyle("width", "100%");
		rm.addClass("sapUiGrid");
		this.addBackgroundClass(rm, oLayout);
		if (oToolbar) {
			rm.addClass("sapUiFormToolbar");
		}

		rm.writeStyles();
		rm.writeClasses();
		rm.write(">");
		rm.write("<colgroup>");
		rm.write("<col span=" + iColumnsHalf + ">");
		if (bSeparatorColumn) {
			rm.write("<col class = \"sapUiGridSpace\"span=1>");
		}
		if (!bSingleColumn) {
			rm.write("<col span=" + iColumnsHalf + ">");
		}
		rm.write("</colgroup><tbody>");

		// form header as table header
		if (oToolbar || oTitle) {
			var iTitleCells = iColumns;
			if (bSeparatorColumn) {
				iTitleCells++;
			}
			rm.write("<tr class=\"sapUiGridTitle\"><th colspan=" + iTitleCells + ">");

			if (oToolbar) {
				rm.renderControl(oToolbar);
			} else {
				var sSize = sap.ui.core.theming.Parameters.get('sap.ui.layout.FormLayout:_sap_ui_layout_FormLayout_FormTitleSize');
				this.renderTitle(rm, oTitle, undefined, false, sSize, oForm.getId());
			}
			rm.write("</th></tr>");
		}

		i = 0;
		var oContainer2;
		var oContainerData2;
		while (i < iContainerLength) {
			oContainer = aContainers[i];
			oContainer._checkProperties();
			if (oContainer.getVisible()) {
				oContainerData = this.getContainerData(oLayout, oContainer);
				if (oContainerData && oContainerData.getHalfGrid() && !bSingleColumn) {
					oContainer2 = aContainers[i + 1];
					oContainerData2 = undefined;
					if (oContainer2 && oContainer2.getVisible()) {
						oContainerData2 = this.getContainerData(oLayout, oContainer2);
					}
					if (oContainerData2 && oContainerData2.getHalfGrid()) {
						oContainer2._checkProperties();
						this.renderContainerHalfSize(rm, oLayout, oContainer, oContainer2, iColumns);
						i++;
					} else {
						// second container is full size or does not exist -> render only 1 container as half size
						this.renderContainerHalfSize(rm, oLayout, oContainer, undefined, iColumns);
					}
				} else {
					this.renderContainerFullSize(rm, oLayout, oContainer, iColumns, bSeparatorColumn);
				}
			}

			i++;
		}

		if (!!sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version == 9) {
			// As IE9 is buggy with colspan and layout fixed if not all columns are defined least once
			rm.write("<tr style=\"visibility:hidden;\">");
			for ( i = 0; i < iColumns; i++) {
				rm.write("<td style=\"visibility:hidden; padding:0; height: 0;\"></td>");
			}
			if (bSeparatorColumn) {
				rm.write("<td style=\"visibility:hidden; padding:0; height: 0;\"></td>");
			}
			rm.write("</tr>");
		}

		rm.write("</tbody></table>");

	};

	GridLayoutRenderer.renderContainerFullSize = function(rm, oLayout, oContainer, iColumns, bSeparatorColumn){

		var bExpandable = oContainer.getExpandable();

		// as container has no own DOM Element no element data is rendered.
		// This should not be a problem as it is an element, not a control.

		// render Container tooltip at header cell
		var sTooltip = oContainer.getTooltip_AsString();

		// container header
		var oToolbar = oContainer.getToolbar();
		var oTitle = oContainer.getTitle();
		if (oToolbar || oTitle) {
			var iTitleCells = iColumns;
			if (bSeparatorColumn) {
				iTitleCells++;
			}
			rm.write("<tr class=\"sapUiGridConteinerFirstRow\"><td colspan=" + iTitleCells);
			rm.addClass("sapUiGridHeader");
			if (sTooltip) {
				rm.writeAttributeEscaped('title', sTooltip);
			}
			if (oToolbar) {
				rm.addClass("sapUiFormContainerToolbar");
			} else if (oTitle) {
				rm.addClass("sapUiFormContainerTitle");
			}
			rm.writeClasses();

			rm.write(">");
			if (oToolbar) {
				rm.renderControl(oToolbar);
			} else {
				this.renderTitle(rm, oContainer.getTitle(), oContainer._oExpandButton, bExpandable, false, oContainer.getId());
			}
			rm.write("</td></tr>");
		}

		if (!bExpandable || oContainer.getExpanded()) {
			// container is not expandable or is expanded -> render elements
			var aElements = oContainer.getFormElements();
			var oElement;
			var aReservedCells = [];
			var bEmptyRow;
			var bFirstVisibleFound = false;
			for (var j = 0, jl = aElements.length; j < jl; j++) {

				oElement = aElements[j];
				if (oElement.getVisible()) {
					bEmptyRow = aReservedCells[0] && (aReservedCells[0][0] == iColumns);

					rm.write("<tr");

					if (!bFirstVisibleFound) {
						bFirstVisibleFound = true;
						if (!oToolbar && !oTitle) {
							rm.addClass("sapUiGridConteinerFirstRow");
						}
					}

					if (!this.checkFullSizeElement(oLayout, oElement) && aReservedCells[0] != "full" && !bEmptyRow) {
						rm.writeElementData(oElement);
						rm.addClass("sapUiFormElement");
					}
					rm.writeClasses();
					rm.write(">");
					if (!bEmptyRow) {
						aReservedCells = this.renderElement(rm, oLayout, oElement, false, iColumns, bSeparatorColumn, aReservedCells);
					} else {
						// the complete line is reserved -> render only an empty row
						aReservedCells.splice(0,1);
					}
					rm.write("</tr>");
					if (aReservedCells[0] == "full" || bEmptyRow) {
						// this is a full size element -> just render it again in the next line
						j = j - 1;
					}
				}
			}
			if (aReservedCells.length > 0) {
				// still rowspans left -> render dummy rows to fill up
				for ( var i = 0; i < aReservedCells.length; i++) {
					rm.write("<tr></tr>");
				}
			}
		}

	};

	// no bSeparartor needed because between 2 containers there must be a separator
	GridLayoutRenderer.renderContainerHalfSize = function(rm, oLayout, oContainer1, oContainer2, iColumns){

		var iContainerColumns = iColumns / 2;

		var bExpandable1 = oContainer1.getExpandable();

		var sTooltip1 = oContainer1.getTooltip_AsString();
		var sTooltip2;

		var oTitle1 = oContainer1.getTitle();
		var oTitle2;
		var oToolbar1 = oContainer1.getToolbar();
		var oToolbar2;

		var aElements1 = [];
		if (!bExpandable1 || oContainer1.getExpanded()) {
			aElements1 = oContainer1.getFormElements();
		}
		var iLength1 = aElements1.length;
		var aElements2 = [];
		var iLength2 = 0;

		var bExpandable2 = false;
		if (oContainer2) {
			bExpandable2 = oContainer2.getExpandable();
			sTooltip2 = oContainer2.getTooltip_AsString();
			oTitle2 = oContainer2.getTitle();
			oToolbar2 = oContainer2.getToolbar();
			if (!bExpandable2 || oContainer2.getExpanded()) {
				aElements2 = oContainer2.getFormElements();
			}
			iLength2 = aElements2.length;
		}

		if (oTitle1 || oTitle2 || oToolbar1 || oToolbar2) {
			// render title row (if one container has a title, the other has none leave the cells empty)
			rm.write("<tr class=\"sapUiGridConteinerFirstRow\"><td colspan=" + iContainerColumns);
			rm.addClass("sapUiGridHeader");
			if (sTooltip1) {
				rm.writeAttributeEscaped('title', sTooltip1);
			}
			if (oToolbar1) {
				rm.addClass("sapUiFormContainerToolbar");
			} else if (oTitle1) {
				rm.addClass("sapUiFormContainerTitle");
			}
			rm.writeClasses();
			rm.write(">");
			if (oToolbar1) {
				rm.renderControl(oToolbar1);
			} else if (oTitle1) {
				this.renderTitle(rm, oTitle1, oContainer1._oExpandButton, bExpandable1, false, oContainer1.getId());
			}
			rm.write("</td><td></td><td colspan=" + iContainerColumns);
			rm.addClass("sapUiGridHeader");
			if (sTooltip2) {
				rm.writeAttributeEscaped('title', sTooltip2);
			}
			if (oToolbar2) {
				rm.addClass("sapUiFormContainerToolbar");
			} else if (oTitle2) {
				rm.addClass("sapUiFormContainerTitle");
			}
			rm.writeClasses();
			rm.write(">");
			if (oToolbar2) {
				rm.renderControl(oToolbar2);
			} else if (oTitle2) {
				this.renderTitle(rm, oTitle2, oContainer2._oExpandButton, bExpandable2, false, oContainer2.getId());
			}
			rm.write("</td></tr>");
		}

		if ((!bExpandable1 || oContainer1.getExpanded()) || (!bExpandable2 || oContainer2.getExpanded())) {
			var aReservedCells1 = [],
			aReservedCells2 = [];
			var i1 = 0, i2 = 0;
			var oElement1;
			var oElement2;
			var bEmptyRow1;
			var bEmptyRow2;
			var bFirstVisibleFound = false;

			while (i1 < iLength1 || i2 < iLength2) {
				oElement1 = aElements1[i1];
				oElement2 = aElements2[i2];
				bEmptyRow1 = aReservedCells1[0] && (aReservedCells1[0][0] == iContainerColumns);
				bEmptyRow2 = aReservedCells2[0] && (aReservedCells2[0][0] == iContainerColumns);

				if ((oElement1 && oElement1.getVisible()) || (oElement2 && oElement2.getVisible()) || bEmptyRow1 || bEmptyRow2) {
					rm.write("<tr");

					if (!bFirstVisibleFound) {
						bFirstVisibleFound = true;
						if (!oToolbar1 && !oTitle1 && !oToolbar2 && !oTitle2) {
							rm.addClass("sapUiGridConteinerFirstRow");
						}
					}

					rm.writeClasses();
					rm.write(">");

					if (!bEmptyRow1) {
						if (oElement1 && oElement1.getVisible() && (!bExpandable1 || oContainer1.getExpanded())) {
							aReservedCells1 = this.renderElement(rm, oLayout, oElement1, true, iContainerColumns, false, aReservedCells1);
						} else {
							rm.write("<td colspan=" + iContainerColumns + "></td>");
						}
						if (aReservedCells1[0] != "full") {
							i1++;
						}
					} else {
						if (aReservedCells1[0][2] > 0) {
							// render empty label cell
							rm.write("<td colspan=" + aReservedCells1[0][2] + "></td>");
						}
						aReservedCells1.splice(0,1);
					}
					rm.write("<td></td>"); // separator column
					if (!bEmptyRow2) {
						if (oElement2 && oElement2.getVisible() && (!bExpandable2 || oContainer2.getExpanded())) {
							aReservedCells2 = this.renderElement(rm, oLayout, oElement2, true, iContainerColumns, false, aReservedCells2);
						} else {
							rm.write("<td colspan=" + iContainerColumns + "></td>");
						}
						if (aReservedCells2[0] != "full") {
							i2++;
						}
					} else {
						if (aReservedCells2[0][2] > 0) {
							// render empty label cell
							rm.write("<td colspan=" + aReservedCells2[0][2] + "></td>");
						}
						aReservedCells2.splice(0,1);
					}
					rm.write("</tr>");
				} else {
					i1++;
					i2++;
				}
			}
			if (aReservedCells1.length > 0 || aReservedCells2.length > 0) {
				// still rowspans left -> render dummy rows to fill up
				for ( var i = 0; i < aReservedCells1.length || i < aReservedCells2.length; i++) {
					rm.write("<tr></tr>");
				}
			}
		}
	};

	/*
	 * aReservedCells : Array of already used cells of vCells (Rowspan) of previous elements, "full" if a full-size field
	 */
	GridLayoutRenderer.renderElement = function(rm, oLayout, oElement, bHalf, iCells, bSeparatorColumn, aReservedCells){

		var oLabel = oElement.getLabelControl(); // do not use getLabel() because it returns just text if only text is maintained
		var iLabelFromRowspan = 0;
		var aFields = oElement.getFields();
		var iCellsUsed = 0;
		var iAutoCellsUsed = 0;
		var bMiddleSet = false;
		var iColspan = 1;
		var iRowspan = 1;
		var x = 0;

		if (this.checkFullSizeElement(oLayout, oElement)) {
			// field must be full size - render label in a separate row
			if (aReservedCells.length > 0 && aReservedCells[0] != "full") {
				// already rowspans left -> ignore full line and raise error
				jQuery.sap.log.error("Element \"" + oElement.getId() + "\" - Too much fields for one row!", "Renderer", "GridLayout");
				return aReservedCells;
			}
			if (bSeparatorColumn) {
				iCells = iCells + 1;
			}
			if (oLabel && aReservedCells[0] != "full") {
				rm.write("<td colspan=" + iCells + " class=\"sapUiFormElementLbl sapUiGridLabelFull\">");
				rm.renderControl(oLabel);
				rm.write("</td>");
				return ["full"];
			} else {
				aReservedCells.splice(0,1);
				iRowspan = this.getElementData(oLayout, aFields[0]).getVCells();
				rm.write("<td colspan=" + iCells);
				if (iRowspan > 1 && bHalf) {
					// Rowspan on full size cells -> reserve cells for next line (makes only sense in half size containers);
					rm.write(" rowspan=" + iRowspan);
					for ( x = 0; x < iRowspan - 1; x++) {
						aReservedCells.push([iCells, undefined, false]);
					}
				}
				rm.write(" >");
				rm.renderControl(aFields[0]);
				rm.write("</td>");
				return aReservedCells;
			}
		}

		if (aReservedCells.length > 0 && aReservedCells[0][0] > 0) {
			// already cells reserved by previous lines via vCells
			// add label cells to free cells because they are reduced by rendering the label
			iCells = iCells - aReservedCells[0][0] + aReservedCells[0][2];
			bMiddleSet = aReservedCells[0][1];
			iLabelFromRowspan = aReservedCells[0][2];
			aReservedCells.splice(0,1);
		}

		var iLabelCells = iLabelFromRowspan;
		var oElementData;
		var sColspan = "";
		if (oLabel || iLabelFromRowspan > 0) {
			iLabelCells = 3;
			if (oLabel && iLabelFromRowspan == 0) {
				// if there is a rowspan in rows above, the label can not have a different size
				oElementData = this.getElementData(oLayout, oLabel);

				if (oElementData) {
					sColspan = oElementData.getHCells();
					if (sColspan != "auto" && sColspan != "full") {
						iLabelCells = parseInt(sColspan, 10);
					}
				}
			}

			rm.write("<td colspan=" + iLabelCells + " class=\"sapUiFormElementLbl\">");
			if (oLabel) {
				rm.renderControl(oLabel);
			}
			iCells = iCells - iLabelCells;
			rm.write("</td>");
		}

		if (aFields && aFields.length > 0) {
			// calculate free cells for auto size
			var iAutoCells = iCells;
			var iAutoFields = aFields.length;
			var oField;
			var i = 0;
			var il = 0;
			for (i = 0, il = aFields.length; i < il; i++) {
				oField = aFields[i];
				oElementData = this.getElementData(oLayout, oField);
				if (oElementData && oElementData.getHCells() != "auto") {
					iAutoCells = iAutoCells - parseInt(oElementData.getHCells(), 10);
					iAutoFields = iAutoFields - 1;
				}
			}

			var iAutoI = 0;
			for (i = 0, iAutoI = 0, il = aFields.length; i < il; i++) {
				oField = aFields[i];
				oElementData = this.getElementData(oLayout, oField);
				sColspan = "auto";
				iColspan = 1;
				iRowspan = 1;
				if (oElementData) {
					sColspan = oElementData.getHCells();
					iRowspan = oElementData.getVCells();
				}
				// calculate real colspan
				if (sColspan == "auto") {
					if (iAutoCells > 0) {
						iColspan = Math.floor(iAutoCells / iAutoFields);
						if (iColspan < 1) {
							iColspan = 1;
						}
						iAutoI++;
						iAutoCellsUsed = iAutoCellsUsed + iColspan;
						if ((iAutoI == iAutoFields) && (iAutoCells > iAutoCellsUsed)) {
							iColspan = iColspan + (iAutoCells - iAutoCellsUsed);
						}
					} else {
						// no space for auto cells -> render it with 1 cell
						iColspan = 1;
					}
				} else {
					iColspan = parseInt(sColspan, 10);
				}
				iCellsUsed = iCellsUsed + iColspan;
				if (iCellsUsed > iCells) {
					// too much cells
					jQuery.sap.log.error("Element \"" + oElement.getId() + "\" - Too much fields for one row!", "Renderer", "GridLayout");
					iCellsUsed = iCellsUsed - iColspan; // to add empty dummy cell
					break;
				}

				if (iRowspan > 1) {
					// Rowspan is used -> reserve cells for next line
					for ( x = 0; x < iRowspan - 1; x++) {
						if (oLabel) {
							iLabelFromRowspan = iLabelCells;
						}
						if (aReservedCells.length > x) {
							aReservedCells[x][0] = aReservedCells[x][0] + iColspan;
							aReservedCells[x][2] = iLabelFromRowspan;
						} else {
							aReservedCells.push([iLabelCells + iColspan, undefined, iLabelFromRowspan]);
						}
					}
				}

				if (bSeparatorColumn && iCellsUsed >= Math.floor(iCells / 2) && !bMiddleSet) {
					// for the middle cell add the separator column
					iColspan = iColspan + 1;
					bMiddleSet = true;
					if (iRowspan > 1) {
						// Rowspan is used -> reserve cells for next line
						for ( x = 0; x < iRowspan - 1; x++) {
							aReservedCells[x][1] = true;
						}
					}
				}

				rm.write("<td");
				if (iColspan > 1) {
					rm.write(" colspan=" + iColspan);
				}
				if (iRowspan > 1) {
					rm.write(" rowspan=" + iRowspan);
				}
				rm.write(" >");
				rm.renderControl(oField);
				rm.write("</td>");
			}
		}
		if (iCellsUsed < iCells) {
			// add an empty cell if not all cells are filled
			var iEmpty = iCells - iCellsUsed;
			if (!bHalf && bSeparatorColumn && !bMiddleSet) {
				iEmpty++;
			}
			rm.write("<td colspan=" + iEmpty + " ></td>");
		}

		return aReservedCells;

	};

	GridLayoutRenderer.checkFullSizeElement = function(oLayout, oElement){

		var aFields = oElement.getFields();

		if (aFields.length == 1 && this.getElementData(oLayout, aFields[0]) && this.getElementData(oLayout, aFields[0]).getHCells() == "full") {
			return true;
		}else {
			return false;
		}

	};

	GridLayoutRenderer.getContainerData = function(oLayout, oContainer){

		return oLayout.getLayoutDataForElement(oContainer, "sap.ui.layout.form.GridContainerData");

	};

	GridLayoutRenderer.getElementData = function(oLayout, oControl){

		return oLayout.getLayoutDataForElement(oControl, "sap.ui.layout.form.GridElementData");

	};

	return GridLayoutRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/layout/form/GridLayoutRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.form.ResponsiveGridLayoutRenderer') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare('sap.ui.layout.form.ResponsiveGridLayoutRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/form/ResponsiveGridLayoutRenderer",['jquery.sap.global', 'sap/ui/core/Renderer', './FormLayoutRenderer'],
	function(jQuery, Renderer, FormLayoutRenderer) {
	"use strict";


	/**
	 * form/ResponsiveGridLayout renderer.
	 * @namespace
	 */
	var ResponsiveGridLayoutRenderer = Renderer.extend(FormLayoutRenderer);

	ResponsiveGridLayoutRenderer.getMainClass = function(){
		return "sapUiFormResGrid";
	};

	ResponsiveGridLayoutRenderer.renderContainers = function(rm, oLayout, oForm){

		var aContainers = oForm.getFormContainers();
		var aVisibleContainers = [];
		var iLength = 0;
		for ( var i = 0; i < aContainers.length; i++) {
			var oContainer = aContainers[i];
			if (oContainer.getVisible()) {
				iLength++;
				aVisibleContainers.push(oContainer);
			}
		}

		if (iLength > 0) {
			// special case: only one container -> do not render an outer Grid
			if (iLength > 1 || !oLayout.getSingleContainerFullSize()) {
				//render Grid
				rm.renderControl(oLayout._mainGrid);
			} else if (oLayout.mContainers[aVisibleContainers[0].getId()][0]) {
				// render panel
				rm.renderControl(oLayout.mContainers[aVisibleContainers[0].getId()][0]);
			} else {
				// render Grid of container
				rm.renderControl(oLayout.mContainers[aVisibleContainers[0].getId()][1]);
			}
		}

	};

	return ResponsiveGridLayoutRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/layout/form/ResponsiveGridLayoutRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.form.ResponsiveLayoutRenderer') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare('sap.ui.layout.form.ResponsiveLayoutRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/form/ResponsiveLayoutRenderer",['jquery.sap.global', 'sap/ui/core/Renderer', './FormLayoutRenderer'],
	function(jQuery, Renderer, FormLayoutRenderer) {
	"use strict";


	/**
	 * ResponsiveLayout renderer.
	 * @namespace
	 */
	var ResponsiveLayoutRenderer = Renderer.extend(FormLayoutRenderer);


	ResponsiveLayoutRenderer.getMainClass = function(){
		return "sapUiFormResLayout";
	};

	ResponsiveLayoutRenderer.renderContainers = function(rm, oLayout, oForm){

		var aContainers = oForm.getFormContainers();
		var aVisibleContainers = [];
		var iLength = 0;
		for ( var i = 0; i < aContainers.length; i++) {
			var oContainer = aContainers[i];
			if (oContainer.getVisible()) {
				iLength++;
				aVisibleContainers.push(oContainer);
			}
		}

		if (iLength > 0) {
			// special case: only one container -> do not render an outer ResponsiveFlowLayout
			if (iLength > 1) {
				//render ResponsiveFlowLayout
				rm.renderControl(oLayout._mainRFLayout);
			} else if (oLayout.mContainers[aVisibleContainers[0].getId()][0]) {
				// render panel
				rm.renderControl(oLayout.mContainers[aVisibleContainers[0].getId()][0]);
			} else {
				// render ResponsiveFlowLayout of container
				rm.renderControl(oLayout.mContainers[aVisibleContainers[0].getId()][1]);
			}
		}

	};


	return ResponsiveLayoutRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/layout/form/ResponsiveLayoutRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.form.SimpleForm.designtime') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the Design Time Metadata for the sap.ui.layout.form.SimpleForm control
jQuery.sap.declare('sap.ui.layout.form.SimpleForm.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/layout/form/SimpleForm.designtime",[], function() {
	"use strict";

	var fnHasContent = function(oFormContainer) {
		if (oFormContainer.getTitle()) {
			return true;
		} else {
			var oSimpleForm = oFormContainer.getParent().getParent();
			return oSimpleForm.getContent().some(function(oControl) {
				return oControl.getVisible();
			});
		}
	};

	var fnGetStableElements = function(oElement) {
		var aStableElements = [];
		var oLabel;
		var oTitleOrToolbar;
		if (oElement.getMetadata().getName() === "sap.ui.layout.form.FormElement") {
			oLabel = oElement.getLabel();
			if (oLabel) {
				aStableElements.push(oLabel);
			}
			aStableElements = aStableElements.concat(oElement.getFields());
		} else if (oElement.getMetadata().getName() === "sap.ui.layout.form.FormContainer") {
			oTitleOrToolbar = oElement.getTitle() || oElement.getToolbar();
			if (oTitleOrToolbar) {
				aStableElements[0] = oTitleOrToolbar;
			}
			oElement.getFormElements().forEach(function(oFormElement) {
				oLabel = oFormElement.getLabel();
				if (oLabel) {
					aStableElements.push(oLabel);
				}
				aStableElements = aStableElements.concat(oFormElement.getFields());
			});
		}
		return aStableElements;
	};

	var oFormPropagatedMetadata = {
		aggregations : {
			formContainers : {
				//maybe inherited from Form
				childNames : {
					singular : "GROUP_CONTROL_NAME",
					plural : "GROUP_CONTROL_NAME_PLURAL"
				},
				getIndex : function(oForm, oFormContainer) {
					var aFormContainers = oForm.getFormContainers();

					if (oFormContainer) {
						return aFormContainers.indexOf(oFormContainer) + 1;
					}
					// if there is no Elements in the FormContainer, the SimpleForm is empty and
					// the index has to be 0, otherwise the SimpleForm doesn't behave as expected.
					if (aFormContainers[0].getFormElements().length === 0 &&
						aFormContainers[0].getTitle() === null) {
						return 0;
					}

					return aFormContainers.length;
				},
				beforeMove : function (oSimpleForm) { //TODO has to be relevant container/selector, TODO extract as function
					if (oSimpleForm){
						oSimpleForm._bChangedByMe = true;
					}
				},
				afterMove : function (oSimpleForm) { //TODO has to be relevant container/selector, TODO extract as function
					if (oSimpleForm){
						oSimpleForm._bChangedByMe = false;
					}
				},
				actions : {
					move : {
						changeType : "moveSimpleFormGroup"
					},
					createContainer : {
						changeType : "addSimpleFormGroup",
						changeOnRelevantContainer : true,
						isEnabled : function (oForm) {
							var aFormContainers = oForm.getFormContainers();

							for (var i = 0; i < aFormContainers.length; i++) {
								if (aFormContainers[i].getToolbar && aFormContainers[i].getToolbar()) {
									return false;
								}
							}
							return true;
						},
						getCreatedContainerId : function(sNewControlID) {
							var oTitle = sap.ui.getCore().byId(sNewControlID);
							var sParentElementId = oTitle.getParent().getId();

							return sParentElementId;
						}
					}
				}
			}
		},
		getStableElements : fnGetStableElements
	};

	var oFormContainerPropagatedMetadata = {
		name : {
			singular : "GROUP_CONTROL_NAME",
			plural : "GROUP_CONTROL_NAME_PLURAL"
		},
		aggregations: {
			formElements : {
				childNames : {
					singular : "FIELD_CONTROL_NAME",
					plural : "FIELD_CONTROL_NAME_PLURAL"
				},
				beforeMove : function (oSimpleForm) { //TODO has to be relevant container/selector, TODO extract as function
					if (oSimpleForm){
						oSimpleForm._bChangedByMe = true;
					}
				},
				afterMove : function (oSimpleForm) { //TODO has to be relevant container/selector, TODO extract as function
					if (oSimpleForm){
						oSimpleForm._bChangedByMe = false;
					}
				},
				actions : {
					move : {
						changeType : "moveSimpleFormField"
					}
				}
			}
		},
		actions: {
			rename : function(oRenamedElement) {
				return {
					changeType : "renameTitle",
					changeOnRelevantContainer : true,
					isEnabled : !(oRenamedElement.getToolbar() || !oRenamedElement.getTitle()),
					domRef : function (oControl){
						if (oControl.getTitle && oControl.getTitle()) {
							return oControl.getTitle().getDomRef();
						}
					}
				};
			},
			remove : function(oRemovedElement) {
				return {
					changeType : "removeSimpleFormGroup",
					changeOnRelevantContainer : true,
					isEnabled : !(!oRemovedElement.getToolbar() && !fnHasContent.call(this, oRemovedElement)),
					getConfirmationText : function(oRemovedElement){
						var bContent = false;
						if (oRemovedElement.getMetadata().getName() === "sap.ui.layout.form.FormContainer"
								&& oRemovedElement.getToolbar && oRemovedElement.getToolbar()) {
							var aToolbarContent = oRemovedElement.getToolbar().getContent();
							if (aToolbarContent.length > 1) {
									bContent = true;
							} else if ((aToolbarContent.length === 1) &&
												(!aToolbarContent[0].getMetadata().isInstanceOf("sap.ui.core.Label") &&
												!aToolbarContent[0] instanceof sap.ui.core.Title && !aToolbarContent[0] instanceof sap.m.Title)) {
									bContent = true;
							}
						}
						if (bContent) {
							var oTextResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.layout");
							return oTextResources.getText("MSG_REMOVING_TOOLBAR");
						}
					},
					getState : function(oSimpleForm) { //TODO has to be relevant container/selector, TODO extract as function
						var aContent = oSimpleForm.getContent();
						return {
							content : aContent.map(function(oElement) {
								return {
									element : oElement,
									visible : oElement.getVisible ? oElement.getVisible() : undefined,
									index : aContent.indexOf(oElement)
								};
							})
						};
					},
					restoreState : function(oSimpleForm, oState) { //TODO has to be relevant container/selector, TODO extract as function
						oSimpleForm.removeAllContent();
						oState.content.forEach(function(oElementState) {
							oSimpleForm.insertContent(oElementState.element, oElementState.index);
							if (oElementState.element.setVisible){
								oElementState.element.setVisible(oElementState.visible);
							}
						});
					}
				};
			}
		},
		getStableElements : fnGetStableElements
	};

	var oFormElementPropagatedMetadata = {
		name : {
			singular : "FIELD_CONTROL_NAME",
			plural : "FIELD_CONTROL_NAME_PLURAL"
		},
		actions: {
			rename : {
				changeType : "renameLabel",
				changeOnRelevantContainer : true,
				domRef : function (oControl){
					return oControl.getLabel().getDomRef();
				}
			},
			remove : {
				changeType : "hideSimpleFormField",
				changeOnRelevantContainer : true,
				getState : function(oSimpleForm) { //TODO has to be relevant container/selector, TODO extract as function
					var aContent = oSimpleForm.getContent();
					return {
						content : aContent.map(function(oElement) {
							return {
								element : oElement,
								visible : oElement.getVisible ? oElement.getVisible() : undefined,
								index : aContent.indexOf(oElement)
							};
						})
					};
				},
				restoreState : function(oSimpleForm, oState) { //TODO has to be relevant container/selector, TODO extract as function
					oSimpleForm.removeAllContent();
					oState.content.forEach(function(oElementState) {
						oSimpleForm.insertContent(oElementState.element, oElementState.index);
						if (oElementState.element.setVisible){
							oElementState.element.setVisible(oElementState.visible);
						}
					});
				}
			},
			reveal : {
				changeType : "unhideSimpleFormField",
				changeOnRelevantContainer : true
			}
		},
		getStableElements : fnGetStableElements
	};

	return {
		aggregations : {
			content : {
				ignore : true
			},
			title : {
				ignore : true
			},
			toolbar : {
				ignore : function(oSimpleForm){
					return !oSimpleForm.getToolbar();
				},
				domRef : function(oSimpleForm){
					return oSimpleForm.getToolbar().getDomRef();
				}
			},
			form : {
				ignore : false,
				propagateMetadata : function(oElement){
					var sType = oElement.getMetadata().getName();
					if (sType === "sap.ui.layout.form.Form") {
						return oFormPropagatedMetadata;
					} else if (sType === "sap.ui.layout.form.FormContainer") {
						return oFormContainerPropagatedMetadata;
					} else if ( sType === "sap.ui.layout.form.FormElement") {
						return oFormElementPropagatedMetadata;
					} else {
						return {
							actions: null
						};
					}
				},
				propagateRelevantContainer : true
			}
		}
	};

}, /* bExport= */false);

}; // end of sap/ui/layout/form/SimpleForm.designtime.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.form.SimpleFormRenderer') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare('sap.ui.layout.form.SimpleFormRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/form/SimpleFormRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * SimpleForm renderer.
	 * @namespace
	 */
	var SimpleFormRenderer = {
	};


	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	SimpleFormRenderer.render = function(oRm, oControl){

		oControl._bChangedByMe = true;
		// write the HTML into the render manager
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapUiSimpleForm");
		if (oControl.getWidth()) {
			oRm.addStyle("width", oControl.getWidth());
		}
		oRm.writeStyles();
		oRm.writeClasses();
		oRm.write(">"); // div element
		var oForm = oControl.getAggregation("form");
		oRm.renderControl(oForm);
		oRm.write("</div>");
		oControl._bChangedByMe = false;

	};


	return SimpleFormRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/layout/form/SimpleFormRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.library') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/**
 * Initialization Code and shared classes of library sap.ui.layout.
 */
jQuery.sap.declare('sap.ui.layout.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.DataType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/library",['jquery.sap.global', 'sap/ui/base/DataType',
	'sap/ui/core/library'], // library dependency
	function(jQuery, DataType) {

	"use strict";

	/**
	 * SAPUI5 library with layout controls.
	 *
	 * @namespace
	 * @name sap.ui.layout
	 * @author SAP SE
	 * @version 1.48.5
	 * @public
	 */

	// delegate further initialization of this library to the Core
	sap.ui.getCore().initLibrary({
		name : "sap.ui.layout",
		version: "1.48.5",
		dependencies : ["sap.ui.core"],
		types: [
			"sap.ui.layout.BackgroundDesign",
			"sap.ui.layout.GridIndent",
			"sap.ui.layout.GridPosition",
			"sap.ui.layout.GridSpan",
			"sap.ui.layout.BlockBackgroundType",
			"sap.ui.layout.form.GridElementCells",
			"sap.ui.layout.form.SimpleFormLayout"
		],
		interfaces: [],
		controls: [
			"sap.ui.layout.AlignedFlowLayout",
			"sap.ui.layout.DynamicSideContent",
			"sap.ui.layout.FixFlex",
			"sap.ui.layout.Grid",
			"sap.ui.layout.HorizontalLayout",
			"sap.ui.layout.ResponsiveFlowLayout",
			"sap.ui.layout.ResponsiveSplitter",
			"sap.ui.layout.ResponsiveSplitterPage",
			"sap.ui.layout.Splitter",
			"sap.ui.layout.VerticalLayout",
			"sap.ui.layout.BlockLayoutCell",
			"sap.ui.layout.BlockLayoutRow",
			"sap.ui.layout.BlockLayout",
			"sap.ui.layout.form.Form",
			"sap.ui.layout.form.FormLayout",
			"sap.ui.layout.form.GridLayout",
			"sap.ui.layout.form.ResponsiveGridLayout",
			"sap.ui.layout.form.ResponsiveLayout",
			"sap.ui.layout.form.SimpleForm"
		],
		elements: [
			"sap.ui.layout.GridData",
			"sap.ui.layout.ResponsiveFlowLayoutData",
			"sap.ui.layout.SplitterLayoutData",
			"sap.ui.layout.form.FormContainer",
			"sap.ui.layout.form.FormElement",
			"sap.ui.layout.form.GridContainerData",
			"sap.ui.layout.PaneContainer",
			"sap.ui.layout.SplitPane",
			"sap.ui.layout.form.GridElementData"
		],
		extensions: {
			flChangeHandlers: {
				"sap.ui.layout.form.SimpleForm": "sap/ui/layout/flexibility/SimpleForm",
				"sap.ui.layout.Grid": {
					"moveControls": "default",
					"hideControl": "default",
					"unhideControl": "default"
				},
				"sap.ui.layout.form.Form": "sap/ui/layout/flexibility/Form",
				"sap.ui.layout.form.FormContainer": "sap/ui/layout/flexibility/FormContainer",
				"sap.ui.layout.form.FormElement": "sap/ui/layout/flexibility/FormElement",
				"sap.ui.layout.HorizontalLayout": {
					"moveControls": "default",
					"hideControl": "default",
					"unhideControl": "default"
				},
				"sap.ui.layout.VerticalLayout": {
					"moveControls": "default",
					"hideControl": "default",
					"unhideControl": "default"
				}
			}
		}
	});

	/**
	 * Available Background Design.
	 *
	 * @enum {string}
	 * @public
	 * @since 1.36.0
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.layout.BackgroundDesign = {

		/**
		 * A solid background color dependent on the theme.
		 * @public
		 */
		Solid : "Solid",

		/**
		 * Transparent background.
		 * @public
		 */
		Transparent : "Transparent",

		/**
		 * A translucent background depending on the opacity value of the theme.
		 * @public
		 */
		Translucent : "Translucent"

	};

	/**
	 * @classdesc A string type that represents Grid's indent values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 11 that the container has to take, for example: "L2 M4 S6", "M11", "s10" or "l4 m4". Note that the parameters have to be provided in the order large  medium  small.
	 *
	 * @final
	 * @namespace
	 * @public
	 * @ui5-metamodel This simple type also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.layout.GridIndent = DataType.createType('sap.ui.layout.GridIndent', {
	    isValid : function(vValue) {
	      return /^(([Xx][Ll](?:[0-9]|1[0-1]))? ?([Ll](?:[0-9]|1[0-1]))? ?([Mm](?:[0-9]|1[0-1]))? ?([Ss](?:[0-9]|1[0-1]))?)$/.test(vValue);
	    }

	  },
	  DataType.getType('string')
	);

	/**
	 * The position of the Grid. Can be "Left", "Center" or "Right". "Left" is default.
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.layout.GridPosition = {

		/**
		 * Grid is aligned left.
		 * @public
		 */
		Left : "Left",

		/**
		 * Grid is aligned to the right.
		 * @public
		 */
		Right : "Right",

		/**
		 * Grid is centered on the screen.
		 * @public
		 */
		Center : "Center"

	};


	/**
	 * @classdesc A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: "L2 M4 S6", "M12", "s10" or "l4 m4". Note that the parameters have to be provided in the order large  medium  small.
	 *
	 * @final
	 * @namespace
	 * @public
	 * @ui5-metamodel This simple type also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.layout.GridSpan = DataType.createType('sap.ui.layout.GridSpan', {
	    isValid : function(vValue) {
	      return /^(([Xx][Ll](?:[1-9]|1[0-2]))? ?([Ll](?:[1-9]|1[0-2]))? ?([Mm](?:[1-9]|1[0-2]))? ?([Ss](?:[1-9]|1[0-2]))?)$/.test(vValue);
	    }

	  },
	  DataType.getType('string')
	);

		/**
		 * A string type that is used inside the BlockLayout to set predefined background color to the cells inside
		 * the control.
		 * @enum {string}
		 * @public
		 * @ui5-metamodel This simple type also will be described in the UI5 (legacy) designtime metamodel
		 */
	sap.ui.layout.BlockBackgroundType = {
		/**
		 * Background is transparent
		 * @public
		 */
		Default: "Default",
		/**
		 * Background is with predefined light colors
		 * @public
		 */
		Light: "Light",
		/**
		 * Background with bright and dark background colors
		 * @public
		 */
		Mixed: "Mixed",
		/**
		 * Background with pre-defined accent colors
		 * @public
		 */
		Accent: "Accent",
		/**
		 * For applications that want to make use of e.g. charts in the Blocks, this layout type has spacings around the Blocks
		 * @public
		 */
		Dashboard: "Dashboard"
	};

	/**
	 * A string type that is used inside the BlockLayoutRow to set predefined set of colors the cells inside
	 * the control. Color sets depend on sap.ui.layout.BlockBackgroundType
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This simple type also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.layout.BlockRowColorSets = {
		/**
		 * sap.ui.layout.BlockBackgroundType.Default: N/A
		 * sap.ui.layout.BlockBackgroundType.Light: Color Set 1
		 * sap.ui.layout.BlockBackgroundType.Mixed: Color Set 1
		 * sap.ui.layout.BlockBackgroundType.Accent: Color Set 1
		 * sap.ui.layout.BlockBackgroundType.Dashboard: N/A
		 * @public
		 */
		ColorSet1: "ColorSet1",
		/**
		 * sap.ui.layout.BlockBackgroundType.Default: N/A
		 * sap.ui.layout.BlockBackgroundType.Light: Color Set 2
		 * sap.ui.layout.BlockBackgroundType.Mixed: Color Set 2
		 * sap.ui.layout.BlockBackgroundType.Accent: Color Set 2
		 * sap.ui.layout.BlockBackgroundType.Dashboard: N/A
		 * @public
		 */
		ColorSet2: "ColorSet2",
		/**
		 * sap.ui.layout.BlockBackgroundType.Default: N/A
		 * sap.ui.layout.BlockBackgroundType.Light: Color Set 1
		 * sap.ui.layout.BlockBackgroundType.Mixed: Color Set 1
		 * sap.ui.layout.BlockBackgroundType.Accent: Color Set 3
		 * sap.ui.layout.BlockBackgroundType.Dashboard: N/A
		 * @public
		 */
		ColorSet3: "ColorSet3",
		/**
		 * sap.ui.layout.BlockBackgroundType.Default: N/A
		 * sap.ui.layout.BlockBackgroundType.Light: Color Set 2
		 * sap.ui.layout.BlockBackgroundType.Mixed: Color Set 2
		 * sap.ui.layout.BlockBackgroundType.Accent: Color Set 4
		 * sap.ui.layout.BlockBackgroundType.Dashboard: N/A
		 * @public
		 */
		ColorSet4: "ColorSet4"
	};


	/**
	 * A string type that is used inside the BlockLayoutCell to set a predefined set of colors for the cells.
	 *
	 * @enum {string}
	 * @public
	 * @since 1.48
	 * @ui5-metamodel This simple type also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.layout.BlockLayoutCellColorSet = {
		/**
		 * Color Set 1
		 *
		 * @public
		 */
		ColorSet1: "ColorSet1",
		/**
		 * Color Set 2
		 *
		 * @public
		 */
		ColorSet2: "ColorSet2",
		/**
		 * Color Set 3
		 *
		 * @public
		 */
		ColorSet3: "ColorSet3",
		/**
		 * Color Set 4
		 *
		 * @public
		 */
		ColorSet4: "ColorSet4",
		/**
		 * Color Set 5
		 *
		 * @public
		 */
		ColorSet5: "ColorSet5",
		/**
		 * Color Set 6
		 *
		 * @public
		 */
		ColorSet6: "ColorSet6",
		/**
		 * Color Set 7
		 *
		 * @public
		 */
		ColorSet7: "ColorSet7",
		/**
		 * Color Set 8
		 *
		 * @public
		 */
		ColorSet8: "ColorSet8",
		/**
		 * Color Set 9
		 *
		 * @public
		 */
		ColorSet9: "ColorSet9",
		/**
		 * Color Set 10
		 *
		 * @public
		 */
		ColorSet10: "ColorSet10",
		/**
		 * Color Set 11
		 *
		 * @public
		 */
		ColorSet11: "ColorSet11"
	};

		/**
		 * A string type that is used inside the BlockLayoutCell to set a predefined set of color shades for the cells.
		 * The colors are defined with sap.ui.layout.BlockLayoutCellColorSet. And this is for the shades only.
		 *
		 * @enum {string}
		 * @public
		 * @since 1.48
		 * @ui5-metamodel This simple type also will be described in the UI5 (legacy) designtime metamodel
		 */
		sap.ui.layout.BlockLayoutCellColorShade = {
			/**
			 * Shade A
			 *
			 * @public
			 */
			ShadeA: "ShadeA",
			/**
			 * Shade B
			 *
			 * @public
			 */
			ShadeB: "ShadeB",
			/**
			 * Shade C
			 *
			 * @public
			 */
			ShadeC: "ShadeC",
			/**
			 * Shade D
			 *
			 * @public
			 */
			ShadeD: "ShadeD"
		};


	sap.ui.layout.form = sap.ui.layout.form || {};

	/**
	 * @classdesc A string that defines the number of used cells in a <code>GridLayout</code>. This can be a number from 1 to 16, "auto" or "full".
	 * If set to "auto" the size is determined by the number of fields and the available cells. For labels the auto size is 3 cells.
	 * If set to "full" only one field is allowed within the <code>FormElement</code>. It gets the full width of the row and the label is displayed above. <b>Note:</b> For labels full size has no effect.
	 *
	 * @namespace
	 * @public
	 * @ui5-metamodel This simple type also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.layout.form.GridElementCells = DataType.createType('sap.ui.layout.form.GridElementCells', {
		isValid : function(vValue) {
			return /^(auto|full|([1-9]|1[0-6]))$/.test(vValue);
			}

		},
		DataType.getType('string')
	);


	/**
	 * Available <code>FormLayouts</code> used to render a <code>SimpleForm</code>.
	 *
	 * @enum {string}
	 * @public
	 * @since 1.16.0
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.layout.form.SimpleFormLayout = {

		/**
		 * Uses the <code>ResponsiveLayout</code> to render the <code>SimpleForm</code>
		 * @public
		 */
		ResponsiveLayout : "ResponsiveLayout",

		/**
		 * Uses the <code>GridLayout</code> to render the <code>SimpleForm</code>
		 * @public
		 */
		GridLayout : "GridLayout",

		/**
		 * Uses the <code>ResponsiveGridLayout</code> to render the <code>SimpleForm</code>
		 * @public
		 * @since 1.16.0
		 */
		ResponsiveGridLayout : "ResponsiveGridLayout"

	};

	/**
	 * Types of the DynamicSideContent Visibility options
	 *
	 * @enum {string}
	 * @public
	 * @since 1.30
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.layout.SideContentVisibility = {
		/**
		 * Show the side content on any breakpoint
		 * @public
		 */
		AlwaysShow: "AlwaysShow",
		/**
		 * Show the side content on XL breakpoint
		 * @public
		 */
		ShowAboveL: "ShowAboveL",
		/**
		 * Show the side content on L and XL breakpoints
		 * @public
		 */
		ShowAboveM: "ShowAboveM",
		/**
		 * Show the side content on M, L and XL breakpoints
		 * @public
		 */
		ShowAboveS: "ShowAboveS",
		/**
		 * Don't show the side content on any breakpoints
		 * @public
		 */
		NeverShow: "NeverShow"
	};

	/**
	 * Types of the DynamicSideContent FallDown options
	 *
	 * @enum {string}
	 * @public
	 * @since 1.30
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.layout.SideContentFallDown = {
		/**
		 * Side content falls down on breakpoints below XL
		 * @public
		 */
		BelowXL: "BelowXL",
		/**
		 * Side content falls down on breakpoints below L
		 * @public
		 */
		BelowL: "BelowL",
		/**
		 * Side content falls down on breakpoints below M
		 * @public
		 */
		BelowM: "BelowM",
		/**
		 * Side content falls down on breakpoint M and the minimum width for the side content
		 * @public
		 */
		OnMinimumWidth: "OnMinimumWidth"
	};

	/**
	 * The position of the side content - End (default) and Begin.
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.layout.SideContentPosition = {
		/**
		 * The side content is on the right side of the main container in left-to-right mode and on the left side in right-to-left mode.
		 * @public
		 */
		End : "End",

		/**
		 * The side content is on the left side of the main container in left-to-right mode and on the right side in right-to-left mode.
		 * @public
		 */
		Begin : "Begin"
	};

	// factory for Form to create labels and buttons to be overwritten by commons and mobile library
	if (!sap.ui.layout.form.FormHelper) {
		sap.ui.layout.form.FormHelper = {
			createLabel: function(sText){ throw new Error("no Label control available!"); }, /* must return a Label control */
			createButton: function(sId, fPressFunction, fnCallback){ throw new Error("no Button control available!"); }, /* must return a button control */
			setButtonContent: function(oButton, sText, sTooltip, sIcon, sIconHovered){ throw new Error("no Button control available!"); },
			addFormClass: function(){ return null; },
			setToolbar: function(oToolbar){ return oToolbar; }, /* allow to overwrite toolbar settings */
			bArrowKeySupport: true, /* enables the keyboard support for arrow keys */
			bFinal: false /* if true, the helper must not be overwritten by an other library */
		};
	}

	return sap.ui.layout;

});

}; // end of sap/ui/layout/library.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.AlignedFlowLayout') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare('sap.ui.layout.AlignedFlowLayout'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/AlignedFlowLayout",['sap/ui/core/Control', './library', 'sap/ui/core/ResizeHandler'],
	function(Control, library, ResizeHandler) {
		"use strict";

		/**
		 * Constructor for a new AlignedFlowLayout.
		 *
		 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
		 * @param {object} [mSettings] Initial settings for the new control
		 *
		 * @class
		 * The <code>AlignedFlowLayout</code> control arranges its child controls evenly across the horizontal space available.
		 * Each item takes up the same width and grows and shrinks in response to the layout width.
		 * Items not fitting into a row with the configured <code>minItemWidth</code> property wrap into
		 * the next row (like in a regular flow layout). However, those wrapped items have the same flexible width as
		 * the items in the rows above, so they are aligned.
		 *
		 * @extends sap.ui.core.Control
		 *
		 * @author SAP SE
		 * @version 1.48.5
		 *
		 * @constructor
		 * @private
		 * @experimental This control is only for internal/experimental use and the API will change!
		 *
		 * @since 1.48
		 * @alias sap.ui.layout.AlignedFlowLayout
		 * @ui5-metamodel This control will also be described in the UI5 (legacy) design time meta model.
		 */
		var AlignedFlowLayout = Control.extend("sap.ui.layout.AlignedFlowLayout", {
			metadata: {
				library: "sap.ui.layout",
				properties: {

					/**
					 * Sets the minimum width of items.
					 * It prevents items from becoming smaller than the value specified.
					 * <b>Note:</b> If <code>minItemWidth</code> is greater than <code>maxItemWidth</code>,
					 * <code>maxItemWidth</code> wins.
					 */
					minItemWidth: {
						type: "sap.ui.core.AbsoluteCSSSize",
						defaultValue: "12rem"
					},

					/**
					 * Sets the maximum width of items.
					 * It prevents items from becoming larger than the value specified.
					 */
					maxItemWidth: {
						type: "sap.ui.core.AbsoluteCSSSize",
						defaultValue: "24rem"
					}
				},
				defaultAggregation: "content",
				aggregations: {

					/**
					 * Defines the content contained within this control.
					 * Flow layouts are typically used to arrange input controls, such as text input fields, but also
					 * buttons, images, etc.
					 */
					content: {
						type: "sap.ui.core.Control",
						multiple: true
					},

					/**
					 * Defines the area which is positioned at the bottom on the right of the entire layout control.
					 */
					endContent: {
						type: "sap.ui.core.Control",
						multiple: true
					}
				}
			}
		});

		AlignedFlowLayout.prototype.init = function() {
			this._iEndItemWidth = -1;

			// registration ID used for deregistering the resize handler
			this._sResizeListenerId = ResizeHandler.register(this, this._onResize.bind(this));
		};

		AlignedFlowLayout.prototype.exit = function() {
			if (this._sResizeListenerId) {
				ResizeHandler.deregister(this._sResizeListenerId);
				this._sResizeListenerId = "";
			}
		};

		AlignedFlowLayout.prototype._onRenderingOrThemeChanged = function() {
			var oDomRef = this.getDomRef(),
				oEndItemDomRef = this.getDomRef("endItem"),
				bEndItemAndContent = this.getContent().length && oDomRef && oEndItemDomRef;

			if (bEndItemAndContent) {
				var oLayoutComputedStyle = window.getComputedStyle(oDomRef, null),
					iLayoutPaddingTop = oLayoutComputedStyle.getPropertyValue("padding-top"),
					mEndItemStyle = oEndItemDomRef.style;

				// adapt the position of the absolute-positioned end item in case a standard CSS class is added
				if (sap.ui.getCore().getConfiguration().getRTL()) {
					mEndItemStyle.left = oLayoutComputedStyle.getPropertyValue("padding-left");
				} else {
					mEndItemStyle.right = oLayoutComputedStyle.getPropertyValue("padding-right");
				}

				mEndItemStyle.bottom = iLayoutPaddingTop;
			}

			this._onResize(null, oDomRef, oEndItemDomRef);

			// update last spacer width
			if (bEndItemAndContent) {
				oDomRef.lastElementChild.style.width = this._iEndItemWidth + "px";
			}
		};

		AlignedFlowLayout.prototype.onAfterRendering = AlignedFlowLayout.prototype._onRenderingOrThemeChanged;
		AlignedFlowLayout.prototype.onThemeChanged = AlignedFlowLayout.prototype._onRenderingOrThemeChanged;

		function getRootFontSize() {
			var oRootDomRef = document.documentElement;

			if (!oRootDomRef) {
				return 16; // browser default font size
			}

			return parseFloat(window.getComputedStyle(oRootDomRef).getPropertyValue("font-size"));
		}

		function remToPx(vRem) {
			return parseFloat(vRem) * getRootFontSize();
		}

		// this resize handler needs to be called on after rendering, theme change, and whenever the width of this
		// control changes
		AlignedFlowLayout.prototype._onResize = function(oEvent, oDomRef, oEndItemDomRef) {

			// called by resize handler, but only the height changed, so there is nothing to do;
			// this is required to avoid a resizing loop
			if ((oEvent && (oEvent.size.width === oEvent.oldSize.width)) || (this.getContent().length === 0)) {
				return;
			}

			oDomRef = oDomRef || this.getDomRef();

			if (!oDomRef) {
				return;
			}

			var CSS_CLASS_ONE_LINE = this.getRenderer().CSS_CLASS + "OneLine",
				bEnoughSpaceForEndItem = true;

			oEndItemDomRef = oEndItemDomRef || this.getDomRef("endItem");

			if (oEndItemDomRef) {
				var mLastSpacerStyle = oDomRef.lastElementChild.style;
				mLastSpacerStyle.height = "";
				mLastSpacerStyle.display = "";
				oDomRef.classList.remove(CSS_CLASS_ONE_LINE);

				var oLastItemDomRef = this.getLastItemDomRef(),
					iEndItemHeight = oEndItemDomRef.offsetHeight,
					iEndItemWidth = oEndItemDomRef.offsetWidth,
					iLastItemOffsetLeft = oLastItemDomRef.offsetLeft,
					iAvailableWidthForEndItem;

				if (sap.ui.getCore().getConfiguration().getRTL()) {
					iAvailableWidthForEndItem = iLastItemOffsetLeft;
				} else {
					var iRightBorderOfLastItem = iLastItemOffsetLeft + oLastItemDomRef.offsetWidth;
					iAvailableWidthForEndItem = oDomRef.offsetWidth - iRightBorderOfLastItem;
				}

				this._iEndItemWidth = iEndItemWidth; // cache the width of the end item
				bEnoughSpaceForEndItem = iAvailableWidthForEndItem >= iEndItemWidth;

				// if the end item fits into the line
				if (bEnoughSpaceForEndItem) {

					if (this.checkItemsWrapping(oDomRef)) {

						// if the end item overlap the items on the first line
						if (oEndItemDomRef.offsetTop < oLastItemDomRef.offsetTop) {
							mLastSpacerStyle.height = iEndItemHeight + "px";
							mLastSpacerStyle.display = "block";
						} else {
							mLastSpacerStyle.height = "0";
							mLastSpacerStyle.display = "";
						}

					} else {

						// if the height of the end item is higher than the other items on the first line,
						// the end item goes up and overflow its container
						if (oEndItemDomRef.offsetTop < oLastItemDomRef.offsetTop) {

							// increase the height of the last spacer item to make the end item go down
							mLastSpacerStyle.height = iEndItemHeight + "px";
						}

						mLastSpacerStyle.display = "block";
					}

				} else { // not enough space, increase the height of the last spacer item to make the endContent go down
					mLastSpacerStyle.height = iEndItemHeight + "px";
					mLastSpacerStyle.display = "block";
				}
			}

			// if the items fits into a single line, sets a CSS class to turns off the display of the spacer elements
			if (!this.checkItemsWrapping(oDomRef) && bEnoughSpaceForEndItem) {
				oDomRef.classList.add(CSS_CLASS_ONE_LINE);
			} else {
				oDomRef.classList.remove(CSS_CLASS_ONE_LINE);
			}
		};

		/*
		 * Checks whether the visible content fits into a single line or it wraps onto multiple lines.
		 */
		AlignedFlowLayout.prototype.checkItemsWrapping = function(oDomRef) {
			oDomRef = oDomRef || this.getDomRef();

			if (!oDomRef) {
				return false;
			}

			var oFirstItemDomRef = oDomRef.firstElementChild,
				oLastItemDomRef = this.getLastItemDomRef();

			if (!oFirstItemDomRef || !oLastItemDomRef) {
				return false;
			}

			var iFirstItemOffsetTop = oFirstItemDomRef.offsetTop,
				iLastItemOffsetTop = oLastItemDomRef.offsetTop,
				iFirstItemOffsetHeight = oFirstItemDomRef.offsetHeight;

			// detect wrapping (excluding the end item)
			if (iLastItemOffsetTop >= (iFirstItemOffsetTop + iFirstItemOffsetHeight)) {
				return true;
			}

			oLastItemDomRef = this.getDomRef("endItem");

			// detect wrapping (including the end item)
			return !!oLastItemDomRef && (iLastItemOffsetTop >= (iFirstItemOffsetTop + iFirstItemOffsetHeight));
		};

		/*
		 * Gets the parent element's DOM reference of the last content control - if this control and its DOM exist.
		 */
		AlignedFlowLayout.prototype.getLastItemDomRef = function() {
			var aContent = this.getContent(),
				iContentLength = aContent.length;

			if (iContentLength) {

				var oContent = aContent[iContentLength - 1],
					oContentDomRef = oContent.getDomRef();

				if (oContentDomRef) {
					return oContentDomRef.parentElement;
				}
			}

			return null;
		};

		AlignedFlowLayout.prototype.getLastVisibleDomRef = function() {
			return this.getDomRef("endItem") || this.getLastItemDomRef();
		};

		AlignedFlowLayout.prototype.getNumberOfSpacers = function() {
			var iContentLength = this.getContent().length;

			// spacers are only needed when some content is rendered
			if (iContentLength === 0) {
				return 0;
			}

			var iSpacers = iContentLength,
				sMinItemWidth = this.getMinItemWidth(),
				fMinItemWidth;

			// the CSS unit of the minItemWidth control property is in rem
			if (sMinItemWidth.lastIndexOf("rem") !== -1) {
				fMinItemWidth = remToPx(sMinItemWidth);

				// the CSS unit of the minItemWidth control property is in px
			} else if (sMinItemWidth.lastIndexOf("px") !== -1) {
				fMinItemWidth = parseFloat(sMinItemWidth);
			}
			// else, the CSS unit is not in rem or px, in this case a conversion to px is not made and
			// more spacers are rendered (worst case, but unusual in UI5)

			if (fMinItemWidth) {

				// we do not need more spacers than (documentElement.clientWidth / minItemWidth)
				iSpacers = Math.abs(document.documentElement.clientWidth / fMinItemWidth);
			}

			// we do not need more spacers than items
			iSpacers = Math.min(iSpacers, iContentLength - 2);

			// we need at least 1 spacer, to prevent collision of the content with the endContent aggregation
			iSpacers = Math.max(1, iSpacers);
			return Math.floor(iSpacers);
		};

		return AlignedFlowLayout;
}, /* bExport= */ true);
}; // end of sap/ui/layout/AlignedFlowLayout.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.AlignedFlowLayoutRenderer') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare('sap.ui.layout.AlignedFlowLayoutRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/layout/AlignedFlowLayoutRenderer",['./library'],
	function (library) {
		"use strict";

		/**
		 * AlignedFlowLayout renderer.
		 * @namespace
		 */
		var AlignedFlowLayoutRenderer = {};

		/**
		 * CSS class to be applied to the HTML root element of the control.
		 *
		 * @readonly
		 * @const {string}
		 */
		AlignedFlowLayoutRenderer.CSS_CLASS = "sapUiAFLayout";

		/**
		 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
		 *
		 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
		 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
		 */
		AlignedFlowLayoutRenderer.render = function (oRm, oControl) {
			var aContent = oControl.getContent();

			oRm.write("<ul");
			oRm.writeControlData(oControl);
			oRm.addClass(AlignedFlowLayoutRenderer.CSS_CLASS);
			oRm.writeClasses();
			oRm.write(">");

			this.renderItems(oRm, oControl, aContent);
			this.renderEndItem(oRm, oControl);
			this.renderSpacers(oRm, oControl);

			oRm.write("</ul>");
		};

		/**
		 * Renders the items, using the provided {@link sap.ui.core.RenderManager}.
		 * Can be overwritten by subclasses.
		 *
		 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
		 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
		 * @param {sap.ui.core.Control[]} [aContent=oControl.getContent()] The content to be rendered
		 */
		AlignedFlowLayoutRenderer.renderItems = function(oRm, oControl, aContent) {
			aContent = aContent || oControl.getContent();

			for (var i = 0; i < aContent.length; i++) {
				this.renderItem(oRm, oControl, aContent[i]);
			}
		};

		/**
		 * Renders an item, using the provided {@link sap.ui.core.RenderManager}.
		 * Can be overwritten by subclasses.
		 *
		 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
		 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
		 * @param {sap.ui.core.Control} oContent The content to be rendered inside the item
		 */
		AlignedFlowLayoutRenderer.renderItem = function(oRm, oControl, oContent) {
			oRm.write("<li");
			oRm.addClass(AlignedFlowLayoutRenderer.CSS_CLASS + "Item");
			oRm.addStyle("flex-basis", oControl.getMinItemWidth());
			oRm.addStyle("max-width", oControl.getMaxItemWidth());
			oRm.writeClasses();
			oRm.writeStyles();
			oRm.write(">");
			oRm.renderControl(oContent);
			oRm.write("</li>");
		};

		/**
		 * Renders the last item, using the provided {@link sap.ui.core.RenderManager}.
		 * Can be overwritten by subclasses.
		 *
		 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
		 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
		 * @param {sap.ui.core.Control[]} [aEndContent=oControl.getEndContent()] The content to be rendered inside the last item
		 */
		AlignedFlowLayoutRenderer.renderEndItem = function(oRm, oControl, aEndContent) {
			aEndContent = aEndContent || oControl.getEndContent();

			if (aEndContent.length) {
				oRm.write("<li");
				oRm.writeAttribute("id", oControl.getId() + "-endItem");
				oRm.addClass(AlignedFlowLayoutRenderer.CSS_CLASS + "End");

				// if the end item is the only child, do not change the initial main size of a flex item
				if (oControl.getContent().length) {
					oRm.addStyle("flex-basis", oControl.getMinItemWidth());
				}

				oRm.writeClasses();
				oRm.writeStyles();
				oRm.write(">");

				for (var i = 0; i < aEndContent.length; i++) {
					this.renderEndContent(oRm, oControl, aEndContent[i]);
				}

				oRm.write("</li>");
			}
		};

		/**
		 * Renders the content of the last item, using the provided {@link sap.ui.core.RenderManager}.
		 * Can be overwritten by subclasses.
		 *
		 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
		 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
		 * @param {sap.ui.core.Control} oContent The content to be rendered inside the last item
		 */
		AlignedFlowLayoutRenderer.renderEndContent = function(oRm, oControl, oContent) {
			oRm.renderControl(oContent);
		};

		/**
		 * Renders the invisible items, using the provided {@link sap.ui.core.RenderManager}.
		 * Can be overwritten by subclasses.
		 *
		 * now do the trickful - some invisible elements...
		 * add elements to make sure the last row is "full" (has at least as many elements as the first row)
		 * - this ensures these items are not wider than the items above
		 * the highest number of elements are needed when there is just one visible element wrapped to the second row;
		 * first row has then one element less than there are children
		 *
		 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
		 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
		 */
		AlignedFlowLayoutRenderer.renderSpacers = function(oRm, oControl) {
			var iSpacers = oControl.getNumberOfSpacers(),
				sMinItemWidth = oControl.getMinItemWidth(),
				sMaxItemWidth = oControl.getMaxItemWidth(),
				CSS_CLASS = AlignedFlowLayoutRenderer.CSS_CLASS;

			for (var i = 0; i < iSpacers; i++) {
				oRm.write("<li");

				if (i === (iSpacers - 1)) {
					oRm.writeAttribute("id", oControl.getId() + "-last");
				}

				oRm.addClass(CSS_CLASS + "Item");
				oRm.addClass(CSS_CLASS + "Spacer");
				oRm.addStyle("flex-basis", sMinItemWidth);
				oRm.addStyle("max-width", sMaxItemWidth);
				oRm.writeClasses();
				oRm.writeStyles();
				oRm.write("></li>");
			}
		};

		return AlignedFlowLayoutRenderer;
	}, /* bExport= */ true);

}; // end of sap/ui/layout/AlignedFlowLayoutRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.BlockLayout') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare('sap.ui.layout.BlockLayout'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/BlockLayout",['sap/ui/core/Control', './library'],
	function(Control, library) {
		"use strict";

		/**
		 * Constructor for a new BlockLayout.
		 *
		 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
		 * @param {object} [mSettings] Initial settings for the new control
		 *
		 * @class
		 * The BlockLayout is used to display several objects in a section-based manner.
		 * <h3>Overview</h3>
		 * The BlockLayout uses horizontal and vertical subdivisions, and full-width banners to display a set of elements.
		 * By placing pictorial and textual elements side-by-side in different blocks, you can establish a visual connection between blocks and between similar elements.
		 * <h3>Structure</h3>
		 * The BlockLayout comes in five predefined types for background colors:
		 * <ul>
		 * <li>Layout only (default) - a layout scheme and no background colors</li>
		 * <li>Bright - a layout scheme with bright colors</li>
		 * <li>Accent - a layout scheme with four pre-defined color sets</li>
		 * <li>Dashboard - a layout scheme with additional borders and no background colors</li>
		 * <li>Mixed - a layout scheme with a mix of light and dark colors</li>
		 * </ul>
		 * Background colors are attached directly to the blocks of the layout.
		 *
		 * Special full-width sections of the BlockLayout allow horizontal scrolling through a set of blocks.
		 *
		 * <b>Note:</b> With version 1.48 colors can be set for each individual {@link sap.ui.layout.BlockLayoutCell cell}. There are 11 pre-defined color sets, each with 4 different shades.
		 * The main colors of the sets can be changed in Theme Designer. To change the background of a particular cell, set <code>backgroundColorSet</code> (main color)
		 * and <code>backgroundColorShade</code> (shade).
		 *
		 * <h3>Usage</h3>
		 * <h4>When to use</h4>
		 * <ul>
		 * <li>You want to create a catalogue-like page with sections of blocks.</li>
		 * <li>The BlockLayout is intended for developing administrative tools and applications.</li>
		 * </ul>
		 * <h4>When not to use</h4>
		 * <ul>
		 * <li>You want to display properties or features of one content item. Use a {@link sap.uxap.ObjectPage object page} or {@link sap.f.DynamicPage dynamic page} instead.</li>
		 * </ul>
		 * <h3>Responsive Behavior</h3>
		 * <ul>
		 * <li>The breakpoints of the block layout react to the width of the control itself and not to the actual screen size.</li>
		 * <li> On small screens all blocks will wrap to a single scrollable column</li>
		 * </ul>
		 * @extends sap.ui.core.Control
		 *
		 * @author SAP SE
		 * @version 1.48.5
		 *
		 * @constructor
		 * @public
		 * @since 1.34
		 * @alias sap.ui.layout.BlockLayout
		 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
		 */
		var BlockLayout = Control.extend("sap.ui.layout.BlockLayout", { metadata : {

			library : "sap.ui.layout",
			properties : {
				/**
				 * Determines the background used for the Layout
				 * @since 1.42
				 */
				background: { type: "sap.ui.layout.BlockBackgroundType", group: "Appearance", defaultValue: "Default" }

			},
			defaultAggregation : "content",
			aggregations : {
				/**
				 * The Rows to be included in the content of the control
				 */
				content: { type: "sap.ui.layout.BlockLayoutRow", multiple: true }
			}
		}});

		/**
		 * Breakpoints used for the parent container of the Layout, to determine the inner representation of the rows.
		 * @type {{breakPointM: number, breakPointL: number}}
		 */
		BlockLayout.CONSTANTS = {
			breakPointM : 600,
			breakPointL : 1024,
			SIZES: {
				S: 600,  //Phone
				M: 1024, //Tablet
				L: 1440, //Desktop
				XL: null //LargeDesktop
			}
		};

		BlockLayout.prototype.onBeforeRendering = function () {
			this._detachResizeHandler();
		};

		/**
		 * Resize handler is being attached to the control after the rendering
		 */
		BlockLayout.prototype.onAfterRendering = function () {
			this._onParentResize();
		};

		/**
		 * Changes background type
		 *
		 * @param {string} sNewBackground Background's style of type sap.ui.layout.BlockBackgroundType
		 * @returns {sap.ui.layout.BlockLayout} BlockLayout instance. Allows method chaining
		 */
		BlockLayout.prototype.setBackground = function (sNewBackground) {
			var sCurBackground = this.getBackground(),
			// Apply here so if there's an exception the code bellow won't be executed
				oObject = Control.prototype.setProperty.apply(this, ["background"].concat(Array.prototype.slice.call(arguments)));

			if (this.hasStyleClass("sapUiBlockLayoutBackground" + sCurBackground)) {
				this.removeStyleClass("sapUiBlockLayoutBackground" + sCurBackground, true);
			}
			this.addStyleClass("sapUiBlockLayoutBackground" + sNewBackground, true);

			// Invalidate the whole block layout as the background dependencies, row color sets and accent cells should be resolved properly
			this.invalidate();

			return oObject;
		};

		/**
		 * Handler for the parent resize event
		 * @private
		 */
		BlockLayout.prototype._onParentResize = function () {
			var sProp,
				domRef = this.getDomRef(),
				iWidth = domRef.clientWidth,
				mSizes = BlockLayout.CONSTANTS.SIZES;

			this._detachResizeHandler();
			this._removeBreakpointClasses();

			// Put additional styles according to SAP_STANDARD_EXTENDED from sap.ui.Device.media.RANGESETS
			// Not possible to use sap.ui.Device directly as it calculates window size, but here is needed parent's size
			for (sProp in mSizes) {
				if (mSizes.hasOwnProperty(sProp) && (mSizes[sProp] === null || mSizes[sProp] > iWidth)) {
					this.addStyleClass("sapUiBlockLayoutSize" + sProp, true);
					break;
				}
			}

			jQuery.sap.delayedCall(0, this, "_attachResizeHandler");
		};

		/**
		 * Removes all breakpoint classes
		 * @private
		 */
		BlockLayout.prototype._removeBreakpointClasses = function () {
			var mSizes = BlockLayout.CONSTANTS.SIZES;

			for (var prop in mSizes) {
				if (mSizes.hasOwnProperty(prop)) {
					this.removeStyleClass("sapUiBlockLayoutSize" + prop, true);
				}
			}
		};

		/**
		 * Attaches resize handler to the parent
		 * @private
		 */
		BlockLayout.prototype._attachResizeHandler = function () {
			if (!this._parentResizeHandler) {
				this._parentResizeHandler = sap.ui.core.ResizeHandler.register(this, this._onParentResize.bind(this));
			}
		};

		/**
		 * Detaches the parent resize handler
		 * @private
		 */
		BlockLayout.prototype._detachResizeHandler = function () {
			if (this._parentResizeHandler) {
				sap.ui.core.ResizeHandler.deregister(this._parentResizeHandler);
				this._parentResizeHandler = null;
			}
		};

		/**
		 * Detaches the resize handler on exit
		 */
		BlockLayout.prototype.exit = function () {
			this._detachResizeHandler();
		};

		return BlockLayout;

	}, /* bExport= */ true);

}; // end of sap/ui/layout/BlockLayout.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.BlockLayoutCell') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare('sap.ui.layout.BlockLayoutCell'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/BlockLayoutCell",['sap/ui/core/Control', './library', 'sap/ui/core/theming/Parameters'],
	function(Control, library, Parameters) {
		"use strict";

		/**
		 * Constructor for a new BlockLayoutCell.
		 *
		 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
		 * @param {object} [mSettings] Initial settings for the new control
		 *
		 * @class
		 * The BlockLayoutCell is used as an aggregation of the BlockLayoutRow. It contains Controls.
		 * The BlockLayoutCell should be used only as aggregation of the BlockLayoutRow.
		 * @extends sap.ui.core.Control
		 *
		 * @author SAP SE
		 * @version 1.48.5
		 *
		 * @constructor
		 * @public
		 * @since 1.34
		 * @alias sap.ui.layout.BlockLayoutCell
		 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
		 */
		var BlockLayoutCell = Control.extend("sap.ui.layout.BlockLayoutCell", { metadata : {

			library : "sap.ui.layout",
			properties : {
				/**
				 * Defines the title of the cell
				 */
				title: { type: "string", group: "Appearance", defaultValue: null },

				/**
				 * Defines the alignment of the cell title
				 */
				titleAlignment: { type: "sap.ui.core.HorizontalAlign", group: "Appearance", defaultValue: "Begin" },

				/**
				 * Defines the aria level of the title
				 * This information is e.g. used by assistive technologies like screenreaders to create a hierarchical site map for faster navigation.
				 */
				titleLevel: { type: "sap.ui.core.TitleLevel", group: "Appearance", defaultValue: "Auto"},

				/**
				 * Defines the width of the cell. Depending on the context of the cell - whether it's in scrollable,
				 * or non scrollable row, this property is interpreted in two different ways.
				 * If the cell is placed inside a scrollable row - this property defines the width of the cell in
				 * percentages. If no value is provided - the default is 40%.
				 * If the cell is placed inside a non scrollable row - this property defines the grow factor of the cell
				 * compared to the whole row.
				 * <b>For example:</b> If you have 2 cells, each with width of 1, this means that they should be of equal size,
				 * and they need to fill the whole row. This results in 50% width for each cell. If you have 2 cells,
				 * one with width of 1, the other with width of 3, this means that the whole row width is 4, so the first
				 * cell will have a width of 25%, the second - 75%.
				 * According to the visual guidelines, it is suggested that you only use 25%, 50%, 75% or 100% cells in
				 * you applications. For example, 12,5% width is not desirable (1 cell with width 1, and another with width 7)
				 */
				width: { type: "int", group: "Appearance", defaultValue: 0 },
				/**
				 * The Background color set from which the background color will be selected.
				 * By using background colors from the predefined sets your colors could later be customized from the Theme Designer.
				 * <b>Note:</b> backgroundColorSet should be used only in combination with backgroundColorShade.
				 * @since 1.48
				 */
				backgroundColorSet: { type: "sap.ui.layout.BlockLayoutCellColorSet", group: "Appearance" },
				/**
				 * The index of the background color in the color set from which the color will be selected.
				 * By using background colors from the predefined sets your colors could later be customized from the Theme Designer.
				 * <b>Note:</b> backgroundColorShade should be used only in combination with backgroundColorSet.
				 * @since 1.48
				 */
				backgroundColorShade: { type: "sap.ui.layout.BlockLayoutCellColorShade", group: "Appearance" }
			},
			defaultAggregation : "content",
			aggregations : {
				/**
				 * The content to be included inside the cell
				 */
				content: {type : "sap.ui.core.Control", multiple : true, singularName : "content"}

			}
		}});

		/**
		 * When the width is set, the cell needs to notify the parent row if it's in scrollable mode
		 * to update the other cells as well.
		 * @param width of the cell
		 * @returns {BlockLayoutCell}
		 */
		BlockLayoutCell.prototype.setWidth = function (width) {
			this.setProperty("width", width);
			if (!this._getParentRowScrollable()) {
				var parent = this.getParent();
				if (parent) {
					parent._checkGuidelinesAndUpdateCells();
				}
			}
			return this;
		};

		/**
		 * If the theme is changed and the cell has some color applied, we need to invalidate the cell to force rerendering
		 */
		BlockLayoutCell.prototype.onThemeChanged = function () {
			this.invalidate();
		};

		/**
		 * This method is called from the BlockLayoutRow, when a new cell is added, removed, or when a given cell in the row
		 * changes its width. Then the whole row gets updated again.
		 * @private
		 */
		BlockLayoutCell.prototype._clearState = function () {
			this._parentRowScrollable = false;
			this._differentSBreakpointSize = false;
		};

		BlockLayoutCell.prototype._setDifferentSBreakpointSize = function (different, ratio) {
			this._differentSBreakpointSize = different;
			this._widthToRowWidthRatio = ratio;
		};

		BlockLayoutCell.prototype._getDifferentSBreakpointSize = function () {
			return this._differentSBreakpointSize;
		};

		BlockLayoutCell.prototype._getWidthToRowWidthRatio = function () {
			return this._widthToRowWidthRatio;
		};

		BlockLayoutCell.prototype._setParentRowScrollable = function (scrollable) {
			this._parentRowScrollable = scrollable;
		};

		BlockLayoutCell.prototype._getParentRowScrollable = function () {
			return this._parentRowScrollable;
		};

		return BlockLayoutCell;

	}, /* bExport= */ true);

}; // end of sap/ui/layout/BlockLayoutCell.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.BlockLayoutCellRenderer') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare('sap.ui.layout.BlockLayoutCellRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/BlockLayoutCellRenderer",['jquery.sap.global', './library'],
	function(jQuery, library) {
		"use strict";

		var BlockLayoutCellRenderer = {};

		BlockLayoutCellRenderer.render = function (rm, blockLayoutCell) {
			this.startCell(rm, blockLayoutCell);
			this.addContent(rm, blockLayoutCell);
			this.endCell(rm);
		};

		BlockLayoutCellRenderer.startCell = function (oRm, oBlockLayoutCell) {
			var sCellColor = this.getCellColor(oRm, oBlockLayoutCell);

			oRm.write("<div");
			oRm.writeControlData(oBlockLayoutCell);
			oRm.addClass("sapUiBlockLayoutCell");
			sCellColor && oRm.addClass(sCellColor); // Set any of the predefined cell colors

			if (oBlockLayoutCell._getDifferentSBreakpointSize()) {
				this.setDifferentSBreakpointSize(oRm, oBlockLayoutCell._getWidthToRowWidthRatio());
			} else {
				this.setWidth(oRm, oBlockLayoutCell);
			}

			oRm.writeStyles();
			oRm.writeClasses();
			oRm.write(">");
		};

		BlockLayoutCellRenderer.getCellColor = function (oRm, oBlockLayoutCell) {
			var sColorSet = oBlockLayoutCell.getBackgroundColorSet(),
				sColorIndex = oBlockLayoutCell.getBackgroundColorShade();

			if (!sColorSet && !sColorIndex) {
				return "";
			} else if (( sColorSet && !sColorIndex ) || ( !sColorSet && sColorIndex )) { // XOR check. Both values need to be either defined or not defined.
				jQuery.sap.log.warning("Both, backgroundColorSet and backgroundColorShade should be defined. ColoSet is not applied to " + oBlockLayoutCell.getId() + ".");
				return "";
			}

			// Get only the unique part of the string
			sColorSet = sColorSet.replace("ColorSet", "");
			sColorIndex = sColorIndex.replace("Shade", "");

			return "sapUiBlockLayoutCellColor" + sColorSet + sColorIndex;
		};

		BlockLayoutCellRenderer.setDifferentSBreakpointSize = function (rm, widthToRowWidthRatio) {
			switch (widthToRowWidthRatio) {
				case 0.25:
					rm.addClass("sapUiBlockSmallCell");
					break;
				case 0.5:
					rm.addClass("sapUiBlockMediumCell");
					break;
				default: break;
			}
		};

		BlockLayoutCellRenderer.setWidth = function (rm, blockLayoutCell) {
			if (blockLayoutCell._getParentRowScrollable()) {
				var width = blockLayoutCell.getWidth();
				if (width !== 0) {
					rm.addStyle("width", width + "%");
				}
			} else {
				var flex = (blockLayoutCell.getWidth() === 0 ) ? 1 : blockLayoutCell.getWidth();
				this.addFlex(rm, flex);
			}
		};

		BlockLayoutCellRenderer.addFlex = function (rm, flex) {
			rm.addStyle("-webkit-flex", flex);
			rm.addStyle("-ms-flex", flex);
			rm.addStyle("flex", flex);
		};

		BlockLayoutCellRenderer.addTitle = function (rm, blockLayoutCell) {
			if (blockLayoutCell.getTitle()) {
				var alignmentClass = "sapUiBlockCell" + blockLayoutCell.getTitleAlignment(),
					titleClass = "sapUiBlockCellTitle " + alignmentClass;

				// remove bottom margin if cell does not have a content
				if (blockLayoutCell.getContent().length === 0) {
					titleClass += " sapUiBlockCellTitleNoContent";
				}

				var level = blockLayoutCell.getTitleLevel(),
					autoLevel = level === sap.ui.core.TitleLevel.Auto,
					tag = autoLevel ? "h2" : level;

				rm.write("<" + tag + " id='" + this.getTitleId(blockLayoutCell) + "' class='" + titleClass + "'>");
				rm.writeEscaped(blockLayoutCell.getTitle());
				rm.write("</" + tag + ">");
			}
		};

		BlockLayoutCellRenderer.getTitleId = function (blockLayoutCell) {
			return blockLayoutCell.getId() + "-Title";
		};

		BlockLayoutCellRenderer.addContent = function (rm, blockLayoutCell) {
			var content = blockLayoutCell.getContent(),
				contentClass = "sapUiBlockCellContent ";

			if (blockLayoutCell.getTitleAlignment() === "Center") {
				contentClass += "sapUiBlockCellCenteredContent";
			}

			rm.write("<div class='" + contentClass + "' aria-labelledby='" + this.getTitleId(blockLayoutCell) +  "' >");
			this.addTitle(rm, blockLayoutCell);
			content.forEach(rm.renderControl);
			rm.write("</div>");
		};

		BlockLayoutCellRenderer.endCell = function (rm) {
			rm.write("</div>");
		};

		return BlockLayoutCellRenderer;

	}, /* bExport= */ true);

}; // end of sap/ui/layout/BlockLayoutCellRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.BlockLayoutRenderer') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare('sap.ui.layout.BlockLayoutRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/layout/BlockLayoutRenderer",['./library'],
	function (library) {
		"use strict";

		var BlockLayoutRenderer = {};

		BlockLayoutRenderer.render = function (oRm, oBlockLayout) {
			this.startLayout(oRm, oBlockLayout);
			this.addContent(oRm, oBlockLayout);
			this.endLayout(oRm);
		};

		BlockLayoutRenderer.startLayout = function (oRm, oBlockLayout) {
			var backgroundType = oBlockLayout.getBackground();

			oBlockLayout.addStyleClass("sapUiBlockLayoutBackground" + backgroundType);

			oRm.write("<div");
			oRm.writeControlData(oBlockLayout);
			oRm.addClass("sapUiBlockLayout");
			oRm.writeStyles();
			oRm.writeClasses();
			oRm.write(">");
		};

		BlockLayoutRenderer.addContent = function (oRm, blockLayout) {
			var aContent = blockLayout.getContent(),
				oBlockRowType = sap.ui.layout.BlockRowColorSets,
				aTypes = Object.keys(oBlockRowType).map(function (sKey) {
					return oBlockRowType[sKey];
				}),
				iNumTypes = aTypes.length;


			aContent.forEach(function (oBlockRow, iIndex, aRows) {
				var sType = oBlockRow.getRowColorSet() || aTypes[iIndex % iNumTypes], // Get the type or fetch it from the stack
					sClass = "sapUiBlockLayoutBackground" + sType, // Build the CSS class
					oPrevBlockRow = (iIndex && aRows[iIndex - 1]) || null;

				if (oPrevBlockRow && oPrevBlockRow.hasStyleClass(sClass)) {
					oBlockRow.removeStyleClass(sClass);
					sClass += "Inverted";
				}

				if (sClass) {
					oBlockRow.addStyleClass(sClass);
				}

				oRm.renderControl(oBlockRow);
			});
		};

		BlockLayoutRenderer.endLayout = function (oRm) {
			oRm.write("</div>");
		};

		return BlockLayoutRenderer;

	}, /* bExport= */ true);

}; // end of sap/ui/layout/BlockLayoutRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.BlockLayoutRow') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare('sap.ui.layout.BlockLayoutRow'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/BlockLayoutRow",['jquery.sap.global', 'sap/ui/core/Control', './library'],
	function(jQuery, Control, library) {
		"use strict";

		/**
		 * Constructor for a new BlockLayoutRow.
		 *
		 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
		 * @param {object} [mSettings] Initial settings for the new control
		 *
		 * @class
		 * The BlockLayoutRow is used as an aggregation to the BlockLayout. It aggregates Block Layout  cells.
		 * The BlockLayoutRow has 2 rendering modes - scrollable and non scrollable.
		 * @extends sap.ui.core.Control
		 *
		 * @author SAP SE
		 * @version 1.48.5
		 *
		 * @constructor
		 * @public
		 * @since 1.34
		 * @alias sap.ui.layout.BlockLayoutRow
		 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
		 */
		var BlockLayoutRow = Control.extend("sap.ui.layout.BlockLayoutRow", {
			metadata: {

				library: "sap.ui.layout",

				properties: {

					/**
					 * Sets the rendering mode of the BlockLayoutRow to scrollable. In scrollable mode, the cells get
					 * aligned side by side, with horizontal scroll bar for the row.
					 */
					scrollable: {type: "boolean", group: "Appearance", defaultValue: false},

					/**
					 * Defines background type for that row.
					 * There might be several rows with the same type
					 * @since 1.42
					 */
					rowColorSet: {type: "sap.ui.layout.BlockRowColorSets", group: "Appearance"}
				},
				defaultAggregation: "content",
				aggregations: {
					/**
					 * The content cells to be included in the row.
					 */
					content: {type: "sap.ui.layout.BlockLayoutCell", multiple: true, singularName: "content"}
				},
				associations: {
					/**
					 * Cells that would be accented.
					 * *Note:* This association has visual impact only for BlockLayouts with background types "Mixed" and "Accent".
					 *
					 * Mixed: In this type, areas of 25% (on desktop) can have a dark background color. Per section one area can be dark.
					 * Accent: Every section can contain multiple gray blocks, which are used alternately, beginning with the bright one
					 *
					 * @since 1.42
					 */
					accentCells: {type: "sap.ui.layout.BlockLayoutCell", multiple: true, singularName: "accentCell"}
				}
			}
		});

		BlockLayoutRow.CONSTANTS = {
			maxScrollableCellsPerRow : 10,
			minScrollableCellsPerRow: 3,
			guidelineRatios: [0.25, 0.5, 0.75, 1.0]
		};

		/**
		 * Performs guidelines check
		 */
		BlockLayoutRow.prototype.onBeforeRendering = function () {
			this._checkGuidelinesAndUpdateCells();
		};

		/**
		 * Changes dynamically row's color set
		 * Note: this might invalidate cells inside and also change color sets of the other BlockLayoutRow-s below it.
		 *
		 * @param sType
		 * @returns {BlockLayoutRow}
		 * @since 1.42
		 */
		BlockLayoutRow.prototype.setRowColorSet = function (sType) {
			// Apply here so if there's an exception the code bellow won't be executed
			var aArgs = Array.prototype.slice.call(arguments),
				oObject = Control.prototype.setProperty.apply(this, ["rowColorSet"].concat(aArgs)),
				sClassName = "sapUiBlockLayoutBackground" + sType,
				oParent = this.getParent(),
				sBackground = oParent && oParent.getBackground(),
				iThisIndexInParent = oParent && oParent.indexOfAggregation("content", this),
				aParentContent = oParent && oParent.getContent(),
				oPrevBlockRow = (iThisIndexInParent && aParentContent[iThisIndexInParent - 1]) || null,
				oNextBlockRow = (aParentContent && aParentContent[iThisIndexInParent + 1]) || null,
				oBlockRowColorSets = sap.ui.layout.BlockRowColorSets,
				aColorSets = Object.keys(oBlockRowColorSets).map(function (sKey) {
					return oBlockRowColorSets[sKey];
				}),
				bInvertedColorSet = false;

			if (oPrevBlockRow && oPrevBlockRow._hasStyleClass(sClassName, sBackground, bInvertedColorSet, sType)) {
				sClassName += "Inverted";
				bInvertedColorSet = true;
			}

			aColorSets.forEach(function (sCurType) {
				var sColorSetStyle = "sapUiBlockLayoutBackground" + sCurType,
					sInvertedColorSetStyle = sColorSetStyle + "Inverted";

				if (this._hasStyleClass(sColorSetStyle, sBackground, false, sCurType)) {
					this.removeStyleClass(sColorSetStyle, true);
				} else if (this._hasStyleClass(sInvertedColorSetStyle, sBackground, true, sCurType)) {
					this.removeStyleClass(sInvertedColorSetStyle, true);
				}
			}, this);
			this.addStyleClass(sClassName, true);

			// If the next row is of the same type and has the same CSS class, recalculate it and cascade
			if (oNextBlockRow && oNextBlockRow._hasStyleClass(sClassName, sBackground, bInvertedColorSet, sType)) {
				oNextBlockRow.setRowColorSet.apply(oNextBlockRow, aArgs);
			}

			// Invalidate the whole row as the background dependencies, row color sets and accent cells should be resolved properly
			this.invalidate();

			return oObject;
		};

		BlockLayoutRow.prototype.addAccentCell = function (vId) {
			var oObject,
				sId = vId && vId.getId ? vId.getId() : vId,
				args = Array.prototype.slice.call(arguments),
				oBackgrounds = sap.ui.layout.BlockBackgroundType,
				oParent = this.getParent(),
				sLayoutBackground = oParent && (oParent.getBackground() || "");

			oObject = this.addAssociation.apply(this, ["accentCells"].concat(args));

			if (!oParent) {
				return this;
			}

			if ([oBackgrounds.Accent, oBackgrounds.Mixed].indexOf(sLayoutBackground) === -1) {
				jQuery.sap.log.warning(sId + " was not se as accent cell. Accent cells could be set only for 'Accent' and 'Mixed' layout backgrounds.");
				return this;
			}

			if (oBackgrounds.Mixed === sLayoutBackground) {
				this._processMixedCellStyles(sId, this.getContent());
			} else if (oBackgrounds.Accent === sLayoutBackground) {
				this._processAccentCellStyles(this.getAccentCells(), this.getContent());
			}

			return oObject;
		};

		/**
		 * Adjusts accents cells for Mixed background layout
		 *
		 * @param {string} sId
		 * @param {Array} aCells
		 * @returns {sap.ui.layout.BlockLayoutRow}
		 * @private
		 */
		BlockLayoutRow.prototype._processMixedCellStyles = function (sId, aCells) {
			var oParent, bProcessAccentCells;

			if (!aCells || !aCells.length) {
				jQuery.sap.log.warning("No accent cells were set");
				return this;
			}

			oParent = this.getParent();
			bProcessAccentCells = oParent && (oParent.hasStyleClass("sapUiBlockLayoutSizeL") || oParent.hasStyleClass("sapUiBlockLayoutSizeXL"));

			aCells.forEach(function (oCell) {
				var oColorSets, bUseContrast2;

				// Accent only on a cell with 25% width and L, XL sizes
				if (bProcessAccentCells && oCell.getId() === sId && oCell.getWidth() === 1) {
					oCell.addStyleClass("sapContrast").addStyleClass("sapContrastPlus");

					oColorSets = sap.ui.layout.BlockRowColorSets;
					bUseContrast2 = this._hasStyleClass("sapUiBlockLayoutBackground" + oColorSets.ColorSet1, sap.ui.layout.BlockBackgroundType.Mixed, false, oColorSets.ColorSet1) ||
						this._hasStyleClass("sapUiBlockLayoutBackground" + oColorSets.ColorSet1, sap.ui.layout.BlockBackgroundType.Mixed, true, oColorSets.ColorSet1);

					if (bUseContrast2) {
						oCell.addStyleClass("sapUiBlockLayoutBackgroundContrast2");
					}
				} else if ((!bProcessAccentCells || oCell.getId() !== sId) && (oCell.hasStyleClass("sapContrast") || oCell.hasStyleClass("sapContrastPlus"))) {
					oCell.removeStyleClass("sapContrast").removeStyleClass("sapContrastPlus").removeStyleClass("sapUiBlockLayoutBackgroundContrast2");

					this.removeAssociation("accentCells", oCell);

					jQuery.sap.log.warning(sId + " was removed as accent cell. Only one cell at a time could be accented for Mixed layout background");
				}
			}, this);

			return this;
		};

		/**
		 * Adjusts accents cells for Accent background layout
		 *
		 * @param {Array} aAccentCells
		 * @param {Array} aRowCells
		 * @returns {sap.ui.layout.BlockLayoutRow}
		 * @private
		 */
		BlockLayoutRow.prototype._processAccentCellStyles = function (aAccentCells, aRowCells) {
			var oCell, sCellId, sCalculatedStyleClass,
				iIndex = 0,
				iInvertCellColorsModulo = 0,
				aAccentCellsCopy = Array.prototype.slice.call(aAccentCells);

			if (!aAccentCells || !aAccentCells.length) {
				jQuery.sap.log.warning("No accent cells were set");
				return this;
			}

			// Find the index of current accented cell and check if it should be of Accent type 1 OR 2
			for (iIndex = 0; iIndex < aRowCells.length; iIndex++) {
				oCell = aRowCells[iIndex];
				sCellId = oCell.getId();

				if (!aAccentCellsCopy.length) {
					break;
				}

				if (aAccentCellsCopy.indexOf(sCellId) > -1) {
					iInvertCellColorsModulo++;

					sCalculatedStyleClass = "sapUiBlockLayoutBackgroundColorSetGray" + ((iInvertCellColorsModulo % 2) + 1);

					// If the the cell already has the expected class, shouldn't loop further as everything below is already adjusted
					if (oCell.hasStyleClass(sCalculatedStyleClass)) {
						continue;
					}

					// Optimise a bit the next loop iteration
					aAccentCellsCopy.splice(aAccentCellsCopy.indexOf(sCellId), 1);

					oCell
						.removeStyleClass("sapUiBlockLayoutBackgroundColorSetGray1")
						.removeStyleClass("sapUiBlockLayoutBackgroundColorSetGray2")
						.addStyleClass(sCalculatedStyleClass);
				}
			}

			return this;
		};

		BlockLayoutRow.prototype._checkGuidelinesAndUpdateCells = function () {
			var that = this,
				cells = this.getContent(),
				cellRatios = this._calcCellRatios(),
				differentSBreakpoint = this._checkDifferentSBreakpointCase(),
				guidelinesFollowed = this._guidelinesCheck();

			cells.forEach(function (cell, index) {
				cell._clearState();
				if (that.getScrollable()) {
					cell._setParentRowScrollable(true);
				} else if (differentSBreakpoint && guidelinesFollowed) {
					cell._setDifferentSBreakpointSize(true, cellRatios[index]);
				}
			});

			if (!this.getScrollable() && differentSBreakpoint && guidelinesFollowed) {
				this._rowSCase = true;
				this.addStyleClass("sapUiBlockRowSCase", true);
			} else {
				this._rowSCase = false;
				this.removeStyleClass("sapUiBlockRowSCase", true);
			}
		};

		/**
		 * Depending on the scrolling mode, chooses which guidelines check to execute
		 * @private
		 */
		BlockLayoutRow.prototype._guidelinesCheck = function () {
			if (this.getScrollable()) {
				return this._checkScrollableCellsCount();
			} else {
				return this._checkNonScrollableGuidelines();
			}
		};

		/**
		 * Calculates the cell ratio of each cell compared to the total width of the Row
		 * @returns {Array}
		 * @private
		 */
		BlockLayoutRow.prototype._calcCellRatios = function () {
			var cellRatios = [],
				totalRowWidth = 0,
				content = this.getContent();

			content.forEach(function (cell) {
				var cellWidth = (cell.getWidth() == 0 ) ? 1 : cell.getWidth();
				totalRowWidth += cellWidth;
			});

			content.forEach(function (cell) {
				var cellWidth = (cell.getWidth() == 0 ) ? 1 : cell.getWidth(),
					cellRatio = cellWidth / totalRowWidth;

				cellRatios.push(cellRatio);
			});

			return cellRatios;
		};

		/**
		 * For the non scrollable Row - 4 types of cells are allowed - cells with 25% 50% 75% and 100% width
		 * @private
		 */
		BlockLayoutRow.prototype._checkNonScrollableGuidelines = function () {
			var that = this,
				cellRatios = this._calcCellRatios(),
				guidelinesFollowed = true;

			cellRatios.forEach(function (cellRatio) {
				if (!that._isCellRatioIncluded(cellRatio)) {
					guidelinesFollowed = false;
				}
			});

			if (!guidelinesFollowed) {
				jQuery.sap.log.error("In your BlockLayoutRow " + this.getId() + " you are using cell ratios that are " +
				"not recommended in the guidelines. Cells can be with width of 25% 50% 75% or 100% according to the guidelines.");
			}

			return guidelinesFollowed;
		};

		/**
		 * If the row contains (25% 25% 50%) (50% 25% 25%) or (25% 25% 25% 25%) cells
		 * there is special behavior for the S Breakpoint defined, that transforms the row
		 * into two rows: (50% 50% 100%) (100% 50% 50%) or (50% 50% 50% 50%)
		 * @private
		 */
		BlockLayoutRow.prototype._checkDifferentSBreakpointCase = function () {
			var cellRatios = this._calcCellRatios(),
				cells = this.getContent();

			if (cells.length == 4 || (cells.length == 3 && cellRatios[1] != 0.5)) {
				return true;
			}

			return false;
		};

		/**
		 * Checks whether a given cell ratio is included in the guidelines ratios
		 * @param ratio
		 * @returns {boolean}
		 * @private
		 */
		BlockLayoutRow.prototype._isCellRatioIncluded = function (ratio) {
			var guidelineRatios = BlockLayoutRow.CONSTANTS.guidelineRatios;
			for (var i = 0; i < guidelineRatios.length; i++) {
				if (guidelineRatios[i] === ratio) {
					return true;
				}
			}

			return false;
		};

		/**
		 * Checks the total cell count of the row when in scrollable mode.
		 * The row should contain between 3 and 10 cells.
		 * @private
		 */
		BlockLayoutRow.prototype._checkScrollableCellsCount = function () {
			if (this.getContent().length > BlockLayoutRow.CONSTANTS.maxScrollableCellsPerRow) {
				jQuery.sap.log.error("You are using too much cells in your scrollable row: " + this.getId() + "." +
				"This is violating the BlockLayout guidelines, please consider changing your implementation. Max cells allowed: 10.");
				return false;
			}

			if (this.getContent().length < BlockLayoutRow.CONSTANTS.minScrollableCellsPerRow) {
				jQuery.sap.log.error("You are using not enough cells in your scrollable row: " + this.getId() + "." +
				"This is violating the BlockLayout guidelines, please consider changing your implementation. Min cells allowed: 3.");
				return false;
			}

			return true;
		};

		/**
		 * Checks for specific cases when two row color sets share the same colors e.g. Light and Mixed backgrounds
		 *
		 * @param sStyleClass
		 * @param sLayoutBackground
		 * @param bIsColorInverted
		 * @param sType
		 * @returns {boolean}
		 * @private
		 */
		BlockLayoutRow.prototype._hasStyleClass = function (sStyleClass, sLayoutBackground, bIsColorInverted, sType) {
			var oBackgrounds = sap.ui.layout.BlockBackgroundType,
				oColorSets = sap.ui.layout.BlockRowColorSets,
				i, aStyleClasses, aEqualSets;

			// Check if this is NOT Mixed or Light background and just do the normal check
			if ([oBackgrounds.Light, oBackgrounds.Mixed].indexOf(sLayoutBackground) === -1) {
				return this.hasStyleClass(sStyleClass);
			} else if (this.hasStyleClass(sStyleClass)) { // Check if this class is there and don't continue further
				return true;
			}

			// Define array with equal sets
			aEqualSets = [
				[oColorSets.ColorSet1, oColorSets.ColorSet3],
				[oColorSets.ColorSet2, oColorSets.ColorSet4]
			];

			// Find on which index is sType
			for (i = 0; i <= aEqualSets.length; i++) {
				if (aEqualSets[i] && aEqualSets[i].indexOf(sType) > -1) {
					break;
				}
			}

			// If it's not found there, then return false, as if the class was inside, it would fulfill the first hasStyleClass above
			if (!aEqualSets[i]) {
				return false;
			}

			// Build class strings to check against
			aStyleClasses = aEqualSets[i].map(function (sColorSet) {
				return "sapUiBlockLayoutBackground" + sColorSet + (bIsColorInverted ? "Inverted" : "");
			});

			// Check if any of the classes is inside
			return aStyleClasses.some(this.hasStyleClass, this);
		};

		return BlockLayoutRow;

	}, /* bExport= */ true);

}; // end of sap/ui/layout/BlockLayoutRow.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.BlockLayoutRowRenderer') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare('sap.ui.layout.BlockLayoutRowRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/BlockLayoutRowRenderer",['jquery.sap.global', './library'],
	function (jQuery, library) {
		"use strict";

		var BlockLayoutRowRenderer = {};

		BlockLayoutRowRenderer.render = function (oRm, oBlockLayoutRow){
			this.startRow(oRm, oBlockLayoutRow);
			this.renderContent(oRm, oBlockLayoutRow);
			this.endRow(oRm, oBlockLayoutRow);
		};

		BlockLayoutRowRenderer.startRow = function (oRm, oBlockLayoutRow) {
			oRm.write("<div");
			oRm.writeControlData(oBlockLayoutRow);
			oRm.addClass("sapUiBlockLayoutRow");
			this.addRowRenderingClass(oRm, oBlockLayoutRow);
			oRm.writeStyles();
			oRm.writeClasses();
			oRm.write(">");
		};

		BlockLayoutRowRenderer.addRowRenderingClass = function (oRm, oBlockLayoutRow) {
			if (oBlockLayoutRow.getScrollable()) {
				oRm.addClass("sapUiBlockScrollingRow");
				if (oBlockLayoutRow.getContent().length >= 6) {
					oRm.addClass("sapUiBlockScrollingNarrowCells");
				}
			} else {
				oRm.addClass("sapUiBlockHorizontalCellsRow");
			}

			if (oBlockLayoutRow._rowSCase) {
				oRm.addClass("sapUiBlockRowSCase");
			}
		};

		BlockLayoutRowRenderer.renderContent = function (oRm, oBlockLayoutRow) {
			var aContent = oBlockLayoutRow.getContent(),
				scrollable = oBlockLayoutRow.getScrollable(),
				oBackgrounds = sap.ui.layout.BlockBackgroundType,
				sLayoutBackground = oBlockLayoutRow.getParent().getBackground(),
				aAccentedCells = oBlockLayoutRow.getAccentCells();

			aContent.forEach(function (cell) {
				if (scrollable) {
					cell.addStyleClass("sapUiBlockScrollableCell");
				} else {
					cell.addStyleClass("sapUiBlockHorizontalCell");
				}
			});

			switch (sLayoutBackground) {
				case oBackgrounds.Mixed:
					oBlockLayoutRow._processMixedCellStyles(aAccentedCells[0], aContent);
					break;
				case oBackgrounds.Accent :
					oBlockLayoutRow._processAccentCellStyles(aAccentedCells, aContent);
					break;
			}

			aContent.forEach(oRm.renderControl);
		};

		BlockLayoutRowRenderer.endRow = function (oRm) {
			oRm.write("</div>");
		};

		return BlockLayoutRowRenderer;

	}, /* bExport= */ true);

}; // end of sap/ui/layout/BlockLayoutRowRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.FixFlex') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.layout.FixFlex.
jQuery.sap.declare('sap.ui.layout.FixFlex'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.delegate.ScrollEnablement'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/FixFlex",["jquery.sap.global", "sap/ui/core/Control", "sap/ui/core/EnabledPropagator", "sap/ui/core/ResizeHandler",
				"./library", 'sap/ui/core/delegate/ScrollEnablement'],
	function (jQuery, Control, EnabledPropagator,
				ResizeHandler, library, ScrollEnablement) {
		"use strict";

		/**
		 * Constructor for a new FixFlex.
		 *
		 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
		 * @param {object} [mSettings] Initial settings for the new control
		 *
		 * @class
		 * A layout container with a fixed and a flexible part.
		 * <h3>Overview</h3>
		 * The FixFlex control builds the container for a layout with a fixed and a flexible part. The flexible container adapts its size to the fix container.
		 * <h4>Guidelines:</h4>
		 * <ul>
		 * <li>The fix container can hold any number of controls, while the flexible container can hold only one</li>
		 * <li>In order for the FixFlex to stretch properly, the parent element, in which the control is placed, needs to have a specified height or needs to have an absolute position.</li>
		 * <li>Avoid nesting FixFlex in other flexbox-based layout controls ({@link sap.ui.layout.FixFlex FixFlex}, {@link sap.m.FlexBox FlexBox}, Hbox, Vbox). Otherwise, contents may be not accessible or multiple scrollbars can appear.</li>
		 * </ul>
		 * <h3>Structure</h3>
		 * The behavior of the FixFlex is controlled by the following properties:
		 * <ul>
		 * <li><code>fixContentSize</code> - The width/height of the fix part of the control</li>
		 * <li><code>fixFirst</code> - The ordering of the fix and flex part</li>
		 * <li><code>minFlexSize</code> - Scrolling inside the flex part, if its contents are large</li>
		 * <li><code>vertical</code> - Alignment of the FixFlex control</li>
		 * </ul>
		 * <h3>Responsive Behavior</h3>
		 * <ul>
		 * <li>If the child control of the flex or the fix container has width/height bigger than the container itself, the child control will be cropped in the view.</li>
		 * <li>If minFlexSize is set, then a scrollbar is shown in the flexible part, depending on the <code>vertical</code> property.</li>
		 * </ul>
		 * @extends sap.ui.core.Control
		 *
		 * @author SAP SE
		 * @version 1.48.5
		 *
		 * @constructor
		 * @public
		 * @since 1.25.0
		 * @alias sap.ui.layout.FixFlex
		 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
		 */
		var FixFlex = Control.extend("sap.ui.layout.FixFlex", /** @lends sap.ui.layout.FixFlex.prototype */ {
			metadata: {

				library: "sap.ui.layout",
				properties: {

					/**
					 * Determines the direction of the layout of child elements. True for vertical and false for horizontal layout.
					 */
					vertical: {type: "boolean", group: "Appearance", defaultValue: true},

					/**
					 * Determines whether the fixed-size area should be on the beginning/top ( if the value is "true") or end/bottom ( if the value is "false").
					 */
					fixFirst: {type: "boolean", group: "Misc", defaultValue: true},

					/**
					 * Determines the height (if the vertical property is "true") or the width (if the vertical property is "false") of the fixed area. If left at the default value "auto", the fixed-size area will be as large as its content. In this case the content cannot use percentage sizes.
					 */
					fixContentSize: {type: "sap.ui.core.CSSSize", group: "Dimension", defaultValue: "auto"},

					/**
					 * Enables scrolling inside the flexible part. The given size is calculated in "px". If the child control in the flexible part is larger then the available flexible size on the screen and if the available size for the flexible part is smaller or equal to the minFlexSize value, the scroll will be for the entire FixFlex control.
					 *
					 * @since 1.29
					 */
					minFlexSize: {type: "int", defaultValue: 0}
				},
				aggregations: {

					/**
					 * Controls in the fixed part of the layout.
					 */
					fixContent: {type: "sap.ui.core.Control", multiple: true, singularName: "fixContent"},

					/**
					 * Control in the stretching part of the layout.
					 */
					flexContent: {type: "sap.ui.core.Control", multiple: false}
				}
			}
		});


		EnabledPropagator.call(FixFlex.prototype);

		/**
		 * Initializes the control.
		 * @private
		 */
		FixFlex.prototype.init = function () {
			this._scroller = new ScrollEnablement(this, null, {
				scrollContainerId : this.getId()
			});

			this._innerScroller = new ScrollEnablement(this, this.getId() + "-FlexibleContainer", {
				scrollContainerId: this.getId() + "-Flexible"
			});
		};

		/**
		 * Returns the sap.ui.core.ScrollEnablement delegate which is used with this control.
		 * @returns {sap.ui.core.ScrollEnablement}
		 * @private
		 */
		FixFlex.prototype.getScrollDelegate = function () {
			return this._innerScroller;
		};

		/**
		 * Calculate height/width on the flex part when flexbox is not supported
		 *
		 * @private
		 */
		FixFlex.prototype._handlerResizeNoFlexBoxSupport = function () {
			var $Control = this.$(),
				$FixChild,
				$FlexChild;

			// Exit if the container is invisible
			if (!$Control.is(":visible")) {
				return;
			}

			$FixChild = this.$("Fixed");
			$FlexChild = this.$("Flexible");

			// Remove the style attribute from previous calculations
			$FixChild.removeAttr("style");
			$FlexChild.removeAttr("style");

			if (this.getVertical()) {
				if (this.getFixContentSize() !== 'auto') {
					$FixChild.height(this.getFixContentSize());
				}
				$FlexChild.height(Math.floor($Control.height() - $FixChild.height()));
			} else {
				if (this.getFixContentSize() !== 'auto') {
					$FixChild.width(this.getFixContentSize());
					$FlexChild.width(Math.floor($Control.width() - $FixChild.width()));
				} else {
					$FlexChild.width(Math.floor($Control.width() - $FixChild.width()));
					$FixChild.width(Math.floor($FixChild.width()));
				}
			}
		};

		/**
		 * Deregister the control
		 *
		 * @private
		 */
		FixFlex.prototype._deregisterControl = function () {
			// Deregister resize event
			if (this.sResizeListenerNoFlexBoxSupportId) {
				ResizeHandler.deregister(this.sResizeListenerNoFlexBoxSupportId);
				this.sResizeListenerNoFlexBoxSupportId = null;
			}

			// Deregister resize event for Fixed part
			if (this.sResizeListenerNoFlexBoxSupportFixedId) {
				ResizeHandler.deregister(this.sResizeListenerNoFlexBoxSupportFixedId);
				this.sResizeListenerNoFlexBoxSupportFixedId = null;
			}

			// Deregister resize event for FixFlex scrolling
			if (this.sResizeListenerFixFlexScroll) {
				ResizeHandler.deregister(this.sResizeListenerFixFlexScroll);
				this.sResizeListenerFixFlexScroll = null;
			}

			// Deregister resize event for FixFlex scrolling for Flex part
			if (this.sResizeListenerFixFlexScrollFlexPart) {
				ResizeHandler.deregister(this.sResizeListenerFixFlexScrollFlexPart);
				this.sResizeListenerFixFlexScrollFlexPart = null;
			}

			// Deregister resize event for FixFlex flexible container scrolling
			if (this.sResizeListenerFixFlexContainerScroll) {
				ResizeHandler.deregister(this.sResizeListenerFixFlexContainerScroll);
				this.sResizeListenerFixFlexContainerScroll = null;
			}
		};

		/**
		 * Change FixFlex scrolling position
		 * @private
		 */
		FixFlex.prototype._changeScrolling = function () {
			var nFlexSize,
				sDirection,
				$this = this.$(),
				nMinFlexSize = this.getMinFlexSize(),
				bIsVertical = this.getVertical();

			if (bIsVertical) {
				nFlexSize = this.$().height() - this.$("Fixed").height();
				sDirection = "height";
			} else {
				nFlexSize = this.$().width() - this.$("Fixed").width();
				sDirection = "width";
			}

			// Add scrolling for entire FixFlex
			if (nFlexSize <= parseInt(this.getMinFlexSize(), 10)) {
				$this.addClass("sapUiFixFlexScrolling");
				$this.removeClass("sapUiFixFlexInnerScrolling");

				if (bIsVertical) {
					this._scroller.setVertical(true);
					this._innerScroller.setVertical(false);
				} else {
					this._scroller.setHorizontal(true);
					this._innerScroller.setHorizontal(false);
				}

				// BCP Incident-ID: 1570246771
				if (this.$("FlexibleContainer").children().height() > nMinFlexSize) {
					this.$("Flexible").attr("style", "min-" + sDirection + ":" + nMinFlexSize + "px");
				} else {
					// If the child control is smaller then the content,
					// the flexible part need to have set height/width, else the child control can"t resize to max
					this.$("Flexible").attr("style", sDirection + ":" + nMinFlexSize + "px");
				}

			} else { // Add scrolling inside Flexible container

				$this.addClass("sapUiFixFlexInnerScrolling");
				$this.removeClass("sapUiFixFlexScrolling");
				if (bIsVertical) {
					this._scroller.setVertical(false);
					this._innerScroller.setVertical(true);

				} else {
					this._scroller.setHorizontal(false);
					this._innerScroller.setHorizontal(true);
				}

				this._changeFlexibleContainerScroll();

				this.$("Flexible").removeAttr("style");
			}
		};

		/**
		 * Change flexible container scroll
		 * @private
		 */
		FixFlex.prototype._changeFlexibleContainerScroll = function () {

			var $flexibleContainer = this.$("FlexibleContainer"),
				containerHeight = $flexibleContainer.height(),
				childrenHeight = $flexibleContainer.children().height();

			if (containerHeight == childrenHeight){
				return;
			}

			if (containerHeight > childrenHeight) {
				$flexibleContainer.removeClass('sapUiFixFlexFlexibleContainerGrowing');
			} else {
				$flexibleContainer.addClass('sapUiFixFlexFlexibleContainerGrowing');
			}
		};

		/**
		 * Clears the control dependencies.
		 * @private
		 */
		FixFlex.prototype.exit = function () {
			this._deregisterControl();

			if (this._scroller) {
				this._scroller.destroy();
				this._scroller = null;
			}

			if (this._innerScroller) {
				this._innerScroller.destroy();
				this._innerScroller = null;
			}
		};

		/**
		 * Called before the control is rendered.
		 * @private
		 */
		FixFlex.prototype.onBeforeRendering = function () {
			var oScroller = this._scroller,
				oInnerScroller = this._innerScroller,
				bScrolling = this.getMinFlexSize() != 0;

			this._deregisterControl();

			oScroller.setVertical(false);
			oScroller.setHorizontal(false);

			oInnerScroller.setVertical(bScrolling);
			oInnerScroller.setHorizontal(bScrolling);
		};

		/**
		 * Called after the control is rendered.
		 * @private
		 */
		FixFlex.prototype.onAfterRendering = function () {
			// Fallback for older browsers
			if (!jQuery.support.hasFlexBoxSupport) {
				this.sResizeListenerNoFlexBoxSupportFixedId = ResizeHandler.register(this.getDomRef("Fixed"), jQuery.proxy(this._handlerResizeNoFlexBoxSupport, this));
				this.sResizeListenerNoFlexBoxSupportId = ResizeHandler.register(this.getDomRef(), jQuery.proxy(this._handlerResizeNoFlexBoxSupport, this));
				this._handlerResizeNoFlexBoxSupport();
			}

			// Add handler for FixFlex scrolling option
			if (this.getMinFlexSize() !== 0) {
				this.sResizeListenerFixFlexScroll = ResizeHandler.register(this.getDomRef(), jQuery.proxy(this._changeScrolling, this));
				this.sResizeListenerFixFlexScrollFlexPart = ResizeHandler.register(this.getDomRef("Fixed"), jQuery.proxy(this._changeScrolling, this));

				var flexibleContainerChildDomRef = this.$("FlexibleContainer").children()[0];
				if (flexibleContainerChildDomRef) {
					this.sResizeListenerFixFlexContainerScroll = ResizeHandler.register(flexibleContainerChildDomRef, jQuery.proxy(this._changeFlexibleContainerScroll, this));
				}

				this._changeScrolling();
			}
		};

		return FixFlex;

	}, /* bExport= */ true);

}; // end of sap/ui/layout/FixFlex.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.Grid') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.layout.Grid.
jQuery.sap.declare('sap.ui.layout.Grid'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/Grid",['jquery.sap.global', 'sap/ui/core/Control', './library'],
	function(jQuery, Control, library) {
	"use strict";



	/**
	 * Constructor for a new Grid.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * The Grid control is a layout which positions its child controls in a 12 column flow layout. Its children can be specified to take on a variable amount of columns depending on available screen size. With this control it is possible to achieve flexible layouts and line-breaks for extra large-, large-, medium- and small-sized screens, such as large desktop, desktop, tablet, and mobile. The Grid control's width can be percentage- or pixel-based and the spacing between its columns can be set to various pre-defined values.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.48.5
	 *
	 * @constructor
	 * @public
	 * @since 1.15.0
	 * @alias sap.ui.layout.Grid
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var Grid = Control.extend("sap.ui.layout.Grid", /** @lends sap.ui.layout.Grid.prototype */ { metadata : {

		library : "sap.ui.layout",
		properties : {

			/**
			 * Optional. Width of the Grid. If not specified, then 100%.
			 */
			width : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},

			/**
			 * Optional. Vertical spacing between the rows in the Grid. In rem, allowed values are 0, 0.5, 1 and 2.
			 */
			vSpacing : {type : "float", group : "Dimension", defaultValue : 1},

			/**
			 * Optional. Horizontal spacing between the content in the Grid. In rem, allowed values are 0, 0.5 , 1 or 2.
			 */
			hSpacing : {type : "float", group : "Dimension", defaultValue : 1},

			/**
			 * Optional. Position of the Grid in the window or surrounding container. Possible values are "Center", "Left" and "Right".
			 */
			position : {type : "sap.ui.layout.GridPosition", group : "Dimension", defaultValue : "Left"},

			/**
			 * Optional. A string type that represents Grid's default span values for large, medium and small screens for the whole Grid. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: "L2 M4 S6", "M12", "s10" or "l4 m4". Note that the parameters has to be provided in the order large medium small.
			 */
			defaultSpan : {type : "sap.ui.layout.GridSpan", group : "Behavior", defaultValue : "XL3 L3 M6 S12"},

			/**
			 * Optional. Defines default for the whole Grid numbers of empty columns before the current span begins. It can be defined for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 0 to 11 that the container has to take, for example: "L2 M4 S6", "M11", "s10" or "l4 m4". Note that the parameters has to be provided in the order large medium small.
			 */
			defaultIndent : {type : "sap.ui.layout.GridIndent", group : "Behavior", defaultValue : "XL0 L0 M0 S0"},

			/**
			 * If true then not the media Query ( device screen size), but the size of the container surrounding the grid defines the current range (large, medium or small).
			 */
			containerQuery : {type : "boolean", group : "Behavior", defaultValue : false}
		},
		defaultAggregation : "content",
		aggregations : {

			/**
			 * Controls that are placed into Grid layout.
			 */
			content : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
		},
		designTime: true
	}});

	/**
	 * This file defines behavior for the control
	 */
	(function() {

		Grid.prototype.init = function() {
			this._iBreakPointTablet = sap.ui.Device.media._predefinedRangeSets[sap.ui.Device.media.RANGESETS.SAP_STANDARD_EXTENDED].points[0];
			this._iBreakPointDesktop = sap.ui.Device.media._predefinedRangeSets[sap.ui.Device.media.RANGESETS.SAP_STANDARD_EXTENDED].points[1];
			this._iBreakPointLargeDesktop = sap.ui.Device.media._predefinedRangeSets[sap.ui.Device.media.RANGESETS.SAP_STANDARD_EXTENDED].points[2];

			// Backward compatibility - if no any settings for XL - the settings for L are used
			this._indentXLChanged = false;
			this._spanXLChanged = false;
		};

		/**
		 * Used for after-rendering initialization.
		 *
		 * @private
		 */
		Grid.prototype.onAfterRendering = function() {
			if (this.getContainerQuery()) {
				this._sContainerResizeListener = sap.ui.core.ResizeHandler.register(this, jQuery.proxy(this._onParentResize, this));
				this._onParentResize();
			} else {
				this._attachMediaContainerWidthChange(this._handleMediaChange, this, sap.ui.Device.media.RANGESETS.SAP_STANDARD_EXTENDED);
			}
		};

		Grid.prototype.onBeforeRendering = function() {
			// Cleanup resize event registration before re-rendering
			this._cleanup();
		};

		Grid.prototype.exit = function() {
			// Cleanup resize event registration on exit
			this._cleanup();
		};

		/**
		 * Clean up the control.
		 *
		 * @private
		 */
		Grid.prototype._cleanup = function() {
			// Cleanup resize event registration
			if (this._sContainerResizeListener) {
				sap.ui.core.ResizeHandler.deregister(this._sContainerResizeListener);
				this._sContainerResizeListener = null;
			}

			// Device Media Change handler
			this._detachMediaContainerWidthChange(this._handleMediaChange, this, sap.ui.Device.media.RANGESETS.SAP_STANDARD_EXTENDED);
		};

		Grid.prototype._handleMediaChange  = function(oParams) {
			this._toggleClass(oParams.name);
		};

		Grid.prototype._setBreakPointTablet = function( breakPoint) {
			this._iBreakPointTablet = breakPoint;
		};

		Grid.prototype._setBreakPointDesktop = function( breakPoint) {
			this._iBreakPointDesktop = breakPoint;
		};

		Grid.prototype._setBreakPointLargeDesktop = function( breakPoint) {
			this._iBreakPointLargeDesktop = breakPoint;
		};

		Grid.prototype.setDefaultIndent = function( sDefaultIndent) {
			if (/XL/gi.test(sDefaultIndent)) {
				this._setIndentXLChanged(true);
			}
			return this.setProperty("defaultIndent", sDefaultIndent);
		};

		Grid.prototype._setIndentXLChanged = function( bChanged) {
			this._indentXLChanged = bChanged;
		};

		Grid.prototype._getIndentXLChanged = function() {
			return this._indentXLChanged;
		};


		Grid.prototype.setDefaultSpan = function( sDefaultSpan) {
			if (/XL/gi.test(sDefaultSpan)) {
				this._setSpanXLChanged(true);
			}
			return this.setProperty("defaultSpan", sDefaultSpan);
		};

		Grid.prototype._setSpanXLChanged = function( bChanged) {
			this._spanXLChanged = bChanged;
		};

		Grid.prototype._getSpanXLChanged = function() {
			return this._spanXLChanged;
		};

		Grid.prototype._onParentResize = function() {
			var oDomRef = this.getDomRef();
			// Prove if Dom reference exist, and if not - clean up the references.
			if (!oDomRef) {
				this._cleanup();
				return;
			}

			if (!jQuery(oDomRef).is(":visible")) {
				return;
			}

			var iCntWidth = oDomRef.clientWidth;
			if (iCntWidth <= this._iBreakPointTablet) {
				this._toggleClass("Phone");
			} else if ((iCntWidth > this._iBreakPointTablet) && (iCntWidth <= this._iBreakPointDesktop)) {
				this._toggleClass("Tablet");
			} else if ((iCntWidth > this._iBreakPointDesktop) && (iCntWidth <= this._iBreakPointLargeDesktop)) {
				this._toggleClass("Desktop");
			} else {
				this._toggleClass("LargeDesktop");
			}
		};


		Grid.prototype._toggleClass = function(sMedia) {
			var $DomRef = this.$();
			if (!$DomRef) {
				return;
			}

			if ($DomRef.hasClass("sapUiRespGridMedia-Std-" + sMedia)) {
				return;
			}

			$DomRef.toggleClass("sapUiRespGridMedia-Std-" + sMedia, true);
			if (sMedia === "Phone") {
				$DomRef.toggleClass("sapUiRespGridMedia-Std-Desktop", false).toggleClass("sapUiRespGridMedia-Std-Tablet", false).toggleClass("sapUiRespGridMedia-Std-LargeDesktop", false);
			} else if (sMedia === "Tablet") {
				$DomRef.toggleClass("sapUiRespGridMedia-Std-Desktop", false).toggleClass("sapUiRespGridMedia-Std-Phone", false).toggleClass("sapUiRespGridMedia-Std-LargeDesktop", false);
			} else if (sMedia === "LargeDesktop") {
				$DomRef.toggleClass("sapUiRespGridMedia-Std-Desktop", false).toggleClass("sapUiRespGridMedia-Std-Phone", false).toggleClass("sapUiRespGridMedia-Std-Tablet", false);
			} else {
				$DomRef.toggleClass("sapUiRespGridMedia-Std-Phone", false).toggleClass("sapUiRespGridMedia-Std-Tablet", false).toggleClass("sapUiRespGridMedia-Std-LargeDesktop", false);
			}

			this.fireEvent("mediaChanged", {media: sMedia});
		};


		/*
	     * Get span information for the Control
	     * @param {sap.ui.core.Control} Control instance
	     * @return {Object} Grid layout data
	     * @private
	     */
		Grid.prototype._getLayoutDataForControl = function(oControl) {
			var oLayoutData = oControl.getLayoutData();

			if (!oLayoutData) {
				return undefined;
			} else if (oLayoutData instanceof sap.ui.layout.GridData) {
				return oLayoutData;
			} else if (oLayoutData.getMetadata().getName() == "sap.ui.core.VariantLayoutData") {
				// multiple LayoutData available - search here
				var aLayoutData = oLayoutData.getMultipleLayoutData();
				for ( var i = 0; i < aLayoutData.length; i++) {
					var oLayoutData2 = aLayoutData[i];
					if (oLayoutData2 instanceof sap.ui.layout.GridData) {
						return oLayoutData2;
					}
				}
			}
		};

		/*
		 * If LayoutData is changed on one inner control, the whole grid needs to re-render
		 * because it may influence other rows and columns
		 */
		Grid.prototype.onLayoutDataChange = function(oEvent){
			if (this.getDomRef()) {
				// only if already rendered
				this.invalidate();
			}
		};

		/**
		 * Gets the role used for accessibility
		 * Set by the Form control if Grid represents a FormContainer
		 * @return {string} sRole accessibility role
		 * @since 1.28.0
		 * @private
		 */
		Grid.prototype._getAccessibleRole = function() {

			return null;

		};

		/**
		 * @see sap.ui.core.Control#getAccessibilityInfo
		 * @protected
		 */
		Grid.prototype.getAccessibilityInfo = function() {
			return {children: this.getContent()};
		};

	}());


	return Grid;

}, /* bExport= */ true);

}; // end of sap/ui/layout/Grid.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.GridData') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.layout.GridData.
jQuery.sap.declare('sap.ui.layout.GridData'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.LayoutData'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/GridData",['jquery.sap.global', 'sap/ui/core/LayoutData', './library'],
	function(jQuery, LayoutData, library) {
	"use strict";



	/**
	 * Constructor for a new GridData.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Grid layout data
	 * @extends sap.ui.core.LayoutData
	 *
	 * @author SAP SE
	 * @version 1.48.5
	 *
	 * @constructor
	 * @public
	 * @since 1.15.0
	 * @alias sap.ui.layout.GridData
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var GridData = LayoutData.extend("sap.ui.layout.GridData", /** @lends sap.ui.layout.GridData.prototype */ { metadata : {

		library : "sap.ui.layout",
		properties : {

			/**
			 * A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: "L2 M4 S6", "M12", "s10" or "l4 m4". Note that the parameters has to be provided in the order large medium small.
			 */
			span : {type : "sap.ui.layout.GridSpan", group : "Behavior", defaultValue : null},

			/**
			 * Optional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter "span".
			 */
			spanXL : {type : "int", group : "Behavior", defaultValue : null},

			/**
			 * Optional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter "span".
			 */
			spanL : {type : "int", group : "Behavior", defaultValue : null},

			/**
			 * Optional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter "span".
			 */
			spanM : {type : "int", group : "Behavior", defaultValue : null},

			/**
			 * Optional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter "span".
			 */
			spanS : {type : "int", group : "Behavior", defaultValue : null},

			/**
			 * A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: "L2 M4 S6", "M12", "s10" or "l4 m4". Note that the parameters has to be provided in the order large medium small.
			 */
			indent : {type : "sap.ui.layout.GridIndent", group : "Behavior", defaultValue : null},

			/**
			 * Optional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter "indent".
			 */
			indentXL : {type : "int", group : "Behavior", defaultValue : null},

			/**
			 * Optional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter "indent".
			 */
			indentL : {type : "int", group : "Behavior", defaultValue : null},

			/**
			 * Optional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter "indent".
			 */
			indentM : {type : "int", group : "Behavior", defaultValue : null},

			/**
			 * Optional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter "indent".
			 */
			indentS : {type : "int", group : "Behavior", defaultValue : null},

			/**
			 * Defines if this Control is visible on XL - extra Large screens.
			 */
			visibleXL : {type : "boolean", group : "Behavior", defaultValue : true},

			/**
			 * Defines if this Control is visible on Large screens.
			 */
			visibleL : {type : "boolean", group : "Behavior", defaultValue : true},

			/**
			 * Defines if this Control is visible on Medium size screens.
			 */
			visibleM : {type : "boolean", group : "Behavior", defaultValue : true},

			/**
			 * Defines if this Control is visible on small screens.
			 */
			visibleS : {type : "boolean", group : "Behavior", defaultValue : true},

			/**
			 * Optional. Moves a cell backwards so many columns as specified.
			 */
			moveBackwards : {type : "sap.ui.layout.GridIndent", group : "Misc", defaultValue : null},

			/**
			 * Optional. Moves a cell forwards so many columns as specified.
			 */
			moveForward : {type : "sap.ui.layout.GridIndent", group : "Misc", defaultValue : null},

			/**
			 * Optional. If this property is set to true, the control on all-size screens causes a line break within the Grid and becomes the first within the next line.
			 */
			linebreak : {type : "boolean", group : "Misc", defaultValue : false},

			/**
			 * Optional. If this property is set to true, the control on extra large screens causes a line break within the Grid and becomes the first within the next line.
			 */
			linebreakXL : {type : "boolean", group : "Misc", defaultValue : false},

			/**
			 * Optional. If this property is set to true, the control on large screens causes a line break within the Grid and becomes the first within the next line.
			 */
			linebreakL : {type : "boolean", group : "Misc", defaultValue : false},

			/**
			 * Optional. If this property is set to true, the control on medium sized screens causes a line break within the Grid and becomes the first within the next line.
			 */
			linebreakM : {type : "boolean", group : "Misc", defaultValue : false},

			/**
			 * Optional. If this property is set to true, the control on small screens causes a line break within the Grid and becomes the first within the next line.
			 */
			linebreakS : {type : "boolean", group : "Misc", defaultValue : false},

			/**
			 * Deprecated. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter "span".
			 * @deprecated Since version 1.17.1.
			 * Use spanL instead.
			 */
			spanLarge : {type : "int", group : "Behavior", defaultValue : null, deprecated: true},

			/**
			 * Deprecated. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter "span".
			 * @deprecated Since version 1.17.1.
			 * Use spanM instead.
			 */
			spanMedium : {type : "int", group : "Behavior", defaultValue : null, deprecated: true},

			/**
			 * Deprecated. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter "span".
			 * @deprecated Since version 1.17.1.
			 * Use spanS instead.
			 */
			spanSmall : {type : "int", group : "Behavior", defaultValue : null, deprecated: true},

			/**
			 * Deprecated. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter "indent".
			 * @deprecated Since version 1.17.1.
			 * Use indentL instead.
			 */
			indentLarge : {type : "int", group : "Behavior", defaultValue : null, deprecated: true},

			/**
			 * Deprecated. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter "indent".
			 * @deprecated Since version 1.17.1.
			 * Use indentM instead.
			 */
			indentMedium : {type : "int", group : "Behavior", defaultValue : null, deprecated: true},

			/**
			 * Deprecated. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter "indent".
			 * @deprecated Since version 1.17.1.
			 * Use indentS instead.
			 */
			indentSmall : {type : "int", group : "Behavior", defaultValue : null, deprecated: true},

			/**
			 * Deprecated. Defines if this Control is visible on Large screens.
			 * @deprecated Since version 1.17.1.
			 * Use visibleL instead.
			 */
			visibleOnLarge : {type : "boolean", group : "Behavior", defaultValue : true, deprecated: true},

			/**
			 * Deprecated. Defines if this Control is visible on Medium size screens.
			 * @deprecated Since version 1.17.1.
			 * Use visibleM instead.
			 */
			visibleOnMedium : {type : "boolean", group : "Behavior", defaultValue : true, deprecated: true},

			/**
			 * Deprecated. Defines if this Control is visible on small screens.
			 * @deprecated Since version 1.17.1.
			 * Use visibleS instead.
			 */
			visibleOnSmall : {type : "boolean", group : "Behavior", defaultValue : true, deprecated: true}
		}
	}});

	/**
	 * This file defines behavior for the control
	 */
	(function() {

		GridData.prototype._setStylesInternal = function(sStyles) {
			if (sStyles && sStyles.length > 0) {
				this._sStylesInternal = sStyles;
			} else {
				this._sStylesInternal = undefined;
			}
		};

		/*
		 * Get span information for the large screens
		 * @return {int} the value of the span
		 * @private
		 */
		GridData.prototype._getEffectiveSpanXLarge = function() {

			var iSpan = this.getSpanXL();
			if (iSpan && (iSpan > 0) && (iSpan < 13)) {
				return iSpan;
			}

			var SPANPATTERN = /XL([1-9]|1[0-2])(?:\s|$)/i;

			var aSpan = SPANPATTERN.exec(this.getSpan());

			if (aSpan) {
				var span = aSpan[0];
				if (span) {
					span = span.toUpperCase();
					if (span.substr(0,2) === "XL") {
						return parseInt(span.substr(2), 10);
					}
				}
			}
			return undefined;
		};


		/*
		 * Get span information for the large screens
		 * @return {int} the value of the span
		 * @private
		 */
		GridData.prototype._getEffectiveSpanLarge = function() {

			var iSpan = this.getSpanL();
			if (iSpan && (iSpan > 0) && (iSpan < 13)) {
				return iSpan;
			}

			var SPANPATTERN = /\bL([1-9]|1[0-2])(?:\s|$)/i;

			var aSpan = SPANPATTERN.exec(this.getSpan());

			if (aSpan) {
				var span = aSpan[0];
				if (span) {
					span = span.toUpperCase();
					if (span.substr(0,1) === "L") {
						return parseInt(span.substr(1), 10);
					}
				}
			}
			return undefined;
		};

		/*
		 * Get span information for the medium screens
		 * @return {int} the value of the span
		 * @private
		 */
		GridData.prototype._getEffectiveSpanMedium = function() {
			var iSpan = this.getSpanM();
			if (iSpan && (iSpan > 0) && (iSpan < 13)) {
				return iSpan;
			}

			var SPANPATTERN = /M([1-9]|1[0-2])(?:\s|$)/i;

			var aSpan = SPANPATTERN.exec(this.getSpan());

			if (aSpan) {
				var span = aSpan[0];
				if (span) {
					span = span.toUpperCase();
					if (span.substr(0,1) === "M") {
						return parseInt(span.substr(1), 10);
					}
				}
			}
			return undefined;
		};

		/*
		 * Get span information for the small screens
		 * @return {int} the value of the span
		 * @private
		 */
		GridData.prototype._getEffectiveSpanSmall = function() {
			var iSpan = this.getSpanS();
			if (iSpan && (iSpan > 0) && (iSpan < 13)) {
				return iSpan;
			}


			var SPANPATTERN = /S([1-9]|1[0-2])(?:\s|$)/i;

			var aSpan = SPANPATTERN.exec(this.getSpan());

			if (aSpan) {
				var span = aSpan[0];
				if (span) {
					span = span.toUpperCase();
					if (span.substr(0,1) === "S") {
						return parseInt(span.substr(1), 10);
					}
				}
			}
			return undefined;
		};

		GridData.prototype.init = function() {
			// Identifier for explicit changed line break property for XL size
			this._bLinebreakXLChanged = false;
		};

		// Finds out if the line break for XL was explicitly set
		GridData.prototype.setLinebreakXL = function(bLinebreak) {
			//set property XL
			this.setProperty("linebreakXL", bLinebreak);
			this._bLinebreakXLChanged = true;
			return this;
		};

		// Internal function. Informs the Grid Renderer if the line break property for XL size was changed explicitly
		GridData.prototype._getLinebreakXLChanged = function() {
			return this._bLinebreakXLChanged;
		};

		// Deprecated properties handling
		//Setter
		GridData.prototype.setSpanLarge = function(iSpan) {
			this.setSpanL(iSpan);
			jQuery.sap.log.warning("Deprecated property spanLarge is used, please use spanL instead.");
			return this;
		};

		GridData.prototype.setSpanMedium = function(iSpan) {
			jQuery.sap.log.warning("Deprecated property spanMedium is used, please use spanM instead.");
			return this.setSpanM(iSpan);
		};

		GridData.prototype.setSpanSmall = function(iSpan) {
			jQuery.sap.log.warning("Deprecated property spanSmall is used, please use spanS instead.");
			return this.setSpanS(iSpan);
		};

		GridData.prototype.setIndentLarge = function(iIndent) {
			jQuery.sap.log.warning("Deprecated property indentLarge is used, please use indentL instead.");
			return this.setIndentL(iIndent);
		};

		GridData.prototype.setIndentMedium = function(iIndent) {
			jQuery.sap.log.warning("Deprecated property indentMedium is used, please use indentM instead.");
			return this.setIndentM(iIndent);
		};

		GridData.prototype.setIndentSmall = function(iIndent) {
			jQuery.sap.log.warning("Deprecated property indentSmall is used, please use indentS instead.");
			return this.setIndentS(iIndent);
		};

		GridData.prototype.setVisibleOnLarge = function(bVisible) {
			jQuery.sap.log.warning("Deprecated property visibleOnLarge is used, please use visibleL instead.");
			return this.setVisibleL(bVisible);
		};

		GridData.prototype.setVisibleOnMedium = function(bVisible) {
			jQuery.sap.log.warning("Deprecated property visibleOnMedium is used, please use visibleM instead.");
			return this.setVisibleM(bVisible);
		};

		GridData.prototype.setVisibleOnSmall = function(bVisible) {
			jQuery.sap.log.warning("Deprecated property visibleOnSmall is used, please use visibleS instead.");
			return this.setVisibleS(bVisible);
		};


		// Getter
		GridData.prototype.getSpanLarge = function() {
			jQuery.sap.log.warning("Deprecated property spanLarge is used, please use spanL instead.");
			return this.getSpanL();
		};

		GridData.prototype.getSpanMedium = function() {
			jQuery.sap.log.warning("Deprecated property spanMedium is used, please use spanM instead.");
			return this.getSpanM();
		};

		GridData.prototype.getSpanSmall = function() {
			jQuery.sap.log.warning("Deprecated property spanSmall is used, please use spanS instead.");
			return this.getSpanS();
		};

		GridData.prototype.getIndentLarge = function() {
			jQuery.sap.log.warning("Deprecated property indentLarge is used, please use indentL instead.");
			return this.getIndentL();
		};

		GridData.prototype.getIndentMedium = function() {
			jQuery.sap.log.warning("Deprecated property indentMedium is used, please use indentM instead.");
			return this.getIndentM();
		};

		GridData.prototype.getIndentSmall = function() {
			jQuery.sap.log.warning("Deprecated property indentSmall is used, please use indentS instead.");
			return this.getIndentS();
		};

		GridData.prototype.getVisibleOnLarge = function() {
			jQuery.sap.log.warning("Deprecated property visibleOnLarge is used, please use visibleL instead.");
			return this.getVisibleL();
		};

		GridData.prototype.getVisibleOnMedium = function() {
			jQuery.sap.log.warning("Deprecated property visibleOnMedium is used, please use visibleM instead.");
			return this.getVisibleM();
		};

		GridData.prototype.getVisibleOnSmall = function() {
			jQuery.sap.log.warning("Deprecated property visibleOnSmall is used, please use visibleS instead.");
			return this.getVisibleS();
		};

	}());


	return GridData;

}, /* bExport= */ true);

}; // end of sap/ui/layout/GridData.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.HorizontalLayout') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.layout.HorizontalLayout.
jQuery.sap.declare('sap.ui.layout.HorizontalLayout'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/HorizontalLayout",['jquery.sap.global', 'sap/ui/core/Control', './library'],
	function(jQuery, Control, library) {
	"use strict";



	/**
	 * Constructor for a new HorizontalLayout.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * A layout that provides support for horizontal alignment of controls
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.48.5
	 *
	 * @constructor
	 * @public
	 * @since 1.16.0
	 * @alias sap.ui.layout.HorizontalLayout
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var HorizontalLayout = Control.extend("sap.ui.layout.HorizontalLayout", /** @lends sap.ui.layout.HorizontalLayout.prototype */ { metadata : {

		library : "sap.ui.layout",
		properties : {

			/**
			 * Specifies whether the content inside the Layout shall be line-wrapped in the case that there is less horizontal space available than required.
			 */
			allowWrapping : {type : "boolean", group : "Misc", defaultValue : false}
		},
		defaultAggregation : "content",
		aggregations : {

			/**
			 * The controls inside this layout
			 */
			content : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
		},
		designTime: true
	}});

	/**
	 * @see sap.ui.core.Control#getAccessibilityInfo
	 * @protected
	 */
	HorizontalLayout.prototype.getAccessibilityInfo = function() {
		return {children: this.getContent()};

	};

	return HorizontalLayout;

}, /* bExport= */ true);

}; // end of sap/ui/layout/HorizontalLayout.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.ResponsiveFlowLayoutData') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.layout.ResponsiveFlowLayoutData.
jQuery.sap.declare('sap.ui.layout.ResponsiveFlowLayoutData'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.LayoutData'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/ResponsiveFlowLayoutData",['jquery.sap.global', 'sap/ui/core/LayoutData', './library'],
	function(jQuery, LayoutData, library) {
	"use strict";



	/**
	 * Constructor for a new ResponsiveFlowLayoutData.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * This is a LayoutData element that can be added to a control if this control is used within a ResponsiveFlowLayout.
	 * @extends sap.ui.core.LayoutData
	 *
	 * @author SAP SE
	 * @version 1.48.5
	 *
	 * @constructor
	 * @public
	 * @since 1.16.0
	 * @alias sap.ui.layout.ResponsiveFlowLayoutData
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ResponsiveFlowLayoutData = LayoutData.extend("sap.ui.layout.ResponsiveFlowLayoutData", /** @lends sap.ui.layout.ResponsiveFlowLayoutData.prototype */ { metadata : {

		library : "sap.ui.layout",
		properties : {

			/**
			 * Defines the minimal size in px of a ResponsiveFlowLayout element. The element will be shrunk down to this value.
			 */
			minWidth : {type : "int", group : "Misc", defaultValue : 100},

			/**
			 * Defines the weight of the element, that influences the resulting width. If there are several elements within a row of the ResponsiveFlowLayout, each element could have another weight. The bigger the weight of a single element, the wider it will be stretched, i.e. a bigger weight results in a larger width.
			 */
			weight : {type : "int", group : "Misc", defaultValue : 1},

			/**
			 * If this property is set, the control in which the LayoutData is added, will always cause a line break within the ResponsiveFlowLayout.
			 */
			linebreak : {type : "boolean", group : "Misc", defaultValue : false},

			/**
			 * Prevents any margin of the element if set to false.
			 */
			margin : {type : "boolean", group : "Misc", defaultValue : true},

			/**
			 * Shows if an element can be wrapped into a new row. If this value is set to false, the min-width will be set to 0 and the wrapping is up to the previous element.
			 */
			linebreakable : {type : "boolean", group : "Misc", defaultValue : true}
		}
	}});

	ResponsiveFlowLayoutData.MIN_WIDTH = 100;
	ResponsiveFlowLayoutData.WEIGHT = 1;
	ResponsiveFlowLayoutData.LINEBREAK = false;
	ResponsiveFlowLayoutData.MARGIN = true;
	ResponsiveFlowLayoutData.LINEBREAKABLE = true;

	ResponsiveFlowLayoutData.prototype.setWeight = function(iWeight) {
		if (iWeight >= 1) {
			this.setProperty("weight", iWeight);
		} else {
			jQuery.sap.log.warning("Values smaller than 1 are invalid. Default value '1' is used instead", this);
			this.setProperty("weight", ResponsiveFlowLayoutData.WEIGHT);
		}

		return this;
	};

	ResponsiveFlowLayoutData.prototype.setLinebreak = function(bLinebreak) {
		// if the element should not be line-breakable and a forced linebreak should
		// be set
		if (this.getLinebreakable() == false && bLinebreak) {
			jQuery.sap.log.warning("Setting 'linebreak' AND 'linebreakable' doesn't make any sense. Please set either 'linebreak' or 'linebreakable'", this);
		} else {
			this.setProperty("linebreak", bLinebreak);
		}
		return this;
	};

	ResponsiveFlowLayoutData.prototype.setLinebreakable = function(bLinebreakable) {
		// if the element has a forced line break and the element should be set to
		// not line-breakable
		if (this.getLinebreak() === true && bLinebreakable === false) {
			jQuery.sap.log.warning("Setting 'linebreak' AND 'linebreakable' doesn't make any sense. Please set either 'linebreak' or 'linebreakable'", this);
		} else {
			this.setProperty("linebreakable", bLinebreakable);
			// this.setMinWidth(0);
		}
		return this;
	};

	return ResponsiveFlowLayoutData;

}, /* bExport= */ true);

}; // end of sap/ui/layout/ResponsiveFlowLayoutData.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.ResponsiveSplitterPage') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.layout.ResponsiveSplitterPage
jQuery.sap.declare('sap.ui.layout.ResponsiveSplitterPage'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/ResponsiveSplitterPage",["jquery.sap.global", "./library", "sap/ui/core/Control"],
	function (jQuery, library, Control) {
	"use strict";

	/**
	 * Constructor for a new ResponsiveSplitterPage.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Helper control used in the ResponsiveSplitter
	 * This serves as placeholder for the content of the Panes inside the ResponsiveSplitter
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.48.5
	 *
	 * @constructor
	 * @private
	 * @since 1.38
	 * @alias sap.ui.layout.ResponsiveSplitterPage
	 */
	var ResponsiveSplitterPage = Control.extend("sap.ui.layout.ResponsiveSplitterPage", /** @lends sap.ui.layout.ResponsiveSplitterPage.prototype */{
		metadata: {
			library: "sap.ui.layout",
			associations: {
				/**
				 * The content of the SplitterPage
				 */
				content: {type : "sap.ui.core.Control", multiple : false, singularName : "content"}
			}
		},
		getContent: function () {
			return sap.ui.getCore().byId(this.getAssociation("content"));
		},
		renderer : function(oRm, oControl) {
			oRm.write("<div");
			oRm.addClass("sapUiResponsiveSplitterPage");
			oRm.writeControlData(oControl);
			oRm.writeClasses();
			oRm.write(">");

			var content = oControl.getContent();
			if (content) {
				oRm.renderControl(content);
			}

			oRm.write("</div>");
		}
	});

	return ResponsiveSplitterPage;

}, /* bExport= */ false);
}; // end of sap/ui/layout/ResponsiveSplitterPage.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.SplitPane') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.layout.SplitPane.
jQuery.sap.declare('sap.ui.layout.SplitPane'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/SplitPane",['jquery.sap.global', './library', 'sap/ui/core/Element'],
	function(jQuery, library, Element) {
	"use strict";

	/**
	 * Constructor for a new SplitPane.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * SplitPane is a container of a single control.
	 * Could be used as an aggregation of a PaneContainer.
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.48.5
	 *
	 * @constructor
	 * @public
	 * @since 1.38
	 * @alias sap.ui.layout.SplitPane
	 */
	var SplitPane = Element.extend("sap.ui.layout.SplitPane", { metadata : {

		library : "sap.ui.layout",
		properties : {

			/**
			 * Determines whether the pane will be moved to the pagination
			*/
			demandPane: { type : "boolean", group : "Behavior", defaultValue : true },

			/**
			 * Determines the minimum width of the ResponsiveSplitter(in pixels). When it is reached the pane will be hidden from the screen.
			*/
			requiredParentWidth: { type : "int", defaultValue : 800}
		},
		defaultAggregation : "content",
		aggregations : {
			/**
			 * Content of the SplitPane
			*/
			content: { type : "sap.ui.core.Control", multiple : false, singularName : "content" }
		}
	}});

	SplitPane.prototype.setLayoutData = function(oLayoutdata) {
		var oContent = this.getContent();
		if (oContent) {
			return oContent.setLayoutData(oLayoutdata);
		} else {
			return this;
		}
	};

	SplitPane.prototype.onLayoutDataChange = function() {
		var oParent = this.getParent();
		if (oParent) {
			oParent._oSplitter._delayedResize();
		}
	};

	SplitPane.prototype._isInInterval = function (iFrom) {
		return this.getRequiredParentWidth() <= iFrom;
	};

	return SplitPane;

}, /* bExport= */ true);

}; // end of sap/ui/layout/SplitPane.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.Splitter') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.layout.Splitter.
jQuery.sap.declare('sap.ui.layout.Splitter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/Splitter",['jquery.sap.global', 'sap/ui/core/Control', './library'],
	function(jQuery, Control, library) {
	"use strict";

	/**
	 * Constructor for a new Splitter.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 *
	 * A layout that contains several content areas. The content that is added to the splitter should contain LayoutData of the type SplitterLayoutData that defines its size and size contraints.
	 *
	 * By adding or changing SplitterLayoutData to the controls that make up the content areas, the size can be changed programatically. Additionally the contents can be made non-resizable individually and a minimal size (in px) can be set.
	 *
	 * The orientation of the splitter can be set to horizontal (default) or vertical. All content areas of the splitter will be arranged in that way. In order to split vertically and horizontally at the same time, Splitters need to be nested.
	 *
	 * The splitter bars can be focused to enable resizing of the content areas via keyboard. The contents size can be manipulated when the splitter bar is focused and Shift-Left/Down/Right/Up are pressed. When Shift-Home/End are pressed, the contents are set their minimum or maximum size (keep in mind though, that resizing an auto-size content-area next to another auto-size one might lead to the effect that the former does not take its maximum size but only the maximum size before recalculating auto sizes).
	 *
	 * The splitter bars used for resizing the contents by the user can be set to different widths (or heights in vertical mode) and the splitter will automatically resize the other contents accordingly. In case the splitter bar is resized after the splitter has rendered, a manual resize has to be triggered by invoking triggerResize() on the Splitter.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.48.5
	 *
	 * @constructor
	 * @public
	 * @since 1.22.0
	 * @alias sap.ui.layout.Splitter
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var Splitter = Control.extend("sap.ui.layout.Splitter", /** @lends sap.ui.layout.Splitter.prototype */ { metadata : {

		library : "sap.ui.layout",
		properties : {

			/**
			 * Whether to split the contents horizontally (default) or vertically.
			 */
			orientation : {type : "sap.ui.core.Orientation", group : "Behavior", defaultValue : sap.ui.core.Orientation.Horizontal},

			/**
			 * The width of the control
			 */
			width : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : '100%'},

			/**
			 * The height of the control
			 */
			height : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : '100%'}
		},
		defaultAggregation : "contentAreas",
		aggregations : {

			/**
			 * The content areas to be split. The control will show n-1 splitter bars between n controls in this aggregation.
			 */
			contentAreas : {type : "sap.ui.core.Control", multiple : true, singularName : "contentArea"}
		},
		events : {

			/**
			 * Event is fired when contents are resized.
			 */
			resize : {
				parameters : {

					/**
					 * The ID of the splitter control. The splitter control can also be accessed by calling getSource() on the event.
					 */
					id : {type : "string"},

					/**
					 * An array of values representing the old (pixel-)sizes of the splitter contents
					 */
					oldSizes : {type : "int[]"},

					/**
					 * An array of values representing the new (pixel-)sizes of the splitter contents
					 */
					newSizes : {type : "int[]"}
				}
			}
		}
	}});

	// "Hidden" resource bundle instance
	var oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.layout");

	//////////////////////////////////////// "Static" Properties ///////////////////////////////////////


	////////////////////////////////////////// Public Methods //////////////////////////////////////////

	Splitter.prototype.init = function() {
		this._needsInvalidation = false;
		this._liveResize        = true;
		this._keyboardEnabled   = true;
		this._bHorizontal       = true;
		/** @type {Number[]} */
		this._calculatedSizes   = [];
		this._move              = {};

		this._resizeTimeout     = null;

		// Context bound method for easy (de-)registering at the ResizeHandler
		this._resizeCallback    = this._delayedResize.bind(this);
		this._resizeHandlerId   = null;
		// We need the information whether auto resize is enabled to temporarily disable it
		// during live resize and then set it back to the value before
		this._autoResize = true;
		this.enableAutoResize();

		// Bound versions for event handler registration
		this._boundBarMoveEnd   = this._onBarMoveEnd.bind(this);
		this._boundBarMove      = this._onBarMove.bind(this);

		// Switch resizing parameters based on orientation - this must be done to initialize the values
		this._switchOrientation();

		this._bRtl = sap.ui.getCore().getConfiguration().getRTL();

		// Create bound listener functions for keyboard event handling
		this._keyListeners = {
			increase     : this._onKeyboardResize.bind(this, "inc", 20),
			decrease     : this._onKeyboardResize.bind(this, "dec", 20),
			increaseMore : this._onKeyboardResize.bind(this, "incMore", 20),
			decreaseMore : this._onKeyboardResize.bind(this, "decMore", 20),
			max          : this._onKeyboardResize.bind(this, "max", 20),
			min          : this._onKeyboardResize.bind(this, "min", 20)
		};
		this._enableKeyboardListeners();

		// Flag tracking the preserved state of this control. In case the control is preserved, no resizing attempts should be made.
		this._isPreserved = false;
		sap.ui.getCore().getEventBus().subscribe("sap.ui","__preserveContent", this._preserveHandler, this);

		// Use Icon for separators
		this._bUseIconForSeparator = true;
	};

	Splitter.prototype.exit = function() {
		sap.ui.getCore().getEventBus().unsubscribe("sap.ui","__preserveContent", this._preserveHandler, this);
		this.disableAutoResize();
		delete this._resizeCallback;

		delete this._boundBarMoveEnd;
		delete this._boundBarMove;

		delete this._$SplitterOverlay;
		delete this._$SplitterOverlayBar;
	};

	/**
	 * This method  triggers a resize on the Splitter - meaning it forces the Splitter to recalculate
	 * all sizes.
	 * This method should only be used in rare cases, for example when the CSS that defines the sizes
	 * of the splitter bars changes without triggering a rerendering of the splitter.
	 *
	 * @param {boolean} [forceDirectly=false] Do not delay the resize, trigger it right now.
	 * @public
	 */
	Splitter.prototype.triggerResize = function(forceDirectly) {
		if (forceDirectly) {
			this._resize();
		} else {
			this._delayedResize();
		}
	};

	//////////////////////////////////////// "Protected" Methods ///////////////////////////////////////

	/**
	 * Returns the current actual content sizes as pixel value - these values can change with every
	 * resize.
	 *
	 * @returns {Number[]} Array of px values that correspond to the content area sizes
	 * @protected
	 * @deprecated This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface
	 */
	Splitter.prototype.getCalculatedSizes = function() {
		return this._calculatedSizes;
	};

	/**
	 * Enables the resize handler for this control, this leads to an automatic resize of
	 * the contents whenever the control changes its size. The resize handler is enabled
	 * in every control instance by default.
	 * For performance reasons this behavior can be disabled by calling disableAutoResize()
	 *
	 * @param {boolean} [bTemporarily=false] Only enables autoResize if it was previously disabled temporarily (used for live resize)
	 * @protected
	 * @deprecated This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface
	 */
	Splitter.prototype.enableAutoResize = function(bTemporarily) {
		// Do not enable autoResize if it was deactivated temporarily and wasn't enabled before
		if (bTemporarily && !this._autoResize) {
			return;
		}

		this._autoResize = true;

		var that = this;
		sap.ui.getCore().attachInit(function() {
			that._resizeHandlerId = sap.ui.core.ResizeHandler.register(that, that._resizeCallback);
		});

		this._delayedResize();
	};

	/**
	 * Disables the resize handler for this control, this leads to an automatic resize of
	 * the contents whenever the control changes its size. The resize handler is enabled
	 * in every control instance by default.
	 * For performance reasons this behavior can be disabled by calling disableAutoResize()
	 *
	 * @param {boolean} [bTemporarily=false] Only disable autoResize temporarily (used for live resize), so that the previous status can be restored afterwards
	 * @protected
	 * @deprecated This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface
	 */
	Splitter.prototype.disableAutoResize = function(bTemporarily) {
		sap.ui.core.ResizeHandler.deregister(this._resizeHandlerId);

		if (!bTemporarily) {
			this._autoResize = false;
		}
	};

	/**
	 * Enables recalculation and resize of the splitter contents while dragging the splitter bar.
	 * This means that the contents are resized several times per second when moving the splitter bar.
	 *
	 * @protected
	 * @deprecated This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface
	 */
	Splitter.prototype.enableLiveResize = function() {
		this._liveResize = true;
		this.$().toggleClass("sapUiLoSplitterAnimated", false);
	};

	/**
	 * Disables recalculation and resize of the splitter contents while dragging the splitter bar.
	 * This means that the contents are resized only once after moving the splitter bar.
	 *
	 * @protected
	 * @deprecated This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface
	 */
	Splitter.prototype.disableLiveResize = function() {
		this._liveResize = false;
		this.$().toggleClass("sapUiLoSplitterAnimated", true);
	};

	/**
	 * Enables the resizing of the Splitter contents via keyboard. This makes the Splitter bars
	 * focussable elements.
	 *
	 * @protected
	 */
	Splitter.prototype.enableKeyboardSupport = function() {
		var $Bars = this.$().find(".sapUiLoSplitterBar");
		$Bars.attr("tabindex", "0");
		this._enableKeyboardListeners();
	};

	/**
	 * Disables the resizing of the Splitter contents via keyboard. This changes the Splitter bars
	 * to non-focussable elements.
	 *
	 * @protected
	 */
	Splitter.prototype.disableKeyboardSupport = function() {
		var $Bars = this.$().find(".sapUiLoSplitterBar");
		$Bars.attr("tabindex", "-1");
		this._disableKeyboardListeners();
	};




	////////////////////////////////////////// onEvent Methods /////////////////////////////////////////

	Splitter.prototype.onBeforeRendering = function() {
		this._switchOrientation();
	};

	/**
	 * After Rendering, this method is called, it can be used to manipulate the DOM which has already
	 * been written. Its main function is to move the previously rendered DOM from the hidden area to
	 * the main splitter area and apply correct sizing.
	 */
	Splitter.prototype.onAfterRendering = function() {
		// Create overlay DOM element for resizing
		this._$SplitterOverlay = this.$("overlay");
		this._$SplitterOverlayBar = this.$("overlayBar");
		this._$SplitterOverlay.detach();

		// Upon new rendering, the DOM cannot be preserved any more
		this._isPreserved = false;

		// Calculate and apply correct sizes to the Splitter contents
		this._resize();
	};

	/**
	 * When one or several of the child controls change their layoutData, the Splitter must
	 * recalculate the sizes of its content areas.
	 *
	 * @private
	 */
	Splitter.prototype.onLayoutDataChange = function() {
		this._delayedResize();
	};

	/**
	 * Starts the resize of splitter contents (when the bar is moved by touch)
	 *
	 * @param {jQuery.Event} [oJEv] The jQuery event
	 * @private
	 */
	Splitter.prototype.ontouchstart = function(oJEv) {
		if (this._ignoreTouch) {
			return;
		}

		var sId = this.getId();
		if (!oJEv.target.id || oJEv.target.id.indexOf(sId + "-splitbar") != 0) {
			// The clicked element was not one of my splitter bars
			return;
		}

		if (!oJEv.changedTouches || !oJEv.changedTouches[0]) {
			// No touch in event
			return;
		}

		this._ignoreMouse = true;
		this._onBarMoveStart(oJEv.changedTouches[0], true);
	};

	/**
	 * Starts the resize of splitter contents (when the bar is moved by mouse)
	 *
	 * @param {jQuery.Event} [oJEv] The jQuery event
	 * @private
	 */
	Splitter.prototype.onmousedown = function(oJEv) {
		if (this._ignoreMouse) {
			return;
		}

		var sId = this.getId();
		if (!oJEv.target.id || oJEv.target.id.indexOf(sId + "-splitbar") != 0) {
			// The clicked element was not one of my splitter bars
			return;
		}

		this._ignoreTouch = true;
		this._onBarMoveStart(oJEv);
	};


	/**
	 * Starts a resize (for touch and click)
	 *
	 * @param {jQuery.Event} [oJEv] The jQuery event
	 * @param {boolean} [bTouch] Whether the first parameter is a touch event
	 * @private
	 */
	Splitter.prototype._onBarMoveStart = function(oJEv, bTouch) {
		var sId = this.getId();

		// Disable auto resize during bar move
		this.disableAutoResize(/* temporarily: */ true);

		var iPos = oJEv[this._moveCord];
		var iBar = parseInt(oJEv.target.id.substr((sId + "-splitbar-").length), 10);
		var $Bar = jQuery(oJEv.target);
		var mCalcSizes = this.getCalculatedSizes();
		var iBarSize = this._bHorizontal ?  $Bar.innerWidth() : $Bar.innerHeight();

		var aContentAreas = this._getContentAreas();
		var oLd1   = aContentAreas[iBar].getLayoutData();
		var oLd2   = aContentAreas[iBar + 1].getLayoutData();

		if (!oLd1.getResizable() || !oLd2.getResizable()) {
			// One of the contentAreas is not resizable, do not resize
			// Also: disallow text-marking behavior when not moving bar
			_preventTextSelection(bTouch);
			return;
		}

		// Calculate relative starting position of the bar for virtual bar placement
		var iRelStart = 0 - iBarSize;
		for (var i = 0; i <= iBar; ++i) {
			iRelStart += mCalcSizes[i] + iBarSize;
		}

		this._move = {
			// Start coordinate
			start : iPos,
			// Relative starting position of the bar
			relStart : iRelStart,
			// The number of the bar that is moved
			barNum : iBar,
			// The splitter bar that is moved
			bar : jQuery(oJEv.target),
			// The content sizes for fast resize bound calculation
			c1Size : mCalcSizes[iBar],
			c1MinSize : oLd1 ? parseInt(oLd1.getMinSize(), 10) : 0,
			c2Size : mCalcSizes[iBar + 1],
			c2MinSize : oLd2 ? parseInt(oLd2.getMinSize(), 10) : 0
		};

		// Event handlers use bound handler methods - see init()
		if (bTouch) {
			// this._ignoreMouse = true; // Ignore mouse-events until touch is done
			document.addEventListener("touchend",  this._boundBarMoveEnd);
			document.addEventListener("touchmove", this._boundBarMove);
		} else {
			document.addEventListener("mouseup",   this._boundBarMoveEnd);
			document.addEventListener("mousemove", this._boundBarMove);
		}

		this._$SplitterOverlay.css("display", "block"); // Needed because it is set to none in renderer
		this._$SplitterOverlay.appendTo(this.getDomRef());
		this._$SplitterOverlayBar.css(this._sizeDirNot, "");
		this._move["bar"].css("visibility", "hidden");
		this._onBarMove(oJEv);
	};

	Splitter.prototype._onBarMove = function(oJEv) {
		if (oJEv.preventDefault) { oJEv.preventDefault(); } // Do not select text

		var oEvent = oJEv;
		if (oJEv.changedTouches && oJEv.changedTouches[0]) {
			// Touch me baby!
			oEvent = oJEv.changedTouches[0];
		}

		var iPos = oEvent[this._moveCord];

		var iDelta = (iPos - this._move.start);
		//We should only switch direction of change in case it is left or right.
		//Otherwise the vertical splitter is moved opposite to the mouse movement
		if (this.getOrientation() == sap.ui.core.Orientation.Horizontal && this._bRtl) {
			iDelta = -iDelta;
		}

		var c1NewSize = this._move.c1Size + iDelta;
		var c2NewSize = this._move.c2Size - iDelta;


		var bInBounds = (
			    c1NewSize >= 0
			 && c2NewSize >= 0
			 && c1NewSize >= this._move.c1MinSize
			 && c2NewSize >= this._move.c2MinSize
		);

		// Move virtual splitter bar
		if (bInBounds) {
			this._$SplitterOverlayBar.css(this._sizeDir, this._move.relStart + iDelta);

			if (this._liveResize) {
				var fMove = (this._move["start"] - oEvent[this._moveCord]);

				//We should only switch direction of change in case it is left or right.
				//Otherwise the vertical splitter is moved opposite to the mouse movement
				if (this.getOrientation() == sap.ui.core.Orientation.Horizontal && this._bRtl) {
					fMove = -fMove;
				}

				this._resizeContents(
					/* left content number:    */ this._move["barNum"],
					/* number of pixels:       */ -fMove,
					/* also change layoutData: */ false
				);
			}
		}

	};


	/**
	 * Ends the resize of splitter contents (when the bar is moved)
	 *
	 * @param {jQuery.Event} [oJEv] The jQuery event
	 * @private
	 */
	Splitter.prototype._onBarMoveEnd = function(oJEv) {
		this._ignoreMouse = false;
		this._ignoreTouch = false;

		var oEvent = oJEv;
		if (oJEv.changedTouches && oJEv.changedTouches[0]) {
			// Touch me baby!
			oEvent = oJEv.changedTouches[0];
		}

		var iPos = oEvent[this._moveCord];

		var fMove = this._move["start"] - iPos;

		//We should only switch direction of change in case it is left or right.
		//Otherwise the vertical splitter is moved opposite to the mouse movement
		if (this.getOrientation() == sap.ui.core.Orientation.Horizontal && this._bRtl) {
			fMove = -fMove;
		}

		this._resizeContents(
			/* left content number:    */ this._move["barNum"],
			/* number of pixels:       */ -fMove,
			/* also change layoutData: */ true
		);

		// Remove resizing overlay
		this._move["bar"].css("visibility", "");
		this._$SplitterOverlay.css("display", ""); // Remove?

		// this._$SplitterOverlay.detach(); TODO move to better position

		// Uses bound handler methods - see init()
		document.removeEventListener("mouseup",   this._boundBarMoveEnd);
		document.removeEventListener("mousemove", this._boundBarMove);
		document.removeEventListener("touchend",  this._boundBarMoveEnd);
		document.removeEventListener("touchmove", this._boundBarMove);

		// Enable auto resize after bar move if it was enabled before
		this.enableAutoResize(/* temporarily: */ true);

		jQuery.sap.focus(this._move.bar);
	};

	/**
	 * Resizes the contents after a bar has been moved
	 *
	 * @param {Number} [iLeftContent] Number of the first (left) content that is resized
	 * @param {Number} [iPixels] Number of pixels to increase the first and decrease the second content
	 * @param {boolean} [bFinal] Whether this is the final position (sets the size in the layoutData of the
	 * content areas)
	 */
	Splitter.prototype._resizeContents = function(iLeftContent, iPixels, bFinal) {
		if (isNaN(iPixels)) {
			jQuery.sap.log.warning("Splitter: Received invalid resizing values - resize aborted.");
			return;
		}

		var aContentAreas = this._getContentAreas();
		var oLd1   = aContentAreas[iLeftContent].getLayoutData();
		var oLd2   = aContentAreas[iLeftContent + 1].getLayoutData();

		var sSize1 = oLd1.getSize();
		var sSize2 = oLd2.getSize();

		var $Cnt1 = this.$("content-" + iLeftContent);
		var $Cnt2 = this.$("content-" + (iLeftContent + 1));

		var iNewSize1 = this._move.c1Size + iPixels;
		var iNewSize2 = this._move.c2Size - iPixels;
		var iMinSize1 = parseInt(oLd1.getMinSize(), 10);
		var iMinSize2 = parseInt(oLd2.getMinSize(), 10);

		// Adhere to size constraints
		var iDiff;
		if (iNewSize1 < iMinSize1) {
			iDiff = iMinSize1 - iNewSize1;
			iPixels += iDiff;
			iNewSize1 = iMinSize1;
			iNewSize2 -= iDiff;
		} else if (iNewSize2 < iMinSize2) {
			iDiff = iMinSize2 - iNewSize2;
			iPixels -= iDiff;
			iNewSize2 = iMinSize2;
			iNewSize1 -= iDiff;
		}

		if (bFinal) {
			// Resize finished, set layout data in content areas
			if (sSize1 === "auto" && sSize2 !== "auto") {
				// First pane has auto size - only change size of second pane
				oLd2.setSize(iNewSize2 + "px");
			} else if (sSize1 !== "auto" && sSize2 === "auto") {
				// Second pane has auto size - only change size of first pane
				oLd1.setSize(iNewSize1 + "px");
			} else {
				oLd1.setSize(iNewSize1 + "px");
				oLd2.setSize(iNewSize2 + "px");
			}
		} else {
			// Live-Resize, resize contents in Dom
			$Cnt1.css(this._sizeType, iNewSize1 + "px");
			$Cnt2.css(this._sizeType, iNewSize2 + "px");
		}
	};


	////////////////////////////////////////// Private Methods /////////////////////////////////////////

	Splitter.prototype._preserveHandler = function(sChannelId, sEventId, oData) {
		var oDom = this.getDomRef();
		if (oDom && jQuery.contains(oData.domNode, oDom)) {
			// Our HTML has been preserved...
			this._isPreserved = true;
		}
	};


	/**
	 * Resizes as soon as the current stack is done. Can be used in cases where several resize-relevant
	 * actions are done in a loop to make sure only one resize calculation is done at the end.
	 *
	 * @param {Number} [iDelay=0] Number of milliseconds to wait before doing the resize
	 * @private
	 */
	Splitter.prototype._delayedResize = function(iDelay) {
		if (iDelay === undefined) {
			iDelay = 0;
		}

		// If we are not rendered, we do not need to resize since resizing is done after rendering
		if (this.getDomRef()) {
			jQuery.sap.clearDelayedCall(this._resizeTimeout);
			jQuery.sap.delayedCall(iDelay, this, "_resize", []);
		}
	};

	/**
	 * Resizes the Splitter bars to fit the current content height. Must be done before and after content sizes have
	 * been calculated.
	 *
	 * @param {sap.ui.core.Control[]} aContentAreas - The content areas of the Splitter
	 * @returns {void}
	 * @private
	 */
	Splitter.prototype._resizeBars = function(aContentAreas) {
		var i, $Bar;
		// In case the Splitter has a relative height or width set (like "100%"), and the surrounding
		// container does not have a size set, the content of the Splitter defines the height/width,
		// in which case the size of the splitter bars is incorrect.
		var $this = this.$();
		// First remove the size from the splitter bar so it does not lead to growing the content
		for (i = 0; i < aContentAreas.length - 1; ++i) {
			$Bar = this.$("splitbar-" + i);
			$Bar.css(this._sizeTypeNot, "");
		}
		// Now measure the content and adapt the size of the Splitter bar
		for (i = 0; i < aContentAreas.length - 1; ++i) {
			$Bar = this.$("splitbar-" + i);
			var iSize = this._bHorizontal ? $this.height() : $this.width();
			$Bar.css(this._sizeType, "");
			$Bar.css(this._sizeTypeNot, iSize + "px");
		}
	};

	/**
	 * Recalculates the content sizes and manipulates the DOM accordingly.
	 *
	 * @private
	 */
	Splitter.prototype._resize = function() {
		if (this._isPreserved) {
			// Do not attempt to resize the content areas in case we are in the preserved area
			return;
		}

		var i = 0, $Bar;
		var aContentAreas = this._getContentAreas();

		// Resize Splitter bars so that they do not influence the content sizes the wrong way
		this._resizeBars(aContentAreas);

		// Save calculated sizes to be able to tell whether a resize occurred
		var oldCalculatedSizes = this.getCalculatedSizes();
		this._recalculateSizes();
		var newCalculatedSizes = this.getCalculatedSizes();

		var bSizesValid = false;
		for (i = 0; i < newCalculatedSizes.length; ++i) {
			if (newCalculatedSizes[i] !== 0) {
				bSizesValid = true;
				break;
			}
		}
		if (!bSizesValid) {
			// TODO: What if all sizes are set to 0 on purpose...?
			this._delayedResize(100);
			return;
		}

		var bLastContentResizable = true;
		for (i = 0; i < aContentAreas.length; ++i) {
			var $Content = this.$("content-" + i);
			var oContent = aContentAreas[i];

			$Content.css(this._sizeType, newCalculatedSizes[i] + "px");
			$Content.css(this._sizeTypeNot, ""); // Remove other sizes.

			// Check whether bar should be movable
			var oLd = oContent.getLayoutData();
			var bContentResizable = oLd && oLd.getResizable();
			if (i > 0) {
				var bResizable = bContentResizable && bLastContentResizable;
				$Bar = this.$("splitbar-" + (i - 1));
				$Bar.toggleClass("sapUiLoSplitterNoResize", !bResizable);
				$Bar.attr("tabindex", bResizable && this._keyboardEnabled ? "0" : "-1");
			}
			bLastContentResizable = bContentResizable;
		}

		// Resize Splitter bars again so that the updated content sizes are calculated correctly
		this._resizeBars(aContentAreas);

		// In case something was resized, change sizes and fire resize event
		if (_sizeArraysDiffer(oldCalculatedSizes, newCalculatedSizes)) {
			this.fireResize({
				oldSizes : oldCalculatedSizes,
				newSizes : newCalculatedSizes
			});
		}
	};


	/**
	 * Calculates how much space is actually available inside the splitter to distribute the content
	 * areas in.
	 *
	 * @param {string[]} [aSizes] The list of size values from the LayoutData of the content areas
	 * @returns {Number} The available space in px
	 * @private
	 */
	Splitter.prototype._calculateAvailableContentSize = function(aSizes) {
		var i = 0;

		var $Splitter = this.$();
		var iFullSize      = this._bHorizontal ? $Splitter.innerWidth() : $Splitter.innerHeight();
		// Due to rounding errors when zoom is activated, we need 1px of error margin for every element
		// that is automatically sized...
		var iAutosizedAreas = 0;
		var bHasAutoSizedContent = false;
		for (i = 0; i < aSizes.length; ++i) {
			var sSize = aSizes[i];
			if (sSize.indexOf("%") > -1) {
				iAutosizedAreas++;
			}
			if (aSizes[i] == "auto") {
				bHasAutoSizedContent = true;
			}
		}
		iAutosizedAreas += bHasAutoSizedContent ? 1 : 0;

		iFullSize -= iAutosizedAreas;

		// Due to zoom rounding erros, we cannot assume that all SplitBars have the same sizes, even
		// though they have the same CSS size set.
		var iSplitters     = aSizes.length - 1;
		var iSplitBarsWidth = 0;
		for (i = 0; i < iSplitters; ++i) {
			iSplitBarsWidth += this._bHorizontal
				? this.$("splitbar-" + i).innerWidth()
				: this.$("splitbar-" + i).innerHeight();
		}

		return iFullSize - iSplitBarsWidth;
	};

	/**
	 * Recalculates the content sizes in three steps:
	 *  1. Searches for all absolute values ("px") and deducts them from the available space.
	 *  2. Searches for all percent values and interprets them as % of the available space after step 1
	 *  3. Divides the rest of the space uniformly between all contents with "auto" size values
	 *
	 * @private
	 */
	Splitter.prototype._recalculateSizes = function() {
		// TODO: (?) Use maxSize value from layoutData
		var i, sSize, oLayoutData, iColSize, idx;

		// Read all content sizes from the layout data
		var aSizes = [];
		var aContentAreas = this._getContentAreas();
		for (i = 0; i < aContentAreas.length; ++i) {
			oLayoutData = aContentAreas[i].getLayoutData();
			sSize = oLayoutData ? oLayoutData.getSize() : "auto";

			aSizes.push(sSize);
		}

		this._calculatedSizes = [];

		var iAvailableSize = this._calculateAvailableContentSize(aSizes);

		var aAutosizeIdx = [];
		var aAutoMinsizeIdx = [];
		var aPercentsizeIdx = [];
		var iRest = iAvailableSize;

		// Remove fixed sizes from available size
		for (i = 0; i < aSizes.length; ++i) {
			sSize = aSizes[i];
			var iSize;

			if (sSize.indexOf("px") > -1) {
				// Pixel based Value - deduct it from available size
				iSize = parseInt(sSize, 10);
				iRest -= iSize;
				this._calculatedSizes[i] = iSize;
			} else if (sSize.indexOf("%") > -1) {
				aPercentsizeIdx.push(i);
			} else if (aSizes[i] == "auto") {
				oLayoutData = aContentAreas[i].getLayoutData();
				if (oLayoutData && parseInt(oLayoutData.getMinSize(), 10) != 0) {
					aAutoMinsizeIdx.push(i);
				} else {
					aAutosizeIdx.push(i);
				}
			} else {
				jQuery.sap.log.error("Illegal size value: " + aSizes[i]);
			}
		}

		var bWarnSize = false; // Warn about sizes being too big for the available space

		// If more than the available size if assigned to fixed width content, the rest will get no
		// space at all
		if (iRest < 0) { bWarnSize = true; iRest = 0; }

		// Now calculate % of the available space
		var iPercentSizes = aPercentsizeIdx.length;
		for (i = 0; i < iPercentSizes; ++i) {
			idx = aPercentsizeIdx[i];
			// Percent based Value - deduct it from available size
			iColSize = Math.floor((parseFloat(aSizes[idx]) / 100) * iAvailableSize);
			this._calculatedSizes[idx] = iColSize;
			iRest -= iColSize;
		}
		iAvailableSize = iRest;

		if (iAvailableSize < 0) { bWarnSize = true; iAvailableSize = 0; }

		// Calculate auto sizes
		iColSize = Math.floor(iAvailableSize / (aAutoMinsizeIdx.length + aAutosizeIdx.length), 0);

		// First calculate auto-sizes with a minSize constraint
		var iAutoMinSizes = aAutoMinsizeIdx.length;
		for (i = 0; i < iAutoMinSizes; ++i) {
			idx = aAutoMinsizeIdx[i];
			var iMinSize = parseInt(aContentAreas[idx].getLayoutData().getMinSize(), 10);
			if (iMinSize > iColSize) {
				this._calculatedSizes[idx] = iMinSize;
				iAvailableSize -= iMinSize;
			} else {
				this._calculatedSizes[idx] = iColSize;
				iAvailableSize -= iColSize;
			}
		}

		if (iAvailableSize < 0) { bWarnSize = true; iAvailableSize = 0; }

		// Now calculate "auto"-sizes
		iRest = iAvailableSize;
		var iAutoSizes = aAutosizeIdx.length;
		iColSize = Math.floor(iAvailableSize / iAutoSizes, 0);
		for (i = 0; i < iAutoSizes; ++i) {
			idx = aAutosizeIdx[i];
			this._calculatedSizes[idx] = iColSize;
			iRest -= iColSize;
//			if (i == iAutoSizes - 1 && iRest != 0) {
//				// In case of rounding errors, change the last auto-size column
//				this._calculatedSizes[idx] += iRest;
//			}
		}

		if (bWarnSize) {
			// TODO: Decide if the warning should be kept - might spam the console but on the other
			//       hand it might make analyzing of splitter bugs easier, since we can just ask
			//       developers if there was a [Splitter] output on the console if the splitter looks
			//       weird in their application.
			jQuery.sap.log.info(
				"[Splitter] The set sizes and minimal sizes of the splitter contents are bigger " +
				"than the available space in the UI."
			);
		}
	};

	/**
	 * Stores the respective values that differ when resizing the splitter in horizontal vs. vertical
	 * mode
	 *
	 * @private
	 */
	Splitter.prototype._switchOrientation = function() {
		this._bHorizontal = this.getOrientation() === sap.ui.core.Orientation.Horizontal;
		if (this._bHorizontal) {
			this._sizeDirNot  = "top";
			this._sizeTypeNot = "height";
			this._sizeType    = "width";
			this._moveCord    = "pageX";

			if (this._bRtl) {
				this._sizeDir     = "right";
			} else {
				this._sizeDir     = "left";
			}
		} else {
			this._moveCord    = "pageY";
			this._sizeType    = "height";
			this._sizeTypeNot = "width";
			this._sizeDir     = "top";
			this._sizeDirNot  = "left";
		}

		var $This = this.$();
		$This.toggleClass("sapUiLoSplitterH", this._bHorizontal);
		$This.toggleClass("sapUiLoSplitterV", !this._bHorizontal);
	};

	/**
	 * Handles events that are generated from the keyboard that should trigger a resize (on the
	 * Splitter bars).
	 *
	 * @param {string} [sType] The type of resize step ("inc", "dec", "max", "min")
	 * @param {jQuery.Event} [oEvent] The original keyboard event
	 */
	Splitter.prototype._onKeyboardResize = function(sType, iStepSize, oEvent) {
		var sBarId = this.getId() + "-splitbar-";
		if (!oEvent || !oEvent.target || !oEvent.target.id || oEvent.target.id.indexOf(sBarId) !== 0) {
			return;
		}

		var iStepSize = iStepSize;
		var iBigStep  = 999999;

		var iBar = parseInt(oEvent.target.id.substr(sBarId.length), 10);
		var mCalcSizes = this.getCalculatedSizes();
		// TODO: These two lines are incomprehensible magic - find better solution
		this._move.c1Size = mCalcSizes[iBar];
		this._move.c2Size = mCalcSizes[iBar + 1];

		var iStep = 0;
		switch (sType) {
			case "inc":
				iStep = iStepSize;
				break;

			case "incMore":
				iStep = iStepSize * 10;
				break;

			case "dec":
				iStep = 0 - iStepSize;
				break;

			case "decMore":
				iStep = 0 - iStepSize * 10;
				break;

			case "max":
				iStep = iBigStep;
				break;

			case "min":
				iStep = 0 - iBigStep;
				break;

			default:
				jQuery.sap.log.warn("[Splitter] Invalid keyboard resize type");
				break;
		}

		this._resizeContents(iBar, iStep, true);
	};

	/**
	 * Connects the keyboard event listeners so resizing via keyboard will be possible
	 */
	Splitter.prototype._enableKeyboardListeners = function() {
		this.onsapright              = this._keyListeners.increase;
		this.onsapdown               = this._keyListeners.increase;
		this.onsapleft               = this._keyListeners.decrease;
		this.onsapup                 = this._keyListeners.decrease;
		this.onsappageup             = this._keyListeners.decreaseMore;
		this.onsappagedown           = this._keyListeners.increaseMore;
		this.onsapend                = this._keyListeners.max;
		this.onsaphome               = this._keyListeners.min;

		this._keyboardEnabled = true;
	};

	/**
	 * Disconnects the keyboard event listeners so resizing via keyboard will not be possible anymore
	 */
	Splitter.prototype._disableKeyboardListeners = function() {
		delete this.onsapincreasemodifiers;
		delete this.onsapdecreasemodifiers;
		delete this.onsapendmodifiers;
		delete this.onsaphomemodifiers;

		this._keyboardEnabled = false;
	};

	/**
	 * Gets the text for the given key from the current resourcebundle
	 *
	 * @param {string} [sKey] Text key to look for in the resource bundle
	 * @param {array} [aArgs] Additional arguments for the getText method of the ResourceBundle
	 * @returns {string} The translated string
	 * @private
	 */
	Splitter.prototype._getText = function(sKey, aArgs) {
		return (oResourceBundle ? oResourceBundle.getText(sKey, aArgs) : sKey);
	};


	///////////////////////////////////////// Hidden Functions /////////////////////////////////////////

	/**
	 * Compares two (simple, one-dimensional) arrays. If all values are the same, false is returned -
	 * If values differ or at least one of the values is no array, true is returned.
	 *
	 * @param {Number[]} [aSizes1] The array of numbers to compare against
	 * @param {Number[]} [aSizes2] The array of numbers that is compared to the first one
	 * @returns {boolean} True if the size-arrays differ, false otherwise
	 * @private
	 */
	function _sizeArraysDiffer(aSizes1, aSizes2) {
		if (aSizes1 === aSizes2) {
			// The same thing. No difference.
			return false;
		}

		if (!aSizes1 || !aSizes2 || aSizes1.length === undefined || aSizes2.length === undefined) {
			// At lease one of the two is not an array
			return true;
		}

		if (aSizes1.length != aSizes2.length) {
			return true;
		}

		for (var i = 0; i < aSizes1.length; ++i) {
			if (aSizes1[i] !== aSizes2[i]) {
				return true;
			}
		}

		return false;
	}

	/**
	 * Prevents the selection of text while the mouse is moving when pressed
	 *
	 * @param {boolean} [bTouch] If set to true, touch events instead of mouse events are captured
	 */
	function _preventTextSelection(bTouch) {
		var fnPreventSelection = function(oEvent) {
			oEvent.preventDefault();
		};
		var fnAllowSelection = null;
		fnAllowSelection = function() {
			document.removeEventListener("touchend",  fnAllowSelection);
			document.removeEventListener("touchmove", fnPreventSelection);
			document.removeEventListener("mouseup",   fnAllowSelection);
			document.removeEventListener("mousemove", fnPreventSelection);
		};

		if (bTouch) {
			this._ignoreMouse = true; // Ignore mouse-events until touch is done
			document.addEventListener("touchend",  fnAllowSelection);
			document.addEventListener("touchmove", fnPreventSelection);
		} else {
			document.addEventListener("mouseup",   fnAllowSelection);
			document.addEventListener("mousemove", fnPreventSelection);
		}
	}

	/**
	 * Makes sure the LayoutData for the given control is set and compatible. In case nothing is set,
	 * a default sap.ui.layout.SplitterLayoutData is set on the Element
	 *
	 * @param {sap.ui.core.Element} [oContent] The Element for which the existance of LayoutData should be ensured
	 * @private
	 */
	function _ensureLayoutData(oContent) {
		var oLd = oContent.getLayoutData();
		// Make sure LayoutData is set on the content
		// But this approach has the advantage that "compatible" LayoutData can be used.
		if (oLd && (!oLd.getResizable || !oLd.getSize || !oLd.getMinSize)) {
			jQuery.sap.log.warning(
				"Content \"" + oContent.getId() + "\" for the Splitter contained wrong LayoutData. " +
				"The LayoutData has been replaced with default values."
			);
			oLd = null;
		}
		if (!oLd) {
			oContent.setLayoutData(new sap.ui.layout.SplitterLayoutData());
		}
	}


	//////////////////////////////////////// Overridden Methods ////////////////////////////////////////


	Splitter.prototype.invalidate = function(oOrigin) {
		var bForce =
			// In case the content invalidates and bubbles up (for example an invisible button being
			// shown), we need to rerender
			(oOrigin && this.indexOfContentArea(oOrigin) != -1)

			// CustomData that needs to be updated in the DOM has been set on the splitter
			// TODO: Programatically write CustomData on this control to the DOM
		 || (oOrigin && oOrigin instanceof sap.ui.core.CustomData && oOrigin.getWriteToDom())

			// We do not know where the invalidate originated from. We will pretty much have to rerender
		 || (oOrigin === undefined);

		// Only really invalidate/rerender if needed
		if (bForce || this._needsInvalidation) {
			this._needsInvalidation = false;
			Control.prototype.invalidate.apply(this, arguments);
		}
	};

	    //////////////////////////////////// Property "orientation" ///////////////////////////////////

	Splitter.prototype.setOrientation = function(sOrientation) {
		var vReturn = this.setProperty("orientation", sOrientation, true);

		this._switchOrientation();
		this._delayedResize();

		this.$().find(".sapUiLoSplitterBar").attr("aria-orientation", this._bHorizontal ? "vertical" : "horizontal");

		return vReturn;
	};


	    ///////////////////////////////////// Property "width" ///////////////////////////////

	Splitter.prototype.setWidth = function(sWidth) {
		// Do not invalidate for size change
		this.setProperty("width", sWidth, true);
		// Set validated width on control
		this.$().css("width", this.getProperty("width"));
		return this;
	};

	    ///////////////////////////////////// Property "height" ///////////////////////////////

	Splitter.prototype.setHeight = function(sHeight) {
		// Do not invalidate for size change
		this.setProperty("height", sHeight, true);
		// Set validated height on control
		this.$().css("height", this.getProperty("height"));
		return this;
	};

	    //////////////////////////////////////// Event "xxx" ///////////////////////////////////////

	    ///////////////////////////////////// Aggregation "contents" ///////////////////////////////

	Splitter.prototype.addContentArea = function(oContent) {
		this._needsInvalidation = true;
		_ensureLayoutData(oContent);
		return this.addAggregation("contentAreas", oContent);
	};

	Splitter.prototype.removeContentArea = function(oContent) {
		this._needsInvalidation = true;
		return this.removeAggregation("contentAreas", oContent);
	};

	Splitter.prototype.removeAllContentArea = function() {
		this._needsInvalidation = true;
		return this.removeAllAggregation("contentAreas");
	};

	Splitter.prototype.destroyContentArea = function() {
		this._needsInvalidation = true;
		return this.destroyAggregation("contentAreas");
	};

	Splitter.prototype.insertContentArea = function(oContent, iIndex) {
		this._needsInvalidation = true;
		_ensureLayoutData(oContent);
		return this.insertAggregation("contentAreas", oContent, iIndex);
	};

	Splitter.prototype._getContentAreas = function() {
		return this.getContentAreas();
	};

	    ///////////////////////////////////// Association "xxx" ////////////////////////////////////

	return Splitter;

}, /* bExport= */ true);

}; // end of sap/ui/layout/Splitter.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.SplitterLayoutData') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.layout.SplitterLayoutData.
jQuery.sap.declare('sap.ui.layout.SplitterLayoutData'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.LayoutData'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/SplitterLayoutData",['jquery.sap.global', 'sap/ui/core/LayoutData', './library'],
	function(jQuery, LayoutData, library) {
	"use strict";



	/**
	 * Constructor for a new SplitterLayoutData.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Holds layout data for the splitter contents.
	 * Allowed size values are numeric values ending in "px" and "%" and the
	 * special case "auto".
	 * (The CSS value "auto" is used internally to recalculate the size of the content
	 * dynamically and is not directly set as style property.)
	 * @extends sap.ui.core.LayoutData
	 * @version 1.48.5
	 *
	 * @constructor
	 * @public
	 * @since 1.22.0
	 * @experimental Since version 1.22.0.
	 * API is not yet finished and might change completely
	 * @alias sap.ui.layout.SplitterLayoutData
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SplitterLayoutData = LayoutData.extend("sap.ui.layout.SplitterLayoutData", /** @lends sap.ui.layout.SplitterLayoutData.prototype */ { metadata : {

		library : "sap.ui.layout",
		properties : {

			/**
			 * Determines whether the control in the splitter can be resized or not.
			 */
			resizable : {type : "boolean", group : "Behavior", defaultValue : true},

			/**
			 * Sets the size of the splitter content.
			 */
			size : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : 'auto'},

			/**
			 * Sets the minimum size of the splitter content in px.
			 */
			minSize : {type : "int", group : "Dimension", defaultValue : 0}
		}
	}});

	/*** NOTHING ***/

	return SplitterLayoutData;

}, /* bExport= */ true);

}; // end of sap/ui/layout/SplitterLayoutData.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.VerticalLayout') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.layout.VerticalLayout.
jQuery.sap.declare('sap.ui.layout.VerticalLayout'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/VerticalLayout",['jquery.sap.global', 'sap/ui/core/Control', 'sap/ui/core/EnabledPropagator', './library'],
	function(jQuery, Control, EnabledPropagator, library) {
	"use strict";

	/**
	 * Constructor for a new VerticalLayout.
	 *
	 * @param {string} [sId] Id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * In this layout the content controls are rendered one below the other.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.48.5
	 *
	 * @constructor
	 * @public
	 * @since 1.16.0
	 * @alias sap.ui.layout.VerticalLayout
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var VerticalLayout = Control.extend("sap.ui.layout.VerticalLayout", /** @lends sap.ui.layout.VerticalLayout.prototype */ { metadata : {

		library : "sap.ui.layout",
		properties : {

			/**
			 * Width of the <code>VerticalLayout</code>. If no width is set, the width of the content is used.
			 * If the content of the layout has a larger width than the layout, it is cut off.
			 * There is no scrolling inside the layout.
			 */
			width : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},

			/**
			 *
			 * If not enabled, all controls inside are not enabled automatically.
			 */
			enabled : {type : "boolean", group : "Behavior", defaultValue : true}
		},
		defaultAggregation : "content",
		aggregations : {

			/**
			 * Content controls within the layout.
			 */
			content : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
		},
		designTime : true
	}});

	/**
	 * Sets the width of the Vertical Layout without rerendering of the whole control, and everything inside it.
	 * @param {sap.ui.core.CSSSize} width
	 * @returns {VerticalLayout}
	 */
	VerticalLayout.prototype.setWidth = function (width) {
		this.setProperty("width", width, true);
		if (this.getDomRef()) {
			this.getDomRef().style.width = this.getWidth();
		}
		return this;
	};

	/**
	 * @see sap.ui.core.Control#getAccessibilityInfo
	 * @protected
	 */
	VerticalLayout.prototype.getAccessibilityInfo = function() {
		return {children: this.getContent()};
	};

	EnabledPropagator.call(VerticalLayout.prototype);

	return VerticalLayout;

}, /* bExport= */ true);

}; // end of sap/ui/layout/VerticalLayout.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.form.Form') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.layout.form.Form.
jQuery.sap.declare('sap.ui.layout.form.Form'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/form/Form",['jquery.sap.global', 'sap/ui/core/Control', 'sap/ui/layout/library'],
	function(jQuery, Control, library) {
	"use strict";

	/**
	 * Constructor for a new sap.ui.layout.form.Form.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * A <code>Form</code> control arranges labels and fields (like input fields) into groups and rows. There are different ways to visualize forms for different screen sizes.
	 *
	 * A <code>Form</code> is structured into <code>FormContainers</code>. Each <code>FormContainer</code> consists of <code>FormElements</code>.
	 * The <code>FormElements</code> consists of a label and the form fields.
	 * A <code>Form</code> doesn't render its content by itself. The rendering is done by the assigned <code>FormLayout</code>.
	 * This is so that the rendering can be adopted to new UI requirements without changing the <code>Form</code> itself.
	 *
	 * For the content of a <code>Form</code>, <code>VariantLayoutData</code> are supported to allow simple switching of the <code>FormLayout</code>.
	 * <code>LayoutData</code> on the content can be used to overwrite the default layout of the <code>Form</code>.
	 *
	 * The <code>Form</code> (and its sub-controls) automatically add label and field assignment to enable screen reader support.
	 * It also adds keyboard support to navigate between the fields and groups inside the form.
	 *
	 * <b>Note:</b> Do not put any layout controls into the <code>FormElements</code>. This could destroy the visual layout,
	 * keyboard support and screen-reader support.
	 *
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.48.5
	 *
	 * @constructor
	 * @public
	 * @since 1.16.0
	 * @alias sap.ui.layout.form.Form
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var Form = Control.extend("sap.ui.layout.form.Form", /** @lends sap.ui.layout.form.Form.prototype */ { metadata : {

		library : "sap.ui.layout",
		properties : {

			/**
			 * Width of the <code>Form</code>.
			 */
			width : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},

			/**
			 * Applies a device-specific and theme-specific line-height to the form rows if the form has editable content.
			 * If set, all (not only the editable) rows of the form will get the line height of editable fields.
			 *
			 * The accessibility <code>aria-readonly</code> attribute is set according to this property.
			 *
			 * <b>Note:</b> The setting of the property has no influence on the editable functionality of the form's content.
			 * @since 1.20.0
			 */
			editable : {type : "boolean", group : "Misc", defaultValue : false}
		},
		defaultAggregation : "formContainers",
		aggregations : {

			/**
			 * Containers with the content of the form. A <code>FormContainer</code> represents a group inside the <code>Form</code>.
			 */
			formContainers : {type : "sap.ui.layout.form.FormContainer", multiple : true, singularName : "formContainer"},

			/**
			 * Title of the <code>Form</code>. Can either be a <code>Title</code> element or a string.
			 * If a <code>Title</code> element it used, the style of the title can be set.
			 *
			 * <b>Note:</b> If a <code>Toolbar</code> is used, the <code>Title</code> is ignored.
			 */
			title : {type : "sap.ui.core.Title", altTypes : ["string"], multiple : false},

			/**
			 * Toolbar of the <code>Form</code>.
			 *
			 * <b>Note:</b> If a <code>Toolbar</code> is used, the <code>Title</code> is ignored.
			 * If a title is needed inside the <code>Toolbar</code> it must be added at content to the <code>Toolbar</code>.
			 * In this case add the <code>Title</code> to the <code>ariaLabelledBy</code> association.
			 * @since 1.36.0
			 */
			toolbar : {type : "sap.ui.core.Toolbar", multiple : false},

			/**
			 * Layout of the <code>Form</code>. The assigned <code>Layout</code> renders the <code>Form</code>.
			 * We recommend using the <code>ResponsiveGridLayout</code> for rendering a <code>Form</code>,
			 * as its responsiveness allows the available space to be used in the best way possible.
			 */
			layout : {type : "sap.ui.layout.form.FormLayout", multiple : false}
		},
		associations: {

			/**
			 * Association to controls / IDs that label this control (see WAI-ARIA attribute <code>aria-labelledby</code>).
			 * @since 1.28.0
			 */
			ariaLabelledBy: { type: "sap.ui.core.Control", multiple: true, singularName: "ariaLabelledBy" }
		},
		designTime : true
	}});

	Form.prototype.toggleContainerExpanded = function(oContainer){

		var oLayout = this.getLayout();
		if (oLayout) {
			oLayout.toggleContainerExpanded(oContainer);
		}

	};

	/*
	 * If onAfterRendering of a field is processed the layout might need to change it.
	 */
	Form.prototype.contentOnAfterRendering = function(oFormElement, oControl){

		// call function of the layout
		var oLayout = this.getLayout();
		if (oLayout && oLayout.contentOnAfterRendering) {
			oLayout.contentOnAfterRendering( oFormElement, oControl);
		}

	};

	/*
	 * If LayoutData changed on control this may need changes on the layout. So bubble to the Layout
	 */
	Form.prototype.onLayoutDataChange = function(oEvent){

		// call function of the layout
		var oLayout = this.getLayout();
		if (oLayout && oLayout.onLayoutDataChange) {
			oLayout.onLayoutDataChange(oEvent);
		}

	};

	Form.prototype.onBeforeFastNavigationFocus = function(oEvent){
		var oLayout = this.getLayout();
		if (oLayout && oLayout.onBeforeFastNavigationFocus) {
			oLayout.onBeforeFastNavigationFocus(oEvent);
		}
	};

	Form.prototype.setEditable = function(bEditable) {

		var bOldEditable = this.getEditable();
		this.setProperty("editable", bEditable, true);

		if (bEditable != bOldEditable && this.getDomRef()) {
			if (bEditable) {
				this.$().addClass("sapUiFormEdit").addClass("sapUiFormEdit-CTX");
				this.$().removeAttr("aria-readonly");
			} else {
				this.$().removeClass("sapUiFormEdit").removeClass("sapUiFormEdit-CTX");
				this.$().attr("aria-readonly", "true");
			}
		}

		return this;

	};

	Form.prototype.setToolbar = function(oToolbar) {

		// for sap.m.Toolbar Auto-design must be set to transparent
		oToolbar = sap.ui.layout.form.FormHelper.setToolbar.call(this, oToolbar);

		this.setAggregation("toolbar", oToolbar);

		return this;

	};

	/*
	 * Overwrite of INVALIDATE
	 * do not invalidate Form during rendering. Because there the Layout may update the content
	 * otherwise the Form will render twice
	*/
	Form.prototype.invalidate = function(oOrigin) {

		if (!this._bNoInvalidate) {
			Control.prototype.invalidate.apply(this, arguments);
		}

	};

	/**
	 * As Elements must not have a DOM reference it is not sure if one exists
	 * If the <code>FormContainer</code> has a DOM representation this function returns it,
	 * independent from the ID of this DOM element
	 * @param {sap.ui.layout.form.FormContainer} oContainer <code>FormContainer</code>
	 * @return {Element} The Element's DOM representation or null
	 * @private
	 */
	Form.prototype.getContainerRenderedDomRef = function(oContainer) {

		var oLayout = this.getLayout();
		if (oLayout && oLayout.getContainerRenderedDomRef) {
			return oLayout.getContainerRenderedDomRef(oContainer);
		}else {
			return null;
		}

	};

	/**
	 * As Elements must not have a DOM reference it is not sure if one exists
	 * If the <code>FormElement</code> has a DOM representation this function returns it,
	 * independent from the ID of this DOM element
	 * @param {sap.ui.layout.form.FormElement} oElement <code>FormElement</code>
	 * @return {Element} The Element's DOM representation or null
	 * @private
	 */
	Form.prototype.getElementRenderedDomRef = function(oElement) {

		var oLayout = this.getLayout();
		if (oLayout && oLayout.getElementRenderedDomRef) {
			return oLayout.getElementRenderedDomRef(oElement);
		}else {
			return null;
		}

	};

	return Form;

}, /* bExport= */ true);

}; // end of sap/ui/layout/form/Form.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.form.FormContainer') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.layout.form.FormContainer.
jQuery.sap.declare('sap.ui.layout.form.FormContainer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/form/FormContainer",['jquery.sap.global', 'sap/ui/core/Element', 'sap/ui/core/EnabledPropagator', 'sap/ui/core/theming/Parameters', 'sap/ui/layout/library'],
	function(jQuery, Element, EnabledPropagator, Parameters, library) {
	"use strict";



	/**
	 * Constructor for a new sap.ui.layout.form.FormContainer.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * A <code>FormContainer</code> represents a group inside a <code>Form</code>. It consists of <code>FormElements</code>.
	 * The rendering of the <code>FormContainer</code> is done by the <code>FormLayout</code> assigned to the <code>Form</code>.
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.48.5
	 *
	 * @constructor
	 * @public
	 * @since 1.16.0
	 * @alias sap.ui.layout.form.FormContainer
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var FormContainer = Element.extend("sap.ui.layout.form.FormContainer", /** @lends sap.ui.layout.form.FormContainer.prototype */ { metadata : {

		library : "sap.ui.layout",
		properties : {

			/**
			 * Container is expanded.
			 *
			 * <b>Note:</b> This property only works if <code>expandable</code> is set to <code>true</code>.
			 */
			expanded : {type : "boolean", group : "Misc", defaultValue : true},

			/**
			 * Defines if the <code>FormContainer</code> is expandable.
			 *
			 * <b>Note:</b> The expander icon will only be shown if a <code>title</code> is set for the <code>FormContainer</code>.
			 */
			expandable : {type : "boolean", group : "Misc", defaultValue : false},

			/**
			 * If set to <code>false</code>, the <code>FormContainer</code> is not rendered.
			 */
			visible : {type : "boolean", group : "Misc", defaultValue : true}
		},
		defaultAggregation : "formElements",
		aggregations : {

			/**
			 * The <code>FormElements</code> contain the content (labels and fields) of the <code>FormContainers</code>.
			 */
			formElements : {type : "sap.ui.layout.form.FormElement", multiple : true, singularName : "formElement"},

			/**
			 * Title of the <code>FormContainer</code>. Can either be a <code>Title</code> element or a string.
			 * If a <code>Title</code> element is used, the style of the title can be set.
			 *
			 * <b>Note:</b> If a <code>Toolbar</code> is used, the <code>Title</code> is ignored.
			 */
			title : {type : "sap.ui.core.Title", altTypes : ["string"], multiple : false},

			/**
			 * Toolbar of the <code>FormContainer</code>.
			 *
			 * <b>Note:</b> If a <code>Toolbar</code> is used, the <code>Title</code> is ignored.
			 * If a title is needed inside the <code>Toolbar</code> it must be added at content to the <code>Toolbar</code>.
			 * In this case add the <code>Title</code> to the <code>ariaLabelledBy</code> association.
			 * @since 1.36.0
			 */
			toolbar : {type : "sap.ui.core.Toolbar", multiple : false},

			/*
			 * Internal Expand button
			 */
			_expandButton : {type : "sap.ui.core.Control", multiple : false, visibility: "hidden"}
		},
		associations: {

			/**
			 * Association to controls / IDs that label this control (see WAI-ARIA attribute <code>aria-labelledby</code>).
			 *
			 * <b>Note:</b> This attribute is only rendered if the <code>FormContainer</code> has it's own
			 * DOM representation in the used <code>FormLayout</code>.
			 * @since 1.36.0
			 */
			ariaLabelledBy: { type: "sap.ui.core.Control", multiple: true, singularName: "ariaLabelledBy" }
		},
		designTime : true
	}});

	FormContainer.prototype.init = function(){

		this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.layout");

	};

	FormContainer.prototype.exit = function(){

		if (this._oExpandButton) {
			delete this._oExpandButton;
		}
		this._rb = undefined;

	};

	FormContainer.prototype.setExpandable = function(bExpandable){

		this.setProperty("expandable", bExpandable);

		if (bExpandable) {
			var that = this;
			if (!this._oExpandButton) {
				if (!this._bExpandButtonRequired) {
					this._bExpandButtonRequired = true;
					sap.ui.layout.form.FormHelper.createButton.call(this, this.getId() + "--Exp", _handleExpButtonPress, _expandButtonCreated);
				}
			} else {
				_setExpanderIcon(that);
			}
		}

		return this;

	};

	function _expandButtonCreated(oButton) {

		this._oExpandButton = oButton;
		this.setAggregation("_expandButton", this._oExpandButton); // invalidate because this could happen after Form is already rendered
		_setExpanderIcon(this);

	}

	FormContainer.prototype.setExpanded = function(bExpanded){

		this.setProperty("expanded", bExpanded, true); // no automatic rerendering

		var that = this;
		_setExpanderIcon(that);

		var oForm = this.getParent();
		if (oForm && oForm.toggleContainerExpanded) {
			oForm.toggleContainerExpanded(that);
		}

		return this;

	};

	FormContainer.prototype.setToolbar = function(oToolbar) {

		// for sap.m.Toolbar Auto-design must be set to transparent
		oToolbar = sap.ui.layout.form.FormHelper.setToolbar.call(this, oToolbar);

		this.setAggregation("toolbar", oToolbar);

		return this;

	};

	/*
	 * If onAfterRendering of a field is processed the Form (layout) might need to change it.
	 */
	FormContainer.prototype.contentOnAfterRendering = function(oFormElement, oControl){

		// call function of parent (if assigned)
		var oParent = this.getParent();
		if (oParent && oParent.contentOnAfterRendering) {
			oParent.contentOnAfterRendering( oFormElement, oControl);
		}

	};

	/*
	 * If LayoutData changed on control this may need changes on the layout. So bubble to the form
	 */
	FormContainer.prototype.onLayoutDataChange = function(oEvent){

		// call function of parent (if assigned)
		var oParent = this.getParent();
		if (oParent && oParent.onLayoutDataChange) {
			oParent.onLayoutDataChange(oEvent);
		}

	};

	/*
	 * Checks if properties are fine
	 * Expander only visible if title is set -> otherwise give warning
	 * @return 0 = no problem, 1 = warning, 2 = error
	 * @private
	 */
	FormContainer.prototype._checkProperties = function(){

		var iReturn = 0;

		if (this.getExpandable() && (!this.getTitle() || this.getToolbar())) {
			jQuery.sap.log.warning("Expander only displayed if title is set", this.getId(), "FormContainer");
			iReturn = 1;
		}

		return iReturn;

	};

	/**
	 * As Elements must not have a DOM reference it is not sure if one exists
	 * If the FormContainer has a DOM representation this function returns it,
	 * independent from the ID of this DOM element
	 * @return {Element} The Element's DOM representation or null
	 * @private
	 */
	FormContainer.prototype.getRenderedDomRef = function(){

		var that = this;
		var oForm = this.getParent();

		if (oForm && oForm.getContainerRenderedDomRef) {
			return oForm.getContainerRenderedDomRef(that);
		}else {
			return null;
		}

	};

	/**
	 * As Elements must not have a DOM reference it is not sure if one exists
	 * If the FormElement has a DOM representation this function returns it,
	 * independent from the ID of this DOM element
	 * @param {sap.ui.layout.form.FormElement} oElement FormElement
	 * @return {Element} The Element's DOM representation or null
	 * @private
	 */
	FormContainer.prototype.getElementRenderedDomRef = function(oElement){

		var oForm = this.getParent();

		if (oForm && oForm.getElementRenderedDomRef) {
			return oForm.getElementRenderedDomRef(oElement);
		}else {
			return null;
		}

	};

	function _setExpanderIcon(oContainer){

		if (!oContainer._oExpandButton) {
			return;
		}

		var sIcon, sIconHovered, sText, sTooltip;

		if (oContainer.getExpanded()) {
			sIcon = Parameters._getThemeImage('_sap_ui_layout_Form_FormContainerColImageURL');
			sIconHovered = Parameters._getThemeImage('_sap_ui_layout_Form_FormContainerColImageDownURL');
			sText = "-";
			sTooltip = oContainer._rb.getText("FORM_COLLAPSE");
		} else {
			sIcon = Parameters._getThemeImage('_sap_ui_layout_Form_FormContainerExpImageURL');
			sIconHovered = Parameters._getThemeImage('_sap_ui_layout_Form_FormContainerExpImageDownURL');
			sText = "+";
			sTooltip = oContainer._rb.getText("FORM_EXPAND");
		}

		if (sIcon) {
			sText = "";
		}

		sap.ui.layout.form.FormHelper.setButtonContent(oContainer._oExpandButton, sText, sTooltip, sIcon, sIconHovered);

	}

	function _handleExpButtonPress(oEvent){

		this.setExpanded(!this.getExpanded());

	}

	return FormContainer;

}, /* bExport= */ true);

}; // end of sap/ui/layout/form/FormContainer.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.form.FormElement') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.layout.form.FormElement.
jQuery.sap.declare('sap.ui.layout.form.FormElement'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/form/FormElement",['jquery.sap.global', 'sap/ui/core/Element', 'sap/ui/core/EnabledPropagator', 'sap/ui/layout/library'],
	function(jQuery, Element, EnabledPropagator, library) {
	"use strict";

	/**
	 * Constructor for a new sap.ui.layout.form.FormElement.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * A <code>FormElement</code> represents a row in a <code>FormContainer</code>.
	 * A <code>FormElement</code> is a combination of one label and different controls associated to this label.
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.48.5
	 *
	 * @constructor
	 * @public
	 * @since 1.16.0
	 * @alias sap.ui.layout.form.FormElement
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var FormElement = Element.extend("sap.ui.layout.form.FormElement", /** @lends sap.ui.layout.form.FormElement.prototype */ { metadata : {

		library : "sap.ui.layout",
		properties : {

			/**
			 * If set to <code>false</code>, the <code>FormElement</code> is not rendered.
			 */
			visible : {type : "boolean", group : "Misc", defaultValue : true}
		},
		defaultAggregation : "fields",
		aggregations : {

			/**
			 * Label of the fields. Can either be a <code>Label</code> control or a string.
			 * If a <code>Label</code> control is used, the properties of the <code>Label</code> can be set.
			 * If no assignment between <code>Label</code> and the fields is set via (<code>labelFor</code> property of the <code>Label</code>), it will be done automatically by the
			 * <code>FormElement</code>. In this case the <code>Label</code> is assigned to the fields of the <code>FormElement</code>.
			 */
			label : {type : "sap.ui.core.Label", altTypes : ["string"], multiple : false},

			/*
			 * Internal Label if Label is provided as string.
			 */
			_label : {type : "sap.ui.core.Label", multiple : false, visibility: "hidden"},

			/**
			 * Formular controls that belong together to be displayed in one row of a <code>Form</code>.
			 *
			 * <b>Note:</b> Do not put any layout controls in here. This could destroy the visual layout,
			 * keyboard support and screen-reader support.
			 */
			fields : {type : "sap.ui.core.Control", multiple : true, singularName : "field"}
		},
		designTime : true
	}});

	FormElement.prototype.init = function(){

		this._oFieldDelegate = {oElement: this, onAfterRendering: _fieldOnAfterRendering};

	};

	FormElement.prototype.exit = function(){

		if (this._oLabel) {
			delete this._oLabel;
		}

		this._oFieldDelegate = undefined;

	};

/*
 * sets the label for the FormElement. If it's only a string an internal label is created.
 * overwrite the isRequired and the getLabelForRendering functions with Form specific ones.
 */
	FormElement.prototype.setLabel = function(vAny) {

		if (!this._oLabel) {
			var oOldLabel = this.getLabel();
			if (oOldLabel && oOldLabel.isRequired) {
				oOldLabel.isRequired = oOldLabel._sapuiIsRequired;
				oOldLabel._sapuiIsRequired = undefined;
				oOldLabel.disableRequiredChangeCheck(false);
			}
		}

		this.setAggregation("label", vAny);
		var oLabel = vAny;
		if (typeof oLabel === "string") {
			if (!this._oLabel) {
				this._oLabel = sap.ui.layout.form.FormHelper.createLabel(oLabel);
				this.setAggregation("_label", this._oLabel, true); // use Aggregation to allow model inheritance
				this._oLabel.disableRequiredChangeCheck(true);
				if (this._oLabel.isRequired) {
					this._oLabel.isRequired = _labelIsRequired;
				}
			} else {
				this._oLabel.setText(oLabel);
			}
		} else {
			if (this._oLabel) {
				this._oLabel.destroy();
				delete this._oLabel;
			}
			if (oLabel && oLabel.isRequired) {
				oLabel._sapuiIsRequired = oLabel.isRequired;
				oLabel.isRequired = _labelIsRequired;
				oLabel.disableRequiredChangeCheck(true);
			}
		}

		_updateLabelFor(this);

		return this;

	};

	FormElement.prototype.destroyLabel = function() {

		this.destroyAggregation("label");

		if (this._oLabel) {
			this._oLabel.destroy();
			delete this._oLabel;
		}

		return this;

	};

	/**
	 * Returns the <code>Label</code> of the <code>FormElement</code>, even if the <code>Label</code> is assigned as string.
	 * The <code>FormLayout</code> needs the information of the label to render the <code>Form</code>.
	 *
	 * @returns {sap.ui.core.Label} <code>Label</code> control used to render the label
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	FormElement.prototype.getLabelControl = function() {

		if (this._oLabel) {
			return this._oLabel;
		} else {
			return this.getLabel();
		}

	};

	FormElement.prototype.addField = function(oField) {

		this.addAggregation("fields", oField);

		if (oField) {
			if (!oField.getMetadata().isInstanceOf("sap.ui.core.IFormContent")) {
				jQuery.sap.log.warning(oField + " is not valid Form content", this);
			}
			_attachDelegate.call(this, oField);
			_updateLabelFor(this);
		}

		return this;

	};

	FormElement.prototype.insertField = function(oField, iIndex) {

		this.insertAggregation("fields", oField, iIndex);

		if (oField) {
			if (!oField.getMetadata().isInstanceOf("sap.ui.core.IFormContent")) {
				jQuery.sap.log.warning(oField + " is not valid Form content", this);
			}
			_attachDelegate.call(this, oField);
			_updateLabelFor(this);
		}

		return this;

	};

	FormElement.prototype.removeField = function(oField) {

		var oRemovedField = this.removeAggregation("fields", oField);
		_detachDelegate.call(this, oRemovedField);
		_updateLabelFor(this);

		return oRemovedField;

	};

	FormElement.prototype.removeAllFields = function() {

		var aRemovedFields = this.removeAllAggregation("fields");

		for ( var i = 0; i < aRemovedFields.length; i++) {
			var oRemovedField = aRemovedFields[i];
			_detachDelegate.call(this, oRemovedField);
		}
		_updateLabelFor(this);

		return aRemovedFields;

	};

	FormElement.prototype.destroyFields = function() {

		var aFields = this.getFields();

		for ( var i = 0; i < aFields.length; i++) {
			var oField = aFields[i];
			_detachDelegate.call(this, oField);
		}

		this.destroyAggregation("fields");

		_updateLabelFor(this);

		return this;

	};

	FormElement.prototype.updateFields = function() {

		var aFields = this.getFields();
		var oField;
		var i = 0;

		for (i = 0; i < aFields.length; i++) {
			oField = aFields[i];
			_detachDelegate.call(this, oField);
		}

		this.updateAggregation("fields");

		aFields = this.getFields();

		for (i = 0; i < aFields.length; i++) {
			oField = aFields[i];
			_attachDelegate.call(this, oField);
		}

		_updateLabelFor(this);

		return this;

	};

	/*
	 * Enhance Aria properties of fields to set aria-labelledby to FormElements label if not set otherwise
	 * Set aria-describedby to the title of the container, but only for the first field in the container
	 * This function is called during rendering.
	 */
	FormElement.prototype.enhanceAccessibilityState = function(oElement, mAriaProps) {

		var oLabel = this.getLabelControl();
		if (oLabel && oLabel != oElement) {

			var sLabelledBy = mAriaProps["labelledby"];
			if (!sLabelledBy) {
				sLabelledBy = oLabel.getId();
			} else {
				var aLabels = sLabelledBy.split(" ");
				if (jQuery.inArray(oLabel.getId(), aLabels) < 0) {
					aLabels.splice(0, 0, oLabel.getId());
					sLabelledBy = aLabels.join(" ");
				}
			}
			mAriaProps["labelledby"] = sLabelledBy;

		}

		return mAriaProps;

	};

	/*
	 * If LayoutData changed on control this may need changes on the layout. So bubble to the form
	 */
	FormElement.prototype.onLayoutDataChange = function(oEvent){

		// call function of parent (if assigned)
		var oParent = this.getParent();
		if (oParent && oParent.onLayoutDataChange) {
			oParent.onLayoutDataChange(oEvent);
		}

	};

	/**
	 * As Elements must not have a DOM reference it is not sure if one exists
	 * If the FormElement has a DOM representation this function returns it,
	 * independent from the ID of this DOM element
	 * @return {Element} The Element's DOM representation or null
	 * @private
	 */
	FormElement.prototype.getRenderedDomRef = function(){

		var that = this;
		var oContainer = this.getParent();

		if (oContainer && oContainer.getElementRenderedDomRef) {
			return oContainer.getElementRenderedDomRef(that);
		}else {
			return null;
		}

	};

	// *** Private helper functions ***

	/*
	 * overwrite Labels isRequired function to check if one of the fields in the element is required,
	 * not only the one directly assigned.
	 */
	function _labelIsRequired(){

		if (this.getRequired && this.getRequired()) {
			return true;
		}

		var oFormElement = this.getParent();
		var aFields = oFormElement.getFields();

		for ( var i = 0; i < aFields.length; i++) {
			var oField = aFields[i];
			if (oField.getRequired && oField.getRequired() === true &&
					(!oField.getEditable || oField.getEditable())) {
				return true;
			}
		}

		return false;

	}

	/*
	 * Update the for association of the related label
	 */
	function _updateLabelFor(oFormElement){
		var aFields = oFormElement.getFields();
		var oField = aFields.length > 0 ? aFields[0] : null;

		var oLabel = oFormElement._oLabel;
		if (oLabel) {
			oLabel.setLabelFor(oField); // as Label is internal of FormElement, we can use original labelFor
		}
		oLabel = oFormElement.getLabel();
		if (oLabel instanceof sap.ui.core.Control /*might also be a string*/) {
			oLabel.setAlternativeLabelFor(oField);
		}
	}

	function _attachDelegate(oField){

		oField.addDelegate(this._oFieldDelegate);
		if (oField.getMetadata().getProperty("required")) {
			oField.attachEvent("_change", _handleControlChange, this);
		}

	}

	function _detachDelegate(oField){

		oField.removeDelegate(this._oFieldDelegate);
		if (oField.getMetadata().getProperty("required")) {
			oField.detachEvent("_change", _handleControlChange, this);
		}

	}

	/*
	 * If onAfterRendering of a field is processed the Form (layout) might need to change it.
	 */
	function _fieldOnAfterRendering(oEvent){

		// call function of parent (if assigned)
		var oParent = this.oElement.getParent();
		if (oParent && oParent.contentOnAfterRendering) {
			oParent.contentOnAfterRendering( this.oElement, oEvent.srcControl);
		}

	}

	function _handleControlChange(oEvent) {

		if (oEvent.getParameter("name") == "required") {
			var oLabel = this.getLabelControl();
			if (oLabel) {
				oLabel.invalidate();
			}
		}

	}

	return FormElement;

}, /* bExport= */ true);

}; // end of sap/ui/layout/form/FormElement.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.form.FormLayout') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.layout.form.FormLayout.
jQuery.sap.declare('sap.ui.layout.form.FormLayout'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/form/FormLayout",['jquery.sap.global', 'sap/ui/core/Control', './Form', 'sap/ui/layout/library'],
	function(jQuery, Control, Form, library) {
	"use strict";

	/**
	 * Constructor for a new sap.ui.layout.form.FormLayout.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Base layout to render a <code>Form</code>.
	 * Other layouts to render a <code>Form</code> must inherit from this one.
	 *
	 * <b>Note:</b> This control must not be used to render a <code>Form</code> in productive applications as it does not fulfill any
	 * design guidelines and usability standards.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.48.5
	 *
	 * @constructor
	 * @public
	 * @since 1.16.0
	 * @alias sap.ui.layout.form.FormLayout
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var FormLayout = Control.extend("sap.ui.layout.form.FormLayout", /** @lends sap.ui.layout.form.FormLayout.prototype */ { metadata : {

		library : "sap.ui.layout",
		properties : {
			/**
			 * Specifies the background color of the <code>Form</code> content.
			 *
			 * <b>Note:</b> The visualization of the different options depends on the theme used.
			 *
			 * @since 1.36.0
			 */
			backgroundDesign : {type : "sap.ui.layout.BackgroundDesign", group : "Appearance", defaultValue : sap.ui.layout.BackgroundDesign.Translucent}
		}
	}});

	/* eslint-disable no-lonely-if */

	FormLayout.prototype.contentOnAfterRendering = function(oFormElement, oControl){

		if (sap.ui.layout.form.FormHelper.bArrowKeySupport) {
			jQuery(oControl.getFocusDomRef()).data("sap.InNavArea", true);
		}

	};

	FormLayout.prototype.toggleContainerExpanded = function(oContainer){

		var bExpanded = oContainer.getExpanded();
		if (this.getDomRef()) {
			if (bExpanded) {
				//show content
				oContainer.$("content").css("display", "");
			} else {
				//hide content
				oContainer.$("content").css("display", "none");
			}
		}

	};

	/*
	 * gets the layout data of an element (container, control...) for the needed layout data type
	 */
	FormLayout.prototype.getLayoutDataForElement = function(oElement, sType){

		var oLayoutData = oElement.getLayoutData();

		var oClass = jQuery.sap.getObject(sType);

		if (!oLayoutData) {
			return undefined;
		} else if (oLayoutData instanceof oClass) {
			return oLayoutData;
		} else if (oLayoutData.getMetadata().getName() == "sap.ui.core.VariantLayoutData") {
			// multiple LayoutData available - search here
			var aLayoutData = oLayoutData.getMultipleLayoutData();
			for ( var i = 0; i < aLayoutData.length; i++) {
				var oLayoutData2 = aLayoutData[i];
				if (oLayoutData2 instanceof oClass) {
					return oLayoutData2;
				}
			}
		}

	};

	/* Keyboard handling
	 * In the FormLayout just a basic keyboard handling is implemented.
	 * This must be enhanced in the other Layouts if needed.
	 *
	 * The main idea is to navigate via arrow keys from control to control
	 * using Tab only the editable/active controls are reached. So the tab-chain is short
	 * Via F6 the navigation goes to the next container
	 * There is an "edit mode" to allow arrow key navigation inside of controls.
	 * For mobile application the Arrow-key navigation should be disabled
	 */

	FormLayout.prototype.onsapright = function(oEvent){

		if (sap.ui.layout.form.FormHelper.bArrowKeySupport) {
			var bRtl = sap.ui.getCore().getConfiguration().getRTL();
			var that = this;

			if (!bRtl) {
				this.navigateForward(oEvent, that);
			} else {
				this.navigateBack(oEvent, that);
			}
		}

	};

	FormLayout.prototype.onsapleft = function(oEvent){

		if (sap.ui.layout.form.FormHelper.bArrowKeySupport) {
			var bRtl = sap.ui.getCore().getConfiguration().getRTL();
			var that = this;

			if (!bRtl) {
				this.navigateBack(oEvent, that);
			} else {
				this.navigateForward(oEvent, that);
			}
		}

	};

	FormLayout.prototype.onsapdown = function(oEvent){

		if (sap.ui.layout.form.FormHelper.bArrowKeySupport) {
			var oControl = oEvent.srcControl;
			var oNewDomRef;
			var oRoot = this.findElement(oControl);
			var oElement = oRoot.element;
			oControl = oRoot.rootControl;
			if (oElement && oElement instanceof sap.ui.layout.form.FormElement) {
				oNewDomRef = this.findFieldBelow(oControl, oElement);
			} else if (oElement && oElement instanceof sap.ui.layout.form.FormContainer) {
				// current control is not inside an Element - maybe a title or expander?
				oNewDomRef = this.findFirstFieldOfNextElement(oElement, 0);
			}

			if (oNewDomRef) {
				jQuery.sap.focus(oNewDomRef);
				oEvent.preventDefault(); // to avoid moving cursor in next field
			}
		}

	};

	FormLayout.prototype.onsapup = function(oEvent){

		if (sap.ui.layout.form.FormHelper.bArrowKeySupport) {
			var oControl = oEvent.srcControl;
			var iCurrentIndex = 0;
			var oNewDomRef;
			var oRoot = this.findElement(oControl);
			var oElement = oRoot.element;
			oControl = oRoot.rootControl;
			if (oElement && oElement instanceof sap.ui.layout.form.FormElement) {
				oNewDomRef = this.findFieldAbove(oControl, oElement);
			} else if (oElement && oElement instanceof sap.ui.layout.form.FormContainer) {
				// current control is not inside an Element - maybe a title or expander?
				var oForm = oElement.getParent();
				iCurrentIndex = oForm.indexOfFormContainer(oElement);
				oNewDomRef = this.findLastFieldOfLastElementInPrevContainer(oForm, iCurrentIndex - 1);
			}

			if (oNewDomRef) {
				jQuery.sap.focus(oNewDomRef);
				oEvent.preventDefault(); // to avoid moving cursor in next field
			}
		}

	};

	FormLayout.prototype.onsaphome = function(oEvent){

		if (sap.ui.layout.form.FormHelper.bArrowKeySupport) {
			var oControl = oEvent.srcControl;
			var iCurrentIndex = 0;
			var oNewDomRef;
			var oRoot = this.findElement(oControl);
			var oElement = oRoot.element;
			var oContainer = oElement.getParent();
			var oForm = oContainer.getParent();

			iCurrentIndex = oForm.indexOfFormContainer(oContainer);
			// actually it's within the same container
			oNewDomRef = this.findFirstFieldOfFirstElementInNextContainer(oForm, iCurrentIndex);

			if (oNewDomRef) {
				jQuery.sap.focus(oNewDomRef);
				oEvent.preventDefault(); // to avoid moving cursor in next field
			}
		}

	};

	FormLayout.prototype.onsaptop = function(oEvent){

		if (sap.ui.layout.form.FormHelper.bArrowKeySupport) {
			var oControl = oEvent.srcControl;
			var oRoot = this.findElement(oControl);
			var oElement = oRoot.element;
			var oNewDomRef;
			var oContainer;

			if (oElement && oElement instanceof sap.ui.layout.form.FormElement) {
				oContainer = oElement.getParent();
			} else if (oElement && oElement instanceof sap.ui.layout.form.FormContainer) {
				// current control is not inside an Element - maybe a title or expander?
				oContainer = oElement;
			}
			var oForm = oContainer.getParent();

			oNewDomRef = this.findFirstFieldOfForm(oForm);

			if (oNewDomRef) {
				jQuery.sap.focus(oNewDomRef);
				oEvent.preventDefault(); // to avoid moving cursor in next field
			}
		}

	};

	FormLayout.prototype.onsapend = function(oEvent){

		if (sap.ui.layout.form.FormHelper.bArrowKeySupport) {
			var oControl = oEvent.srcControl;
			var iCurrentIndex = 0;
			var oNewDomRef;
			var oRoot = this.findElement(oControl);
			var oElement = oRoot.element;
			var oContainer = oElement.getParent();
			var oForm = oContainer.getParent();

			iCurrentIndex = oForm.indexOfFormContainer(oContainer);
			oNewDomRef = this.findLastFieldOfLastElementInPrevContainer(oForm, iCurrentIndex);

			if (oNewDomRef) {
				jQuery.sap.focus(oNewDomRef);
				oEvent.preventDefault(); // to avoid moving cursor in next field
			}
		}

	};

	FormLayout.prototype.onsapbottom = function(oEvent){

		if (sap.ui.layout.form.FormHelper.bArrowKeySupport) {
			var oControl = oEvent.srcControl;
			var oRoot = this.findElement(oControl);
			var oElement = oRoot.element;
			var oNewDomRef;
			var oContainer;

			if (oElement && oElement instanceof sap.ui.layout.form.FormElement) {
				oContainer = oElement.getParent();
			} else if (oElement && oElement instanceof sap.ui.layout.form.FormContainer) {
				// current control is not inside an Element - maybe a title or expander?
				oContainer = oElement;
			}
			var oForm = oContainer.getParent();

			var aContainers = oForm.getFormContainers();
			var iLength = aContainers.length;

			oNewDomRef = this.findLastFieldOfLastElementInPrevContainer(oForm, iLength - 1);

			if (oNewDomRef) {
				jQuery.sap.focus(oNewDomRef);
				oEvent.preventDefault(); // to avoid moving cursor in next field
			}
		}

	};

	FormLayout.prototype.onsapexpand = function(oEvent){

		var oControl = oEvent.srcControl;
		var oRoot = this.findElement(oControl);
		var oElement = oRoot.element;
		var oContainer;

		if (oElement instanceof sap.ui.layout.form.FormContainer) {
			oContainer = oElement; // e.g. expand button
		} else {
			oContainer = oElement.getParent();
		}

		if (oContainer.getExpandable()) {
			oContainer.setExpanded(true);
		}
	};

	FormLayout.prototype.onsapcollapse = function(oEvent){

		var oControl = oEvent.srcControl;
		var oRoot = this.findElement(oControl);
		var oElement = oRoot.element;
		var oContainer;

		if (oElement instanceof sap.ui.layout.form.FormContainer) {
			oContainer = oElement; // e.g. expand button
		} else {
			oContainer = oElement.getParent();
		}

		if (oContainer.getExpandable()) {
			oContainer.setExpanded(false);
		}
	};

	FormLayout.prototype.onsapskipforward = function(oEvent){

		var oControl = oEvent.srcControl;
		var oRoot = this.findElement(oControl);
		var oElement = oRoot.element;
		oControl = oRoot.rootControl;
		var oNewDomRef;
		var oContainer;

		if (oElement && oElement instanceof sap.ui.layout.form.FormElement) {
			oContainer = oElement.getParent();
		} else if (oElement && oElement instanceof sap.ui.layout.form.FormContainer) {
			// current control is not inside an Element - maybe a title or expander?
			oContainer = oElement;
		}
		var oForm = oContainer.getParent();
		var iCurrentIndex = oForm.indexOfFormContainer(oContainer);

		// goto next container
		oNewDomRef = this.findFirstFieldOfFirstElementInNextContainer(oForm, iCurrentIndex + 1);

		if (oNewDomRef) {
			jQuery.sap.focus(oNewDomRef);
			oEvent.preventDefault(); // to avoid moving cursor in next field
		}

	};

	FormLayout.prototype.onsapskipback = function(oEvent){

		var oControl = oEvent.srcControl;
		var oRoot = this.findElement(oControl);
		var oElement = oRoot.element;
		oControl = oRoot.rootControl;
		var oNewDomRef;
		var oContainer;

		if (oElement && oElement instanceof sap.ui.layout.form.FormElement) {
			oContainer = oElement.getParent();
		} else if (oElement && oElement instanceof sap.ui.layout.form.FormContainer) {
			// current control is not inside an Element - maybe a title or expander?
			oContainer = oElement;
		}
		var oForm = oContainer.getParent();
		var aContainers = oForm.getFormContainers();
		var iCurrentIndex = oForm.indexOfFormContainer(oContainer);

		// goto previous container
		while (!oNewDomRef && iCurrentIndex >= 0) {
			var oPrevContainer = aContainers[iCurrentIndex - 1];
			if (!oPrevContainer.getExpandable() || oPrevContainer.getExpanded()) {
				oNewDomRef = this.findFirstFieldOfFirstElementInPrevContainer(oForm, iCurrentIndex - 1);
			}
			iCurrentIndex = iCurrentIndex - 1;
		}

		if (oNewDomRef) {
			jQuery.sap.focus(oNewDomRef);
			oEvent.preventDefault(); // to avoid moving cursor in next field
		}

	};

	FormLayout.prototype.onBeforeFastNavigationFocus = function(oEvent){
		if (jQuery.contains(this.getDomRef(), oEvent.source)) {
			oEvent.srcControl = jQuery(oEvent.source).control(0);
			if (oEvent.forward) {
				this.onsapskipforward(oEvent);
			} else {
				this.onsapskipback(oEvent);
			}
		} else {
			var oNewDomRef = oEvent.forward ? this.findFirstFieldOfForm(this.getParent()) : this.findFirstFieldOfLastContainerOfForm(this.getParent());
			if (oNewDomRef) {
				jQuery.sap.focus(oNewDomRef);
				oEvent.preventDefault();
			}
		}
	};

	FormLayout.prototype.findElement = function(oControl){
		// since the source control can be part of a child control or layout we have to look in the control tree
		// to find the FormElement where the control is assigned

		var oElement = oControl.getParent();
		var oRootControl = oControl;

		while (oElement && !(oElement instanceof sap.ui.layout.form.FormElement) &&
				!(oElement && oElement instanceof sap.ui.layout.form.FormContainer) &&
				!(oElement && oElement instanceof Form)) {
			oRootControl = oElement;
			oElement = oElement.getParent();
		}

		return ({rootControl: oRootControl, element: oElement});

	};

	FormLayout.prototype.navigateForward = function(oEvent){

		var oControl = oEvent.srcControl;
		var iCurrentIndex = 0;
		var oNewDomRef;
		var oRoot = this.findElement(oControl);
		var oElement = oRoot.element;
		oControl = oRoot.rootControl;

		if (oElement && oElement instanceof sap.ui.layout.form.FormElement) {
			if (oControl == oElement.getLabelControl()) {
				iCurrentIndex = -1;
			} else {
				iCurrentIndex = oElement.indexOfField(oControl);
			}
			oNewDomRef = this.findNextFieldOfElement(oElement, iCurrentIndex + 1);

			if (!oNewDomRef) {
				// use 1st field of next Element
				var oContainer = oElement.getParent();
				iCurrentIndex = oContainer.indexOfFormElement(oElement);
				oNewDomRef = this.findFirstFieldOfNextElement(oContainer, iCurrentIndex + 1);

				if (!oNewDomRef) {
					// no next element -> look in next container
					var oForm = oContainer.getParent();
					iCurrentIndex = oForm.indexOfFormContainer(oContainer);
					oNewDomRef = this.findFirstFieldOfFirstElementInNextContainer(oForm, iCurrentIndex + 1);
				}
			}
		} else if (oElement && oElement instanceof sap.ui.layout.form.FormContainer) {
			// current control is not inside an Element - maybe a title or expander?
			oNewDomRef = this.findFirstFieldOfNextElement(oElement, 0);
		}

		if (oNewDomRef) {
			jQuery.sap.focus(oNewDomRef);
			oEvent.preventDefault(); // to avoid moving cursor in next field
		}

	};

	FormLayout.prototype.tabForward = function(oEvent){

		var oForm;
		var oControl = oEvent.srcControl;
		var iCurrentIndex = 0;
		var oNewDomRef;
		var oRoot = this.findElement(oControl);
		var oElement = oRoot.element;
		oControl = oRoot.rootControl;

		if (oElement && oElement instanceof sap.ui.layout.form.FormElement) {
			if (oControl == oElement.getLabelControl()) {
				iCurrentIndex = -1;
			} else {
				iCurrentIndex = oElement.indexOfField(oControl);
			}
			oNewDomRef = this.findNextFieldOfElement(oElement, iCurrentIndex + 1, true);

			if (!oNewDomRef) {
				// use 1st field of next Element
				var oContainer = oElement.getParent();
				iCurrentIndex = oContainer.indexOfFormElement(oElement);
				oNewDomRef = this.findFirstFieldOfNextElement(oContainer, iCurrentIndex + 1, true);

				if (!oNewDomRef) {
					// no next element -> look in next container
					oForm = oContainer.getParent();
					iCurrentIndex = oForm.indexOfFormContainer(oContainer);
					oNewDomRef = this.findFirstFieldOfFirstElementInNextContainer(oForm, iCurrentIndex + 1, true);
				}
			}
		} else if (oElement && oElement instanceof sap.ui.layout.form.FormContainer) {
			// current control is not inside an Element - maybe a title or expander?
			oNewDomRef = this.findFirstFieldOfNextElement(oElement, 0, true);
			if (!oNewDomRef) {
				// no next element -> look in next container
				oForm = oElement.getParent();
				iCurrentIndex = oForm.indexOfFormContainer(oElement);
				oNewDomRef = this.findFirstFieldOfFirstElementInNextContainer(oForm, iCurrentIndex + 1, true);
			}
		}

		if (oNewDomRef) {
			jQuery.sap.focus(oNewDomRef);
			oEvent.preventDefault(); // to avoid moving cursor in next field
		}

	};

	FormLayout.prototype.findNextFieldOfElement = function(oElement, iStartIndex, bTabOver){

		var aFields = oElement.getFields();
		var iLength = aFields.length;
		var oNewDomRef;

		for ( var i = iStartIndex; i < iLength; i++) {
			// find the next enabled control thats rendered
			var oField = aFields[i];
			var oDomRef = this._getDomRef(oField);
			if (bTabOver == true) {
				if ((!oField.getEditable || oField.getEditable()) && (!oField.getEnabled || oField.getEnabled()) && oDomRef) {
					oNewDomRef = oDomRef;
					break;
				}
			} else {
				if ((!oField.getEnabled || oField.getEnabled()) && oDomRef) {
					oNewDomRef = oDomRef;
					break;
				}
			}
		}

		return oNewDomRef;

	};

	FormLayout.prototype.findFirstFieldOfNextElement = function(oContainer, iStartIndex, bTabOver){

		var aElements = oContainer.getFormElements();
		var iLength = aElements.length;
		var oNewDomRef;
		var i = iStartIndex;

		while (!oNewDomRef && i < iLength) {
			var oElement = aElements[i];
			if (bTabOver == true) {
				oNewDomRef = this.findNextFieldOfElement(oElement, 0, true);
			} else {
				oNewDomRef = this.findNextFieldOfElement(oElement, 0);
			}
			i++;
		}

		return oNewDomRef;

	};

	FormLayout.prototype.findFirstFieldOfForm = function(oForm){
		var aContainers = oForm.getFormContainers();
		var oNewDomRef;
		var oContainer = aContainers[0];
		if (!oContainer.getExpandable() || oContainer.getExpanded()) {
			oNewDomRef = this.findFirstFieldOfNextElement(oContainer, 0);
		}

		return oNewDomRef;

	};

	FormLayout.prototype.findFirstFieldOfLastContainerOfForm = function(oForm){
		var oNewDomRef;
		var aContainers = oForm.getFormContainers();
		var iCurrentIndex = aContainers.length;
		// goto previous container
		while (!oNewDomRef && iCurrentIndex >= 0) {
			var oPrevContainer = aContainers[iCurrentIndex - 1];
			if (!oPrevContainer.getExpandable() || oPrevContainer.getExpanded()) {
				oNewDomRef = this.findFirstFieldOfFirstElementInPrevContainer(oForm, iCurrentIndex - 1);
			}
			iCurrentIndex = iCurrentIndex - 1;
		}
		return oNewDomRef;
	};

	FormLayout.prototype.findFirstFieldOfFirstElementInNextContainer = function(oForm, iStartIndex, bTabOver){

		var aContainers = oForm.getFormContainers();
		var iLength = aContainers.length;
		var oNewDomRef;
		var i = iStartIndex;

		while (!oNewDomRef && i < iLength) {
			var oContainer = aContainers[i];
			if (oContainer.getExpandable() && bTabOver) {
				oNewDomRef = oContainer._oExpandButton.getFocusDomRef();
				if (oNewDomRef) {
					break;
				}
			}
			if (!oContainer.getExpandable() || oContainer.getExpanded()) {
				if (bTabOver == true) {
					oNewDomRef = this.findFirstFieldOfNextElement(oContainer, 0, true);
				} else {
					oNewDomRef = this.findFirstFieldOfNextElement(oContainer, 0);
				}
			}
			i++;
		}

		return oNewDomRef;

	};

	FormLayout.prototype.findFirstFieldOfFirstElementInPrevContainer = function(oForm, iStartIndex){

		var aContainers = oForm.getFormContainers();
		var iLength = aContainers.length;
		var oNewDomRef;
		var i = iStartIndex;

		while (!oNewDomRef && i < iLength && i >= 0) {
			var oContainer = aContainers[i];
			if (!oContainer.getExpandable() || oContainer.getExpanded()) {
				oNewDomRef = this.findFirstFieldOfNextElement(oContainer, 0);
			}
			i++;
		}

		return oNewDomRef;

	};

	FormLayout.prototype.navigateBack = function(oEvent){

		var oForm;
		var oControl = oEvent.srcControl;
		var iCurrentIndex = 0;
		var oNewDomRef;
		var oRoot = this.findElement(oControl);
		var oElement = oRoot.element;
		oControl = oRoot.rootControl;

		if (oElement && oElement instanceof sap.ui.layout.form.FormElement) {
			if (oControl == oElement.getLabelControl()) {
				iCurrentIndex = 0;
			} else {
				iCurrentIndex = oElement.indexOfField(oControl);
			}
			oNewDomRef = this.findPrevFieldOfElement(oElement, iCurrentIndex - 1);

			if (!oNewDomRef) {
				// use 1st field of next Element
				var oContainer = oElement.getParent();
				iCurrentIndex = oContainer.indexOfFormElement(oElement);
				oNewDomRef = this.findLastFieldOfPrevElement(oContainer, iCurrentIndex - 1);

				if (!oNewDomRef) {
					// no next element -> look in next container
					oForm = oContainer.getParent();
					iCurrentIndex = oForm.indexOfFormContainer(oContainer);
					oNewDomRef = this.findLastFieldOfLastElementInPrevContainer(oForm, iCurrentIndex - 1);
				}
			}
		} else if (oElement && oElement instanceof sap.ui.layout.form.FormContainer) {
			// current control is not inside an Element - maybe a title or expander?
			oForm = oElement.getParent();
			iCurrentIndex = oForm.indexOfFormContainer(oElement);
			oNewDomRef = this.findLastFieldOfLastElementInPrevContainer(oForm, iCurrentIndex - 1);
		}

		if (oNewDomRef) {
			jQuery.sap.focus(oNewDomRef);
			oEvent.preventDefault(); // to avoid moving cursor in next field
		}

	};

	FormLayout.prototype.tabBack = function(oEvent){

		var oForm;
		var oControl = oEvent.srcControl;
		var iCurrentIndex = 0;
		var oNewDomRef;
		var oRoot = this.findElement(oControl);
		var oElement = oRoot.element;
		oControl = oRoot.rootControl;

		if (oElement && oElement instanceof sap.ui.layout.form.FormElement) {
			if (oControl == oElement.getLabelControl()) {
				iCurrentIndex = 0;
			} else {
				iCurrentIndex = oElement.indexOfField(oControl);
			}
			oNewDomRef = this.findPrevFieldOfElement(oElement, iCurrentIndex - 1, true);

			if (!oNewDomRef) {
				// use 1st field of next Element
				var oContainer = oElement.getParent();
				iCurrentIndex = oContainer.indexOfFormElement(oElement);
				oNewDomRef = this.findLastFieldOfPrevElement(oContainer, iCurrentIndex - 1, true);

				if (!oNewDomRef) {
					// no next element -> look in next container
					oForm = oContainer.getParent();
					iCurrentIndex = oForm.indexOfFormContainer(oContainer);
					if (oContainer.getExpandable()) {
						oNewDomRef = oContainer._oExpandButton.getFocusDomRef();
					}
					if (!oNewDomRef) {
						oNewDomRef = this.findLastFieldOfLastElementInPrevContainer(oForm, iCurrentIndex - 1, true);
					}
				}
			}
		} else if (oElement && oElement instanceof sap.ui.layout.form.FormContainer) {
			// current control is not inside an Element - maybe a title or expander?
			oForm = oElement.getParent();
			iCurrentIndex = oForm.indexOfFormContainer(oElement);
			oNewDomRef = this.findLastFieldOfLastElementInPrevContainer(oForm, iCurrentIndex - 1, true);
		}

		if (oNewDomRef) {
			jQuery.sap.focus(oNewDomRef);
			oEvent.preventDefault(); // to avoid moving cursor in next field
		}

	};

	FormLayout.prototype.findPrevFieldOfElement = function(oElement, iStartIndex, bTabOver){

		var aFields = oElement.getFields();
		var oNewDomRef;

		for ( var i = iStartIndex; i >= 0; i--) {
			// find the next enabled control thats rendered
			var oField = aFields[i];
			var oDomRef = this._getDomRef(oField);
			if (bTabOver == true) {
				if ((!oField.getEditable || oField.getEditable()) && (!oField.getEnabled || oField.getEnabled()) && oDomRef) {
					oNewDomRef = oDomRef;
					break;
				}
			} else {
				if ((!oField.getEnabled || oField.getEnabled()) && oDomRef) {
					oNewDomRef = oDomRef;
					break;
				}
			}
		}

		return oNewDomRef;

	};

	FormLayout.prototype.findLastFieldOfPrevElement = function(oContainer, iStartIndex, bTabOver){

		var aElements = oContainer.getFormElements();
		var oNewDomRef;
		var i = iStartIndex;

		while (!oNewDomRef && i >= 0) {
			var oElement = aElements[i];
			var iLength = oElement.getFields().length;

			if (bTabOver == true) {
				oNewDomRef = this.findPrevFieldOfElement(oElement, iLength - 1, true);
			} else {
				oNewDomRef = this.findPrevFieldOfElement(oElement, iLength - 1);
			}
			i--;
		}

		return oNewDomRef;

	};

	FormLayout.prototype.findLastFieldOfLastElementInPrevContainer = function(oForm, iStartIndex, bTabOver){

		var aContainers = oForm.getFormContainers();
		var oNewDomRef;
		var i = iStartIndex;

		while (!oNewDomRef && i >= 0) {
			var oContainer = aContainers[i];
			if (oContainer.getExpandable() && !oContainer.getExpanded() && bTabOver) {
				oNewDomRef = oContainer._oExpandButton.getFocusDomRef();
				if (oNewDomRef) {
					break;
				}
			}
			if (!oContainer.getExpandable() || oContainer.getExpanded()) {
				var iLength = oContainer.getFormElements().length;
				if (bTabOver == true) {
					oNewDomRef = this.findLastFieldOfPrevElement(oContainer, iLength - 1, true);
				} else {
					oNewDomRef = this.findLastFieldOfPrevElement(oContainer, iLength - 1, 0);
				}
			}
			i--;
		}

		return oNewDomRef;

	};

	FormLayout.prototype.findFieldBelow = function(oControl, oElement){

		var oContainer = oElement.getParent();
		var iCurrentIndex = oContainer.indexOfFormElement(oElement);
		var oNewDomRef = this.findFirstFieldOfNextElement(oContainer, iCurrentIndex + 1);

		if (!oNewDomRef) {
			// no next element -> look in next container
			var oForm = oContainer.getParent();
			iCurrentIndex = oForm.indexOfFormContainer(oContainer);
			oNewDomRef = this.findFirstFieldOfFirstElementInNextContainer(oForm, iCurrentIndex + 1);
		}

		return oNewDomRef;

	};

	FormLayout.prototype.findFieldAbove = function(oControl, oElement){

		var oContainer = oElement.getParent();
		var iCurrentIndex = oContainer.indexOfFormElement(oElement);

		var aElements = oContainer.getFormElements();
		var oNewDomRef;
		var i = iCurrentIndex - 1;

		while (!oNewDomRef && i >= 0) {
			var oMyElement = aElements[i];
			oNewDomRef = this.findPrevFieldOfElement(oMyElement, 0);
			i--;
		}

		if (!oNewDomRef) {
			// no next element -> look in previous container
			var oForm = oContainer.getParent();
			iCurrentIndex = oForm.indexOfFormContainer(oContainer);
			oNewDomRef = this.findLastFieldOfLastElementInPrevContainer(oForm, iCurrentIndex - 1);
		}

		return oNewDomRef;

	};

	FormLayout.prototype._getDomRef = function( oControl ){

		// get focusDOMRef of the control, but only if it's focusable
		var oDomRef = oControl.getFocusDomRef();
		if (!jQuery(oDomRef).is(":sapFocusable")) {
			oDomRef = undefined;
		}

		return oDomRef;

	};

	/**
	 * As Elements must not have a DOM reference it is not sure if one exists
	 * In this basic <code>FormLayout</code> each <code>FormContainer</code> has its own DOM.
	 * @param {sap.ui.layout.form.FormContainer} oContainer <code>FormContainer</code>
	 * @return {Element} The Element's DOM representation or null
	 * @private
	 */
	FormLayout.prototype.getContainerRenderedDomRef = function(oContainer) {

		if (this.getDomRef()) {
			return jQuery.sap.domById(oContainer.getId());
		}else {
			return null;
		}

	};

	/**
	 * As Elements must not have a DOM reference it is not sure if one exists
	 * In this basic <code>FormLayout</code> each <code>FormElement</code> has its own DOM.
	 * @param {sap.ui.layout.form.FormElement} oElement <code>FormElement</code>
	 * @return {Element} The Element's DOM representation or null
	 * @private
	 */
	FormLayout.prototype.getElementRenderedDomRef = function(oElement) {

		if (this.getDomRef()) {
			return jQuery.sap.domById(oElement.getId());
		}else {
			return null;
		}

	};

	return FormLayout;

}, /* bExport= */ true);

}; // end of sap/ui/layout/form/FormLayout.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.form.GridContainerData') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.layout.form.GridContainerData.
jQuery.sap.declare('sap.ui.layout.form.GridContainerData'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.LayoutData'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/form/GridContainerData",['jquery.sap.global', 'sap/ui/core/LayoutData', 'sap/ui/layout/library'],
	function(jQuery, LayoutData, library) {
	"use strict";

	/**
	 * Constructor for a new sap.ui.layout.form.GridContainerData.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * The <code>GridLayout</code>-specific layout data for <code>FormContainers</code>.
	 * @extends sap.ui.core.LayoutData
	 *
	 * @author SAP SE
	 * @version 1.48.5
	 *
	 * @constructor
	 * @public
	 * @since 1.16.0
	 * @alias sap.ui.layout.form.GridContainerData
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var GridContainerData = LayoutData.extend("sap.ui.layout.form.GridContainerData", /** @lends sap.ui.layout.form.GridContainerData.prototype */ { metadata : {

		library : "sap.ui.layout",
		properties : {

			/**
			 * If set, the container takes half the width of the <code>Form</code> (8 cells), if not it takes the full width (16 cells).
			 * If the <code>GridLayout</code> is set to <code>singleColumn</code>, the full width of the grid is only 8 cells. So containers are rendered only once per row.
			 */
			halfGrid : {type : "boolean", group : "Misc", defaultValue : false}
		}
	}});

	///**
	// * This file defines behavior for the control,
	// */
	//sap.ui.commons.form.GridLayoutdata.prototype.init = function(){
	//   // do something for initialization...
	//};

	return GridContainerData;

}, /* bExport= */ true);

}; // end of sap/ui/layout/form/GridContainerData.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.form.GridElementData') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.layout.form.GridElementData.
jQuery.sap.declare('sap.ui.layout.form.GridElementData'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.LayoutData'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/form/GridElementData",['jquery.sap.global', 'sap/ui/core/LayoutData', 'sap/ui/layout/library'],
	function(jQuery, LayoutData, library) {
	"use strict";

	/**
	 * Constructor for a new sap.ui.layout.form.GridElementData.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * The <code>GridLayout</code>-specific layout data for <code>FormElement</code> fields.
	 * @extends sap.ui.core.LayoutData
	 *
	 * @author SAP SE
	 * @version 1.48.5
	 *
	 * @constructor
	 * @public
	 * @since 1.16.0
	 * @alias sap.ui.layout.form.GridElementData
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var GridElementData = LayoutData.extend("sap.ui.layout.form.GridElementData", /** @lends sap.ui.layout.form.GridElementData.prototype */ { metadata : {

		library : "sap.ui.layout",
		properties : {

			/**
			 * Number of cells in horizontal direction.
			 *
			 * If set to <code>auto</code>, the size is determined by the number of fields and the available cells. For labels the auto size is 3 cells.
			 *
			 * If set to <code>full</code>, only one field is allowed within the <code>FormElement</code>. It gets the full width of the row and the label is displayed above.
			 *
			 * <b>Note:</b> For labels, the full size setting has no effect.
			 */
			hCells : {type : "sap.ui.layout.form.GridElementCells", group : "Appearance", defaultValue : 'auto'},

			/**
			 * Number of cells in vertical direction.
			 *
			 * <b>Note:</b> This property has no effect on labels.
			 */
			vCells : {type : "int", group : "Appearance", defaultValue : 1}
		}
	}});

	///**
	// * This file defines behavior for the control,
	// */
	//sap.ui.commons.form.GridElementData.prototype.init = function(){
	//   // do something for initialization...
	//};

	return GridElementData;

}, /* bExport= */ true);

}; // end of sap/ui/layout/form/GridElementData.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.form.GridLayout') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.layout.form.GridLayout.
jQuery.sap.declare('sap.ui.layout.form.GridLayout'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/form/GridLayout",['jquery.sap.global', './FormLayout', './GridContainerData', './GridElementData', 'sap/ui/layout/library'],
	function(jQuery, FormLayout, GridContainerData, GridElementData, library) {
	"use strict";

	/**
	 * Constructor for a new sap.ui.layout.form.GridLayout.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * This <code>FormLayout</code> renders a <code>Form</code> using an HTML-table based grid.
	 * This can be a 16 column grid or an 8 column grid. The grid is stable, so the alignment of the fields is the same for all screen sizes or widths of the <code>Form</code>.
	 * Only the width of the single grid columns depends on the available width.
	 *
	 * To adjust the appearance inside the <code>GridLayout</code>, you can use <code>GridContainerData</code> for <code>FormContainers</code>
	 * and <code>GridElementData</code> for content fields.
	 *
	 * <b>Note:</b> If content fields have a <code>width</code> property this will be ignored, as the width of the controls is set by the grid cells.
	 *
	 * This control cannot be used stand-alone, it just renders a <code>Form</code>, so it must be assigned to a <code>Form</code> using the <code>layout</code> aggregation.
	 * @extends sap.ui.layout.form.FormLayout
	 *
	 * @author SAP SE
	 * @version 1.48.5
	 *
	 * @constructor
	 * @public
	 * @since 1.16.0
	 * @alias sap.ui.layout.form.GridLayout
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var GridLayout = FormLayout.extend("sap.ui.layout.form.GridLayout", /** @lends sap.ui.layout.form.GridLayout.prototype */ { metadata : {

		library : "sap.ui.layout",
		properties : {

			/**
			 * If set, the grid renders only one <code>FormContainer</code> per column. That means one <code>FormContainer</code> is below the other. The whole grid has 8 cells per row.
			 *
			 * If not set, <code>FormContainer</code> can use the full width of the grid or two <code>FormContainers</code> can be placed beside each other. In this case the whole grid has 16 cells per row.
			 */
			singleColumn : {type : "boolean", group : "Misc", defaultValue : false}
		}
	}});

	GridLayout.prototype.toggleContainerExpanded = function(oContainer){

		// rerendering of the form is needed
		this.invalidate();

	};

	GridLayout.prototype.onAfterRendering = function(){

		// set tabindex of expander buttons to -1 to prevent tabbing from outside the Form
		// directly to the expander
		var oForm = this.getParent();
		if (oForm) {
			var aContainers = oForm.getFormContainers();
			for ( var i = 0; i < aContainers.length; i++) {
				var oContainer = aContainers[i];
				if (oContainer.getExpandable() && oContainer._oExpandButton) {
					oContainer._oExpandButton.$().attr("tabindex", "-1");
				}
			}
		}

	};

	/*
	 * If onAfterRendering of a field is processed the width must be set to 100%
	 */
	GridLayout.prototype.contentOnAfterRendering = function(oFormElement, oControl){

		FormLayout.prototype.contentOnAfterRendering.apply(this, arguments);

		if (!oControl.getFormDoNotAdjustWidth || !oControl.getFormDoNotAdjustWidth()) {
			oControl.$().css("width", "100%");
		}

	};

	/*
	 * If LayoutData changed on one control this needs to rerender the whole table
	 * because it may influence other rows and columns
	 */
	GridLayout.prototype.onLayoutDataChange = function(oEvent){

		if (this.getDomRef()) {
			// only if already rendered
			this.invalidate();
		}

	};

	GridLayout.prototype.onsaptabnext = function(oEvent){

		this.tabForward(oEvent);

	};

	GridLayout.prototype.onsaptabprevious = function(oEvent){

		this.tabBack(oEvent);

	};

	GridLayout.prototype.findFieldOfElement = function(oElement, iStartIndex, iLeft){

		if (!iLeft) {
			return FormLayout.prototype.findPrevFieldOfElement.apply(this, arguments);
		}

		if (!oElement.getVisible()) {
			return null;
		}

		var aFields = oElement.getFields();
		var oNewDomRef;

		var iIndex = aFields.length;
		iStartIndex = iIndex - 1;


		for ( var i = iStartIndex; i >= 0; i--) {
			// find the next enabled control thats rendered
			var oField = aFields[i];
			var iLeftnew = oField.$().offset().left;
			if (iLeft < iLeftnew && i != 0) {
				continue;
			}
			var oDomRef = this._getDomRef(oField);
			if ((!oField.getEnabled || oField.getEnabled()) && oDomRef) {
				oNewDomRef = oDomRef;
				break;
			}
		}

		return oNewDomRef;

	};

	GridLayout.prototype.findFieldBelow = function(oControl, oElement){

		var oContainer = oElement.getParent();
		var iCurrentIndex = oContainer.indexOfFormElement(oElement);
		var oNewDomRef;

		if (oContainer.getVisible()) {
			var aElements = oContainer.getFormElements();
			var iMax = aElements.length;
			var i = iCurrentIndex + 1;
			var iLeft = oControl.$().offset().left;

			while (!oNewDomRef && i < iMax) {
				var oNewElement = aElements[i];
				oNewDomRef = this.findFieldOfElement(oNewElement, 0, iLeft);
				i++;
			}
		}

		if (!oNewDomRef) {
			// no next element -> look in next container
			var oForm = oContainer.getParent();
			iCurrentIndex = oForm.indexOfFormContainer(oContainer);
			oNewDomRef = this.findFirstFieldOfFirstElementInNextContainer(oForm, iCurrentIndex + 1);
		}

		return oNewDomRef;

	};

	GridLayout.prototype.findFieldAbove = function(oControl, oElement){

		var oContainer = oElement.getParent();
		var iCurrentIndex = oContainer.indexOfFormElement(oElement);
		var oNewDomRef;

		if (oContainer.getVisible()) {
			var aElements = oContainer.getFormElements();
			var i = iCurrentIndex - 1;
			var iLeft = oControl.$().offset().left;

			while (!oNewDomRef && i >= 0) {
				var oNewElement = aElements[i];
				oNewDomRef = this.findFieldOfElement(oNewElement, 0, iLeft);
				i--;
			}
		}

		if (!oNewDomRef) {
			// no next element -> look in previous container
			var oForm = oContainer.getParent();
			iCurrentIndex = oForm.indexOfFormContainer(oContainer);
			oNewDomRef = this.findLastFieldOfLastElementInPrevContainer(oForm, iCurrentIndex - 1);
		}

		return oNewDomRef;

	};

	/**
	 * As Elements must not have a DOM reference it is not sure if one exists
	 * In <code>GridLayout</code> a <code>FormContainer</code> can't have a surrounding DOM element,
	 * so it always returns null
	 * @param {sap.ui.layout.form.FormContainer} oContainer <code>FormContainer</code>
	 * @return {Element} The Element's DOM representation or null
	 * @private
	 */
	GridLayout.prototype.getContainerRenderedDomRef = function(oContainer) {

		return null;

	};

	/**
	 * As Elements must not have a DOM reference it is not sure if one exists.
	 * In this layout a <code>FormElement</code> only has a DOM representation if its <code>FormContainer</code>
	 * has the whole width
	 * @param {sap.ui.layout.form.FormElement} oElement <code>FormElement</code>
	 * @return {Element} The Element's DOM representation or null
	 * @private
	 */
	GridLayout.prototype.getElementRenderedDomRef = function(oElement) {

		if (this.getDomRef()) {
			var bSingleColumn = this.getSingleColumn();
			var oContainer = oElement.getParent();
			var oContainerData = this.getLayoutDataForElement(oContainer, "sap.ui.layout.form.GridContainerData");
			var that = this;

			if ((bSingleColumn || !oContainerData || !oContainerData.getHalfGrid()) && !this.getRenderer().checkFullSizeElement(that, oElement) ) {
				return jQuery.sap.domById(oElement.getId());
			}
		}

		return null;

	};

	return GridLayout;

}, /* bExport= */ true);

}; // end of sap/ui/layout/form/GridLayout.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.form.ResponsiveGridLayout') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.layout.form.ResponsiveGridLayout.
jQuery.sap.declare('sap.ui.layout.form.ResponsiveGridLayout'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/form/ResponsiveGridLayout",['jquery.sap.global', 'sap/ui/layout/Grid', 'sap/ui/layout/GridData', './FormLayout', 'sap/ui/layout/library'],
	function(jQuery, Grid, GridData, FormLayout, library) {
	"use strict";

	/**
	 * Constructor for a new <code>sap.ui.layout.form.ResponsiveGridLayout</code>.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * The <code>ResponsiveGridLayout</code> control renders a <code>Form</code> using a responsive grid. Internally the <code>Grid</code> control is used for rendering.
	 * Using this layout, the <code>Form</code> is rendered in a responsive way.
	 * Depending on the available space, the <code>FormContainers</code> are rendered in one or different columns and the labels are rendered in the same row as the fields or above the fields.
	 * This behavior can be influenced by the properties of this layout control.
	 *
	 * On the <code>FormContainers</code>, labels and content fields, <code>GridData</code> can be used to change the default rendering.
	 * <code>GridData</code> is not supported for <code>FormElements</code>.
	 *
	 * <b>Note:</b> If <code>GridData</code> is used, this may result in a much more complex layout than the default one.
	 * This means that in some cases, the calculation for the other content may not bring the expected result.
	 * In such cases, <code>GridData</code> should be used for all content controls to disable the default behavior.
	 *
	 * This control cannot be used stand-alone, it just renders a <code>Form</code>, so it must be assigned to a <code>Form</code> using the <code>layout</code> aggregation.
	 * @extends sap.ui.layout.form.FormLayout
	 * @version 1.48.5
	 *
	 * @constructor
	 * @public
	 * @since 1.16.0
	 * @alias sap.ui.layout.form.ResponsiveGridLayout
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ResponsiveGridLayout = FormLayout.extend("sap.ui.layout.form.ResponsiveGridLayout", /** @lends sap.ui.layout.form.ResponsiveGridLayout.prototype */ { metadata : {

		library : "sap.ui.layout",
		properties : {

			/**
			 * Default span for labels in extra large size.
			 *
			 * <b>Note:</b> If the default value -1 is not overwritten with the meaningful one then the <code>labelSpanL</code> value is used.
			 * @since 1.34.0
			 */
			labelSpanXL : {type : "int", group : "Misc", defaultValue : -1},

			/**
			 * Default span for labels in large size.
			 *
			 * <b>Note:</b> If <code>adjustLabelSpanThis</code> is set, this property is only used if more than 1 <code>FormContainer</code> is in one line. If only 1 <code>FormContainer</code> is in the line, then the <code>labelSpanM</code> value is used.
			 * @since 1.16.3
			 */
			labelSpanL : {type : "int", group : "Misc", defaultValue : 4},

			/**
			 * Default span for labels in medium size.
			 *
			 * <b>Note:</b> If <code>adjustLabelSpanThis</code> is set this property is used for full-size <code>FormContainers</code>. If more than one <code>FormContainer</code> is in one line, <code>labelSpanL</code> is used.
			 * @since 1.16.3
			 */
			labelSpanM : {type : "int", group : "Misc", defaultValue : 2},

			/**
			 * Default span for labels in small size.
			 * @since 1.16.3
			 */
			labelSpanS : {type : "int", group : "Misc", defaultValue : 12},

			/**
			 * If set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the number of <code>FormContainers</code> in one row.
			 * If only one <code>FormContainer</code> is displayed in one row, <code>labelSpanM</code> is used to define the size of the label.
			 * This is the same for medium and large <code>Forms</code>.
			 * This is done to align the labels on forms where full-size <code>FormContainers</code> and multiple-column rows are used in the same <code>Form</code>
			 * (because every <code>FormContainer</code> has its own <code>Grid</code> inside).
			 *
			 * If not set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the <code>Form</code> size.
			 * The number of <code>FormContainers</code> doesn't matter in this case.
			 * @since 1.34.0
			 */
			adjustLabelSpan : {type : "boolean", group : "Misc", defaultValue : true},

			/**
			 * Number of grid cells that are empty at the end of each line on extra large size.
			 *
			 * <b>Note:</b> If the default value -1 is not overwritten with the meaningful one then the <code>emptySpanL</code> value is used.
			 * @since 1.34.0
			 */
			emptySpanXL : {type : "int", group : "Misc", defaultValue : -1},

			/**
			 * Number of grid cells that are empty at the end of each line on large size.
			 * @since 1.16.3
			 */
			emptySpanL : {type : "int", group : "Misc", defaultValue : 0},

			/**
			 * Number of grid cells that are empty at the end of each line on medium size.
			 * @since 1.16.3
			 */
			emptySpanM : {type : "int", group : "Misc", defaultValue : 0},

			/**
			 * Number of grid cells that are empty at the end of each line on small size.
			 * @since 1.16.3
			 */
			emptySpanS : {type : "int", group : "Misc", defaultValue : 0},

			/**
			 * Number of columns for extra large size.
			 *
			 * The number of columns for extra large size must not be smaller than the number of columns for large size.
			 * <b>Note:</b> If the default value -1 is not overwritten with the meaningful one then the <code>columnsL</code> value is used (from the backward compatibility reasons).
			 * @since 1.34.0
			 */
			columnsXL : {type : "int", group : "Misc", defaultValue : -1},

			/**
			 * Number of columns for large size.
			 *
			 * The number of columns for large size must not be smaller than the number of columns for medium size.
			 * @since 1.16.3
			 */
			columnsL : {type : "int", group : "Misc", defaultValue : 2},

			/**
			 * Number of columns for medium size.
			 * @since 1.16.3
			 */
			columnsM : {type : "int", group : "Misc", defaultValue : 1},

			/**
			 * If the <code>Form</code> contains only one single <code>FormContainer</code> and this property is set,
			 * the <code>FormContainer</code> is displayed using the full size of the <code>Form</code>.
			 * In this case the properties <code>columnsXL</code>, <code>columnsL</code> and <code>columnsM</code> are ignored.
			 *
			 * In all other cases the <code>FormContainer</code> is displayed in the size of one column.
			 * @since 1.34.0
			 */
			singleContainerFullSize : {type : "boolean", group : "Misc", defaultValue : true},

			/**
			 * Breakpoint (in pixel) between large size and extra large (XL) size.
			 * @since 1.34.0
			 */
			breakpointXL : {type : "int", group : "Misc", defaultValue : 1440},

			/**
			 * Breakpoint (in pixel) between Medium size and Large size.
			 * @since 1.16.3
			 */
			breakpointL : {type : "int", group : "Misc", defaultValue : 1024},

			/**
			 * Breakpoint (in pixel) between Small size and Medium size.
			 * @since 1.16.3
			 */
			breakpointM : {type : "int", group : "Misc", defaultValue : 600}
		}
	}});

	/*
	 * The ResponsiveGridLayout uses Grid controls to render the Form
	 * If more than one FormContainer is used, there is an outer Grid (mainGrid) that holds the FormContainers.
	 * Each FormContainer holds its own Grid where the FormElements content is placed.
	 * If a FormContainer has a Title or is expandable it is rendered as a ResponsiveGridLayoutPanel.
	 * The panels and Grid layouts are stored in this.mContainers. This has the following structure:
	 * - For each FormContainer there is an entry inside the object. (this.mContainers[FormContainerId])
	 * - For each FormContainer there is an array with 2 entries:
	 *   - [0]: The Panel that renders the Container (undefined if no panel is used)
	 *   - [1]: The Grid that holds the Containers content
	 *          - the getLayoutData function of this Grid is overwritten to get the LayoutData of the FormContainer
	 *            (If no panel is used)
	 *
	 * It must make sure that this object is kept up to date, so for this reason it is filled onBeforeRendering. Entries that are no longer used are deleted.
	 *
	*/

	sap.ui.core.Control.extend("sap.ui.layout.form.ResponsiveGridLayoutPanel", {

		metadata : {
			aggregations: {
				"content"   : {type: "sap.ui.layout.Grid", multiple: false}
			},
			associations: {
				"container" : {type: "sap.ui.layout.form.FormContainer", multiple: false},
				"layout"    : {type: "sap.ui.layout.form.ResponsiveLayout", multiple: false}
			}
		},

		getLayoutData :  function(){

			// only ResponsiveFlowLayoutData are interesting
			var oContainer = sap.ui.getCore().byId(this.getContainer());
			var oLayout    = sap.ui.getCore().byId(this.getLayout());
			var oLD;
			if (oLayout && oContainer) {
				oLD = oLayout.getLayoutDataForElement(oContainer, "sap.ui.layout.GridData");
			}
			if (oLD) {
				return oLD;
			} else {
				return this.getAggregation("layoutData");
			}

		},

		getCustomData :  function(){

			var oContainer = sap.ui.getCore().byId(this.getContainer());
			if (oContainer) {
				return oContainer.getCustomData();
			}

		},

		refreshExpanded :  function(){

			var oContainer = sap.ui.getCore().byId(this.getContainer());
			if (oContainer) {
				if (oContainer.getExpanded()) {
					this.$().removeClass("sapUiRGLContainerColl");
				} else {
					this.$().addClass("sapUiRGLContainerColl");
				}
			}
		},

		renderer : function(oRm, oPanel) {

			var oContainer = sap.ui.getCore().byId(oPanel.getContainer());
			var oLayout    = sap.ui.getCore().byId(oPanel.getLayout());
			var oContent   = oPanel.getContent();

			var bExpandable = oContainer.getExpandable();
			var sTooltip = oContainer.getTooltip_AsString();
			var oToolbar = oContainer.getToolbar();
			var oTitle = oContainer.getTitle();

			oRm.write("<div");
			oRm.writeControlData(oPanel);
			oRm.addClass("sapUiRGLContainer");
			if (bExpandable && !oContainer.getExpanded()) {
				oRm.addClass("sapUiRGLContainerColl");
			}
			if (oToolbar) {
				oRm.addClass("sapUiFormContainerToolbar");
			} else if (oTitle) {
				oRm.addClass("sapUiFormContainerTitle");
			}

			if (sTooltip) {
				oRm.writeAttributeEscaped('title', sTooltip);
			}
			oRm.writeClasses();

			oLayout.getRenderer().writeAccessibilityStateContainer(oRm, oContainer);

			oRm.write(">");

			// container header
			if (oToolbar) {
				oRm.renderControl(oToolbar);
			} else if (oContainer.getTitle()) {
				oLayout.getRenderer().renderTitle(oRm, oTitle, oContainer._oExpandButton, bExpandable, false, oContainer.getId());
			}

			if (oContent) {
				oRm.write("<div");
				oRm.addClass("sapUiRGLContainerCont");
				oRm.writeClasses();
				oRm.write(">");
				// container is not expandable or is expanded -> render elements
				oRm.renderControl(oContent);
				oRm.write("</div>");
			}

			oRm.write("</div>");
		}

	});

	/* eslint-disable no-lonely-if */

	ResponsiveGridLayout.prototype.init = function(){

		this.mContainers = {}; //association of container to panel and Grid
		this.oDummyLayoutData = new GridData(this.getId() + "--Dummy");
	};

	ResponsiveGridLayout.prototype.exit = function(){

		var that = this;

		// clear panels
		for ( var sContainerId in this.mContainers) {
			_cleanContainer(that, sContainerId);
		}

		// clear main Grid
		if (this._mainGrid) {
			this._mainGrid.destroy();
			delete this._mainGrid;
		}

		this.oDummyLayoutData.destroy();
		this.oDummyLayoutData = undefined;

	};

	ResponsiveGridLayout.prototype.onBeforeRendering = function( oEvent ){

		var oForm = this.getParent();
		if (!oForm || !(oForm instanceof sap.ui.layout.form.Form)) {
			// layout not assigned to form - nothing to do
			return;
		}

		oForm._bNoInvalidate = true; // don't invalidate Form if only the Grids, Panels and LayoutData are created or changed)
		var that = this;
		_createPanels(that, oForm);
		_createMainGrid(that, oForm);
		oForm._bNoInvalidate = false;

	};

	ResponsiveGridLayout.prototype.onAfterRendering = function( oEvent ){

		// if main grid is used, deregister resize listeners of container grids. Because resize is triggered from main grid
		// container grids can't resize if main grid is not resized.
		if (this._mainGrid && this._mainGrid.__bIsUsed ) {
			for ( var sContainerId in this.mContainers) {
				if (this.mContainers[sContainerId][1]._sContainerResizeListener) {
					sap.ui.core.ResizeHandler.deregister(this.mContainers[sContainerId][1]._sContainerResizeListener);
					this.mContainers[sContainerId][1]._sContainerResizeListener = null;
				}
			}
		}

	};

	/*
	 * If onAfterRendering of a field is processed, the width must be set to 100% (if no other width set)
	 */
	ResponsiveGridLayout.prototype.contentOnAfterRendering = function(oFormElement, oControl){

		FormLayout.prototype.contentOnAfterRendering.apply(this, arguments);

		if (oControl.getWidth && ( !oControl.getWidth() || oControl.getWidth() == "auto" ) &&
				(!oControl.getFormDoNotAdjustWidth || !oControl.getFormDoNotAdjustWidth())) {
			oControl.$().css("width", "100%");
		}

	};

	ResponsiveGridLayout.prototype.toggleContainerExpanded = function(oContainer){

		//adapt the corresponding panel
		var sContainerId = oContainer.getId();
		if (this.mContainers[sContainerId] && this.mContainers[sContainerId][0]) {
			var oPanel = this.mContainers[sContainerId][0];
			oPanel.refreshExpanded();
		}

	};

	ResponsiveGridLayout.prototype.onLayoutDataChange = function(oEvent){

		var oSource = oEvent.srcControl;

		// if layoutData changed for a Container, Element, or Field call the
		// onLayoutDataChange function of the parent Grid

		if (oSource instanceof sap.ui.layout.form.FormContainer) {
			if (this._mainGrid) {
				this._mainGrid.onLayoutDataChange(oEvent);
			}
		} else if (!(oSource instanceof sap.ui.layout.form.FormElement)) { // LayoutData on FormElement not supported in ResponsiveGridLayout
			var oParent = oSource.getParent();
			if (oParent instanceof sap.ui.layout.form.FormElement) {
				var oContainer = oParent.getParent();
				var sContainerId = oContainer.getId();
				if (this.mContainers[sContainerId] && this.mContainers[sContainerId][1]) {
					this.mContainers[sContainerId][1].onLayoutDataChange(oEvent);
				}
			}
		}

	};

	ResponsiveGridLayout.prototype.onsapup = function(oEvent){
		this.onsapleft(oEvent);
	};

	ResponsiveGridLayout.prototype.onsapdown = function(oEvent){
		this.onsapright(oEvent);
	};

	/**
	 * As Elements must not have a DOM reference it is not clear if one exists.
	 * If the <code>FormContainer</code> has a title or is expandable an internal panel is rendered.
	 * In this case, the panel's DOM reference is returned, otherwise the DOM reference
	 * of the <code>Grid</code> rendering the container's content.
	 * @param {sap.ui.layout.form.FormContainer} oContainer <code>FormContainer</code>
	 * @return {Element} The Element's DOM representation or null
	 * @private
	 */
	ResponsiveGridLayout.prototype.getContainerRenderedDomRef = function(oContainer) {

		if (this.getDomRef()) {
			var sContainerId = oContainer.getId();
			if (this.mContainers[sContainerId]) {
				if (this.mContainers[sContainerId][0]) {
					var oPanel = this.mContainers[sContainerId][0];
					return oPanel.getDomRef();
				}else if (this.mContainers[sContainerId][1]){
					// no panel used -> return Grid
					var oGrid = this.mContainers[sContainerId][1];
					return oGrid.getDomRef();
				}
			}
		}

		return null;

	};

	/**
	 * As Elements must not have a DOM reference it is not clear if one exists.
	 * In this Layout a <code>FormElement</code> has no DOM representation,
	 * so null will always be returned
	 * @param {sap.ui.layout.form.FormElement} oElement <code>FormElement</code>
	 * @return {Element} The Element's DOM representation or null
	 * @private
	 */
	ResponsiveGridLayout.prototype.getElementRenderedDomRef = function(oElement) {

		return null;

	};

	function _createPanels( oLayout, oForm ) {

		var aContainers = oForm.getFormContainers();
		var iLength = aContainers.length;
		var iVisibleContainers = 0;
		var iVisibleContainer = 0;
		var aVisibleContainers = [];
		var oPanel;
		var oGrid;
		var oContainer;
		var sContainerId;
		var i = 0;
		for ( i = 0; i < iLength; i++) {
			oContainer = aContainers[i];
			oContainer._checkProperties();
			if (oContainer.getVisible()) {
				iVisibleContainers++;
				aVisibleContainers.push(oContainer);
			}
		}
		for ( i = 0; i < iVisibleContainers; i++) {
			oContainer = aVisibleContainers[i];
			if (oContainer.getVisible()) {
				iVisibleContainer++;
				sContainerId = oContainer.getId();
				oPanel = undefined;
				oGrid = undefined;
				var oContainerNext = aVisibleContainers[i + 1];
				if (oLayout.mContainers[sContainerId] && oLayout.mContainers[sContainerId][1]) {
					// Grid already created
					oGrid = oLayout.mContainers[sContainerId][1];
				} else {
					oGrid = _createGrid(oLayout, oContainer);
				}

				var oTitle = oContainer.getTitle();
				var oToolbar = oContainer.getToolbar();
				if (oToolbar || oTitle || oContainer.getExpandable()) {
					// only if container has a title a panel is used
					if (oLayout.mContainers[sContainerId] && oLayout.mContainers[sContainerId][0]) {
						// Panel already created
						oPanel = oLayout.mContainers[sContainerId][0];
					} else {
						oPanel = _createPanel(oLayout, oContainer, oGrid);
						_changeGetLayoutDataOfGrid(oGrid, true);
					}
					_setLayoutDataForLinebreak(oPanel, oContainer, iVisibleContainer, oContainerNext, iVisibleContainers);
				} else {
					if (oLayout.mContainers[sContainerId] && oLayout.mContainers[sContainerId][0]) {
						// panel not longer needed
						_deletePanel(oLayout.mContainers[sContainerId][0]);
					}
					_changeGetLayoutDataOfGrid(oGrid, false);
					_setLayoutDataForLinebreak(oGrid, oContainer, iVisibleContainer, oContainerNext, iVisibleContainers);
				}

				oLayout.mContainers[sContainerId] = [oPanel, oGrid];
			}
		}

		var iObjectLength = _objectLength(oLayout.mContainers);
		if (iVisibleContainers < iObjectLength) {
			// delete old containers panels
			for ( sContainerId in oLayout.mContainers) {
				var bFound = false;
				for ( i = 0; i < iLength; i++) {
					oContainer = aContainers[i];
					if (sContainerId == oContainer.getId() && oContainer.getVisible()) {
						bFound = true;
						break;
					}
				}
				if (!bFound) {
					_cleanContainer(oLayout, sContainerId);
				}
			}
		}

	}

	function _createPanel( oLayout, oContainer, oGrid ) {

		var sContainerId = oContainer.getId();
		var oPanel = new sap.ui.layout.form.ResponsiveGridLayoutPanel(sContainerId + "---Panel", {
			container: oContainer,
			layout   : oLayout,
			content : oGrid
		});

		return oPanel;

	}

	/*
	 * clear content before delete panel
	 */
	function _deletePanel( oPanel ) {

		oPanel.setContent("");
		oPanel.setLayout("");
		oPanel.setContainer("");
		oPanel.destroy();

	}

	function _createGrid( oLayout, oContainer ) {

		var sId = oContainer.getId() + "--Grid";

		var oGrid = new Grid(sId, {vSpacing: 0, hSpacing: 0, containerQuery: true});
		oGrid.__myParentLayout = oLayout;
		oGrid.__myParentContainerId = oContainer.getId();
		oGrid.addStyleClass("sapUiFormResGridCont");

		oGrid.getContent = function(){
			var oContainer = sap.ui.getCore().byId(this.__myParentContainerId);
			if (oContainer) {
				var aContent = [];
				var aElements = oContainer.getFormElements();
				var aFields;
				var oLabel;
				for ( var i = 0; i < aElements.length; i++) {
					var oElement = aElements[i];
					if (oElement.getVisible()) {
						oLabel = oElement.getLabelControl();
						if (oLabel) {
							aContent.push(oLabel);
						}
						aFields = oElement.getFields();
						for ( var j = 0; j < aFields.length; j++) {
							aContent.push(aFields[j]);
						}
					}
				}
				return aContent;
			} else {
				return false;
			}
		};

		// Form factors
		var oBaseSize = {
				labelSpan: 0,
				span: 0,
				firstField: false,
				defaultFields: 0,
				row: 0,
				myRow: false,
				freeFields: 0,
				finished: false
		};
		var oXL = {
			id: "XL",
			getEffectiveSpan: function(oLD) {
				var iSpan = oLD._getEffectiveSpanXLarge();
				if (!iSpan) {
					iSpan = oLD._getEffectiveSpanLarge();
				}
				return iSpan;
			},
			getEmptySpan: function(oLayout) {
				// If no explicit value for XL empty span is set then the value of the L empty span is used (from the backwardcompatibility reasons).
				var iEmptySpan = oLayout.getEmptySpanXL();
				if (iEmptySpan < 0) {
					iEmptySpan = oLayout.getEmptySpanL();
				}
				return iEmptySpan;
			},
			getLabelSpan: function(oLayout) {
				return oLayout.getLabelSpanXL();
			},
			setIndent: function(oLD, iIdent) {
				oLD.setIndentXL(iIdent);
			},
			setLinebreak: function(oLD, bLinebreak) {
				oLD.setLinebreakXL(bLinebreak);
			}
		};
		jQuery.extend(oXL, oBaseSize);
		var oL = {
			id: "L",
			getEffectiveSpan: function(oLD) {
				return oLD._getEffectiveSpanLarge();
			},
			getEmptySpan: function(oLayout) {
				return oLayout.getEmptySpanL();
			},
			getLabelSpan: function(oLayout) {
				return oLayout.getLabelSpanL();
			},
			setIndent: function(oLD, iIdent) {
				oLD.setIndentL(iIdent);
			},
			setLinebreak: function(oLD, bLinebreak) {
				oLD.setLinebreakL(bLinebreak);
			}
		};
		jQuery.extend(oL, oBaseSize);
		var oM = {
			id: "M",
			getEffectiveSpan: function(oLD) {
				return oLD._getEffectiveSpanMedium();
			},
			getEmptySpan: function(oLayout) {
				return oLayout.getEmptySpanM();
			},
			getLabelSpan: function(oLayout) {
				return oLayout.getLabelSpanM();
			},
			setIndent: function(oLD, iIdent) {
				oLD.setIndentM(iIdent);
			},
			setLinebreak: function(oLD, bLinebreak) {
				oLD.setLinebreakM(bLinebreak);
			}
		};
		jQuery.extend(oM, oBaseSize);
		var oS = {
			id: "S",
			getEffectiveSpan: function(oLD) {
				return oLD._getEffectiveSpanSmall();
			},
			getEmptySpan: function(oLayout) {
				return oLayout.getEmptySpanS();
			},
			getLabelSpan: function(oLayout) {
				return oLayout.getLabelSpanS();
			},
			setIndent: function(oLD, iIdent) {
				oLD.setIndentS(iIdent);
			},
			setLinebreak: function(oLD, bLinebreak) {
				oLD.setLinebreakS(bLinebreak);
			}
		};
		jQuery.extend(oS, oBaseSize);
		var aSizes = [oXL, oL, oM, oS];

		oGrid._getLayoutDataForControl = function(oControl) {
			var oLayout = this.__myParentLayout;
			var oLD = oLayout.getLayoutDataForElement(oControl, "sap.ui.layout.GridData");

			var oElement = oControl.getParent();
			var oLabel = oElement.getLabelControl();
			if (oLD) {
				if (oLabel == oControl) {
					oLD._setStylesInternal("sapUiFormElementLbl");
				}
				return oLD;
			} else {
				// calculate Layout Data for control
				var oContainer = sap.ui.getCore().byId(this.__myParentContainerId);
				var oContainerLD = oLayout.getLayoutDataForElement(oContainer, "sap.ui.layout.GridData");
				var oForm = oContainer.getParent();
				var oSize;
				var s = 0;

				// for overall grid, label has default Span of 2, but in L 2 Containers are in one line, so 2 Grids are in one line
				for (s = 0; s < aSizes.length; s++) {
					oSize = aSizes[s];
					// initialize form factor
					jQuery.extend(oSize, oBaseSize);
					oSize.labelSpan = oSize.getLabelSpan(oLayout);
				}

				if (oLayout.getAdjustLabelSpan()) {
					if (oForm.getFormContainers().length >= 1 && oLayout.getColumnsM() > 1) {
						// More than one Container in line
						oM.labelSpan = oLayout.getLabelSpanL();
					}
					if (oContainerLD) {
						if (oContainerLD._getEffectiveSpanLarge() == 12) {
							// If Container has the Full width in large Screen, use 2 as Label Span to be in line
							oL.labelSpan = oLayout.getLabelSpanM();
							oM.labelSpan = oLayout.getLabelSpanM();
						}
					}
					if (oForm.getFormContainers().length == 1 || oLayout.getColumnsL() == 1) {
						// only one container -> it's full size
						oL.labelSpan = oLayout.getLabelSpanM();
						oM.labelSpan = oLayout.getLabelSpanM();
					}
				}

				// If no explicit value of Label span for XL is set then the value of the Label span for L is used (from the backwardcompatibility reasons).
				if (oXL.labelSpan < 0) {
					oXL.labelSpan = oL.labelSpan;
				}

				if (oLabel == oControl) {
					oLayout.oDummyLayoutData.setSpan("XL" + oXL.labelSpan + " L" + oL.labelSpan + " M" + oM.labelSpan + " S" + oS.labelSpan);
					oLayout.oDummyLayoutData.setLinebreak(true);
					oLayout.oDummyLayoutData.setIndentXL(0).setIndentL(0).setIndentM(0).setIndentS(0);
					oLayout.oDummyLayoutData._setStylesInternal("sapUiFormElementLbl");
					return oLayout.oDummyLayoutData;
				} else {
					var oLabelLD;
					if (oLabel) {
						oLabelLD = oLayout.getLayoutDataForElement(oLabel, "sap.ui.layout.GridData");
					}
					var aFields = oElement.getFields();
					var iLength = aFields.length;
					var oField;
					var oFieldLD;
					var iDefaultFields = 1; // because current field has no LayoutData
					var bFirstField = false;
					var iEffectiveSpan;
					var i = 0;

					for (s = 0; s < aSizes.length; s++) {
						oSize = aSizes[s];
						oSize.span = 12 - oSize.getEmptySpan(oLayout);

						if (oLabel) {
							if (oLabelLD) {
								iEffectiveSpan = oSize.getEffectiveSpan(oLabelLD);
								if (iEffectiveSpan) {
									oSize.labelSpan = iEffectiveSpan;
								}
							}

							if (oSize.labelSpan < 12) {
								oSize.span = oSize.span - oSize.labelSpan;
							}
						}
						oSize.spanFields = oSize.span;
					}

					for (i = 0; i < iLength; i++) {
						oField = aFields[i];
						if (oField != oControl) {
							// check if other fields have layoutData
							oFieldLD = oLayout.getLayoutDataForElement(oField, "sap.ui.layout.GridData");
							// is Spans are too large - ignore in calculation....
							if (oFieldLD) {
								for (s = 0; s < aSizes.length; s++) {
									oSize = aSizes[s];
									iEffectiveSpan = oSize.getEffectiveSpan(oFieldLD);
									if (iEffectiveSpan && iEffectiveSpan < oSize.span) {
										oSize.span = oSize.span - iEffectiveSpan;
									}
								}
							} else {
								iDefaultFields++;
							}
						} else {
							if (iDefaultFields == 1) {
								bFirstField = true;
							}
						}
					}

					var aMultiLine = [];
					for (s = 0; s < aSizes.length; s++) {
						oSize = aSizes[s];
						oSize.firstField = bFirstField;
						oSize.defaultFields = iDefaultFields;

						if (oSize.span < iDefaultFields) {
							oSize.defaultFields = 0;
							oSize.row = 0;
							oSize.myRow = false;
							oSize.freeFields = oSize.spanFields;
							oSize.span = oSize.spanFields;
							oSize.finished = false;
							aMultiLine.push(oSize);
						}
					}

					if (aMultiLine.length > 0) {
						// there is not enough space in one row
						// try to fine linebreak position

						for (i = 0; i < iLength; i++) {
							oField = aFields[i];
							oFieldLD = undefined;
							if (oField != oControl) {
								oFieldLD = oLayout.getLayoutDataForElement(oField, "sap.ui.layout.GridData");
							}

							for (s = 0; s < aMultiLine.length; s++) {
								oSize = aMultiLine[s];
								if (oSize.finished) {
									continue;
								}
								if (oFieldLD) {
									iEffectiveSpan = oSize.getEffectiveSpan(oFieldLD);
									oSize.span = oSize.span - iEffectiveSpan;
								} else {
									iEffectiveSpan = 1;
								}

								// if row is already filled start new one
								if (oSize.freeFields >= iEffectiveSpan) {
									oSize.freeFields = oSize.freeFields - iEffectiveSpan;
									if (!oFieldLD) {
										oSize.defaultFields++;
									}
								} else {
									if (oSize.myRow) {
										// row of current field is finished
										oSize.finished = true;
									} else {
										oSize.freeFields = oSize.spanFields - iEffectiveSpan;
										oSize.row++;
										if (oFieldLD) {
											oSize.defaultFields = 0;
											oSize.span = oSize.spanFields - iEffectiveSpan;
										} else {
											oSize.defaultFields = 1;
											oSize.span = oSize.spanFields;
										}
										if (oField == oControl) {
											oSize.firstField = true;
										}
									}
								}
								if (oField == oControl) {
									oSize.myRow = true;
								}
							}
						}
					}

					var iRest = 0;
					var sMySpan = "";
					var iMySpan;
					for (s = 0; s < aSizes.length; s++) {
						oSize = aSizes[s];
						if (oSize.id != "S" || oSize.labelSpan < 12) {
							// If label fie "S" is defined not to be full size -> make fields left of it
							if (oSize.firstField) {
								iRest = oSize.span - Math.floor(oSize.span / oSize.defaultFields) * oSize.defaultFields;
								iMySpan = Math.floor(oSize.span / oSize.defaultFields) + iRest;
							} else {
								iMySpan = Math.floor(oSize.span / oSize.defaultFields);
							}
						} else {
							iMySpan = 12;
						}
						if (sMySpan) {
							sMySpan = sMySpan + " ";
						}
						sMySpan = sMySpan + oSize.id + iMySpan;
						oSize.setLinebreak(oLayout.oDummyLayoutData, oSize.firstField && ( oSize.row > 0 ));
						oSize.setIndent(oLayout.oDummyLayoutData, oSize.firstField && ( oSize.row > 0 ) ? oSize.labelSpan : 0);
					}

					oLayout.oDummyLayoutData.setSpan(sMySpan);
					oLayout.oDummyLayoutData.setLinebreak(bFirstField && !oLabel);
					oLayout.oDummyLayoutData._setStylesInternal(undefined);
					return oLayout.oDummyLayoutData;
				}

				return oLD;
			}
		};

		// change resize handler so that the container Grids always get the same Media size like the main grid
		oGrid._onParentResizeOrig = oGrid._onParentResize;
		oGrid._onParentResize = function() {

			// Prove if Dom reference exist, and if not - clean up the references.
			if (!this.getDomRef()) {
				this._cleanup();
				return;
			}

			if (!jQuery(this.getDomRef()).is(":visible")) {
				return;
			}

			var oLayout = this.__myParentLayout;
			if (!oLayout._mainGrid || !oLayout._mainGrid.__bIsUsed ) {
				// no main grid used -> only 1 container
				var aContainers = oLayout.getParent().getFormContainers();
				var oFirstContainer;
				for (var i = 0; i < aContainers.length; i++) {
					if (aContainers[i].getVisible()) {
						oFirstContainer = aContainers[i];
						break;
					}
				}
				if (!oFirstContainer || !oLayout.mContainers[oFirstContainer.getId()] || oFirstContainer.getId() != this.__myParentContainerId) {
					// Form seems to be invalidated (container changed) but rerendering still not done
					// -> ignore resize, it will be rerendered soon
					return;
				}
				if (oLayout.mContainers[this.__myParentContainerId][0]) {
					// panel used -> get size from panel
					var oDomRef = oLayout.mContainers[this.__myParentContainerId][0].getDomRef();

					var iCntWidth = oDomRef.clientWidth;
					if (iCntWidth <= oLayout.getBreakpointM()) {
						this._toggleClass("Phone");
					} else if ((iCntWidth > oLayout.getBreakpointM()) && (iCntWidth <= oLayout.getBreakpointL())) {
						this._toggleClass("Tablet");
					} else if ((iCntWidth > oLayout.getBreakpointL()) && (iCntWidth <= oLayout.getBreakpointXL())) {
						this._toggleClass("Desktop");
					} else {
						this._toggleClass("LargeDesktop");
					}
				} else {
					this._setBreakPointTablet(oLayout.getBreakpointM());
					this._setBreakPointDesktop(oLayout.getBreakpointL());
					this._setBreakPointLargeDesktop(oLayout.getBreakpointXL());
					this._onParentResizeOrig();
				}
			} else {
				var $DomRefMain = oLayout._mainGrid.$();

				if ($DomRefMain.hasClass("sapUiRespGridMedia-Std-Phone")) {
					this._toggleClass("Phone");
				} else if ($DomRefMain.hasClass("sapUiRespGridMedia-Std-Tablet")) {
					this._toggleClass("Tablet");
				} else if ($DomRefMain.hasClass("sapUiRespGridMedia-Std-Desktop")) {
					this._toggleClass("Desktop");
				} else {
					this._toggleClass("LargeDesktop");
				}
			}
		};

		oGrid._getAccessibleRole = function() {

			var oContainer = sap.ui.getCore().byId(this.__myParentContainerId);
			var oLayout = this.__myParentLayout;
			if (oLayout._mainGrid && oLayout._mainGrid.__bIsUsed && !oContainer.getToolbar() && !oContainer.getTitle() && !oContainer.getExpandable()) {
				return "form";
			}

		};

		oGrid.getUIArea = function() {

			// as Grid has no parent relationship to Form or layout,
			// it can not dertermine the UIArea by itself
			var oLayout = this.__myParentLayout;
			if (oLayout) {
				return oLayout.getUIArea();
			} else {
				return null;
			}

		};

		return oGrid;

	}

	/*
	 * clear internal variables before delete grid
	 */
	function _deleteGrid( oGrid ) {

		if (oGrid.__myParentContainerId) {
			oGrid.__myParentContainerId = undefined;
		}
		oGrid.__myParentLayout = undefined;

		oGrid.destroy();

	}

	function _changeGetLayoutDataOfGrid( oGrid, bOriginal ) {
		// only GridData are from interest

		if (bOriginal) {
			if (oGrid.__originalGetLayoutData) {
				oGrid.getLayoutData = oGrid.__originalGetLayoutData;
				delete oGrid.__originalGetLayoutData;
			}
		} else if (!oGrid.__originalGetLayoutData) {
			oGrid.__originalGetLayoutData = oGrid.getLayoutData;
			oGrid.getLayoutData = function(){
				var oLayout = this.__myParentLayout;
				var oContainer = sap.ui.getCore().byId(this.__myParentContainerId);

				var oLD;
				if (oContainer) {
					oLD = oLayout.getLayoutDataForElement(oContainer, "sap.ui.layout.GridData");
				}

				if (oLD) {
					return oLD;
				} else {
					return this.getAggregation("layoutData");
				}
			};
		}

	}

	// every second container gets a Linebreak for large screens
	// oControl could be a Panel or a Grid( if no panel used)
	function _setLayoutDataForLinebreak( oControl, oContainer, iVisibleContainer, oContainerNext, iVisibleContainers ) {

		var oLayout;
		if (oControl instanceof sap.ui.layout.form.ResponsiveGridLayoutPanel) {
			oLayout = sap.ui.getCore().byId(oControl.getLayout());
		} else {
			oLayout = oControl.__myParentLayout;
		}

		var oLD = oLayout.getLayoutDataForElement(oContainer, "sap.ui.layout.GridData");
		if (!oLD) {
			// only needed if container has no own LayoutData
			var iColumnsM = oLayout.getColumnsM();
			var iColumnsL = oLayout.getColumnsL();
			// If the columsnXL is not set the value of columnsL is used
			var iColumnsXL = oLayout.getColumnsXL();

			var bLinebreakL = (iVisibleContainer % iColumnsL) == 1;
			var bLastL = (iVisibleContainer % iColumnsL) == 0;
			var bLastRowL = iVisibleContainer > (iVisibleContainers - iColumnsL + (iVisibleContainers % iColumnsL));
			var bFirstRowL = iVisibleContainer <= iColumnsL;
			var bLinebreakM = (iVisibleContainer % iColumnsM) == 1;
			var bLastM = (iVisibleContainer % iColumnsM) == 0;
			var bLastRowM = iVisibleContainer > (iVisibleContainers - iColumnsM + (iVisibleContainers % iColumnsM));
			var bFirstRowM = iVisibleContainer <= iColumnsM;

			var bLinebreakXL = false;
			var bLastXL = bLastL;
			var bLastRowXL = bLastRowL;
			var bFirstRowXL = bFirstRowL;
			if (iColumnsXL > 0) {
				bLinebreakXL = (iVisibleContainer % iColumnsXL) == 1;
				bLastXL = (iVisibleContainer % iColumnsXL) == 0;
				bLastRowXL = iVisibleContainer > (iVisibleContainers - iColumnsXL + (iVisibleContainers % iColumnsXL));
				bFirstRowXL = iVisibleContainer <= iColumnsXL;
			}

			if (oContainerNext) {
				var oLDNext = oLayout.getLayoutDataForElement(oContainerNext, "sap.ui.layout.GridData");
				if (oLDNext && ( oLDNext.getLinebreak() || oLDNext.getLinebreakXL() )) {
					bLastXL = true;
					bLastRowXL = false;
				}
				if (oLDNext && ( oLDNext.getLinebreak() || oLDNext.getLinebreakL() )) {
					bLastL = true;
					bLastRowL = false;
				}
				if (oLDNext && ( oLDNext.getLinebreak() || oLDNext.getLinebreakM() )) {
					bLastM = true;
					bLastRowM = false;
				}
			}

			var sStyle = "";

			if (bLastXL) {
				sStyle = "sapUiFormResGridLastContXL";
			}
			if (bLastL) {
				if (sStyle) {
					sStyle = sStyle + " ";
				}
				sStyle = sStyle + "sapUiFormResGridLastContL";
			}
			if (bLastM) {
				if (sStyle) {
					sStyle = sStyle + " ";
				}
				sStyle = sStyle + "sapUiFormResGridLastContM";
			}

			if (bLastRowXL) {
				if (sStyle) {
					sStyle = sStyle + " ";
				}
				sStyle = sStyle + "sapUiFormResGridLastRowXL";
			}
			if (bLastRowL) {
				if (sStyle) {
					sStyle = sStyle + " ";
				}
				sStyle = sStyle + "sapUiFormResGridLastRowL";
			}
			if (bLastRowM) {
				if (sStyle) {
					sStyle = sStyle + " ";
				}
				sStyle = sStyle + "sapUiFormResGridLastRowM";
			}

			if (bFirstRowXL) {
				if (sStyle) {
					sStyle = sStyle + " ";
				}
				sStyle = sStyle + "sapUiFormResGridFirstRowXL";
			}
			if (bFirstRowL) {
				if (sStyle) {
					sStyle = sStyle + " ";
				}
				sStyle = sStyle + "sapUiFormResGridFirstRowL";
			}
			if (bFirstRowM) {
				if (sStyle) {
					sStyle = sStyle + " ";
				}
				sStyle = sStyle + "sapUiFormResGridFirstRowM";
			}

			oLD = oControl.getLayoutData();
			if (!oLD) {
				oLD = new GridData(oControl.getId() + "--LD", { linebreakL: bLinebreakL, linebreakM: bLinebreakM });
				oControl.setLayoutData( oLD );
			} else {
				oLD.setLinebreakL(bLinebreakL);
				oLD.setLinebreakM(bLinebreakM);
			}
			if (iColumnsXL > 0) {
				oLD.setLinebreakXL(bLinebreakXL);
			}
			oLD._setStylesInternal(sStyle);
		}

	}

	function _cleanContainer( oLayout, sContainerId ) {

		var aContainerContent = oLayout.mContainers[sContainerId];

		//delete Grid
		var oGrid = aContainerContent[1];
		if (oGrid) {
			_deleteGrid(oGrid);
		}

		//delete panel
		var oPanel = aContainerContent[0];
		if (oPanel) {
			_deletePanel(oPanel);
		}

		delete oLayout.mContainers[sContainerId];

	}

	function _createMainGrid( oLayout, oForm ) {

		var aContainers = oForm.getFormContainers();
		var aVisibleContainers = [];
		var oContainer;
		var iLength = 0;
		var iContentLenght = 0;
		var i = 0;
		var j = 0;

		// count only visible containers
		for ( i = 0; i < aContainers.length; i++) {
			oContainer = aContainers[i];
			if (oContainer.getVisible()) {
				iLength++;
				aVisibleContainers.push(oContainer);
			}
		}

		// special case: only one container -> do not render an outer ResponsiveFlowLayout
		if (iLength > 1 || !oLayout.getSingleContainerFullSize()) {
			var iSpanM = Math.floor(12 / oLayout.getColumnsM());
			var iSpanL = Math.floor(12 / oLayout.getColumnsL());
			var iSpanXL;
			var sDefaultSpan = "";

			// If the columsnXL is not set the value of columnsL is used
			var iColumnsXL = oLayout.getColumnsXL();
			if (iColumnsXL >= 0) {
				// if no columns for XL are defined ude no default span for XL. The grid then uses automatically the L one.
				iSpanXL = Math.floor(12 / iColumnsXL);
				sDefaultSpan = sDefaultSpan + "XL" + iSpanXL + " ";
			}
			sDefaultSpan = sDefaultSpan + "L" + iSpanL + " M" + iSpanM + " S12";

			if (!oLayout._mainGrid) {
				oLayout._mainGrid = new Grid(oForm.getId() + "--Grid",{
					defaultSpan: sDefaultSpan,
					hSpacing: 0,
					vSpacing: 0,
					containerQuery: true
					}).setParent(oLayout);
				oLayout._mainGrid.addStyleClass("sapUiFormResGridMain");
				// change resize handler so that the main grid triggers the resize of it's children
				oLayout._mainGrid._onParentResizeOrig = oLayout._mainGrid._onParentResize;
				oLayout._mainGrid._onParentResize = function() {
					this._onParentResizeOrig();

					for ( var sContainerId in oLayout.mContainers) {
						oLayout.mContainers[sContainerId][1]._onParentResize();
					}

				};
			} else {
				oLayout._mainGrid.setDefaultSpan(sDefaultSpan);
				// update containers
				var aLayoutContent = oLayout._mainGrid.getContent();
				iContentLenght = aLayoutContent.length;
				var bExchangeContent = false;
				// check if content has changed
				for ( i = 0; i < iContentLenght; i++) {
					var oContentElement = aLayoutContent[i];
					oContainer = undefined;
					if (oContentElement.getContainer) {
						// it's a panel
						oContainer = sap.ui.getCore().byId(oContentElement.getContainer());
					} else {
						// it's a Grid
						oContainer = sap.ui.getCore().byId(oContentElement.__myParentContainerId);
					}
					if (oContainer && oContainer.getVisible()) {
						var oVisibleContainer = aVisibleContainers[j];
						if (oContainer != oVisibleContainer) {
							// order of containers has changed
							bExchangeContent = true;
							break;
						}

						var aContainerContent = oLayout.mContainers[oContainer.getId()];
						if (aContainerContent[0] && aContainerContent[0] != oContentElement) {
							// container uses panel but panel not the same element in content
							bExchangeContent = true;
							break;
						}
						if (!aContainerContent[0] && aContainerContent[1] && aContainerContent[1] != oContentElement) {
							// container uses no panel but Grid not the same element in content
							bExchangeContent = true;
							break;
						}
						j++;
					} else {
						// no container exits for content -> just remove this content
						oLayout._mainGrid.removeContent(oContentElement);
					}
				}
				if (bExchangeContent) {
					// remove all content and add it new.
					oLayout._mainGrid.removeAllContent();
					iContentLenght = 0;
				}
			}
			oLayout._mainGrid._setBreakPointTablet(oLayout.getBreakpointM());
			oLayout._mainGrid._setBreakPointDesktop(oLayout.getBreakpointL());
			oLayout._mainGrid._setBreakPointLargeDesktop(oLayout.getBreakpointXL());
			oLayout._mainGrid.__bIsUsed = true;

			if (iContentLenght < iLength) {
				// new containers added
				var iStartIndex = 0;
				if (iContentLenght > 0) {
					iStartIndex = iContentLenght--;
				}
				for ( i = iStartIndex; i < aContainers.length; i++) {
					oContainer = aContainers[i];
					if (oContainer.getVisible()) {
						var sContainerId = oContainer.getId();
						if (oLayout.mContainers[sContainerId]) {
							if (oLayout.mContainers[sContainerId][0]) {
								// panel used
								oLayout._mainGrid.addContent(oLayout.mContainers[sContainerId][0]);
							} else if (oLayout.mContainers[sContainerId][1]) {
								// no panel - used Grid directly
								oLayout._mainGrid.addContent(oLayout.mContainers[sContainerId][1]);
							}
						}
					}
				}
			}
		} else if ( oLayout._mainGrid ) {
			oLayout._mainGrid.__bIsUsed = false;
		}

	}

	function _objectLength(oObject){

		var iLength = 0;

		if (!Object.keys) {
			jQuery.each(oObject, function(){
				iLength++;
			});
		} else {
			iLength = Object.keys(oObject).length;
		}

		return iLength;

	}

	return ResponsiveGridLayout;

}, /* bExport= */ true);

}; // end of sap/ui/layout/form/ResponsiveGridLayout.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.form.SimpleForm') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.layout.form.SimpleForm.
jQuery.sap.declare('sap.ui.layout.form.SimpleForm'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/form/SimpleForm",['jquery.sap.global', 'sap/ui/core/Control', 'sap/ui/layout/ResponsiveFlowLayoutData', './Form', './FormContainer', './FormElement', './FormLayout', 'sap/ui/layout/library'],
	function(jQuery, Control, ResponsiveFlowLayoutData, Form, FormContainer, FormElement, FormLayout, library) {
	"use strict";

	/**
	 * Constructor for a new sap.ui.layout.form.SimpleForm.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * The <code>SimpleForm</code> provides an easy-to-use API to create simple forms.
	 * Inside a <code>SimpleForm</code>, a <code>Form</code> control is created along with its <code>FormContainers</code> and <code>FormElements</code>, but the complexity in the API is removed.
	 * <ul>
	 * <li>A new <code>Title</code> or <code>Toolbar</code> starts a new group (<code>FormContainer</code>) in the form.</li>
	 * <li>A new <code>Label</code> starts a new row (<code>FormElement</code>) in the form.</li>
	 * <li>All other controls will be assigned to the row (<code>FormElement</code>) that started with the last label.</li>
	 * </ul>
	 * Use <code>LayoutData</code> to influence the layout for special cases in the Input/Display controls.
	 *
	 * <b>Note:</b> If a more complex form is needed, use <code>Form</code> instead.
	 * @extends sap.ui.core.Control
	 * @version 1.48.5
	 *
	 * @constructor
	 * @public
	 * @since 1.16.0
	 * @alias sap.ui.layout.form.SimpleForm
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SimpleForm = Control.extend("sap.ui.layout.form.SimpleForm", /** @lends sap.ui.layout.form.SimpleForm.prototype */ { metadata : {

		library : "sap.ui.layout",
		properties : {

			/**
			 * The maximum amount of groups (<code>FormContainers</code>) per row that is used before a new row is started.
			 *
			 * <b>Note:</b> If a <code>ResponsiveGridLayout</code> is used as a <code>layout</code>, this property is not used. Please use the properties <code>ColumnsL</code> and <code>ColumnsM</code> in this case.
			 */
			maxContainerCols : {type : "int", group : "Appearance", defaultValue : 2},

			/**
			 * The overall minimum width in pixels that is used for the <code>SimpleForm</code>. If the available width is below the given <code>minWidth</code> the <code>SimpleForm</code> will create a new row for the next group (<code>FormContainer</code>).
			 * The default value is -1, meaning that inner groups (<code>FormContainers</code>) will be stacked until <code>maxContainerCols</code> is reached, irrespective of whether a <code>width</code> is reached or the available parents width is reached.
			 *
			 * <b>Note:</b> This property is only used if a <code>ResponsiveLayout</code> is used as a layout.
			 */
			minWidth : {type : "int", group : "Appearance", defaultValue : -1},

			/**
			 * Width of the form.
			 * @since 1.28.0
			 */
			width : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},

			/**
			 * Applies a device-specific and theme-specific line-height to the form rows if the form has editable content.
			 * If set, all (not only the editable) rows of the form will get the line height of editable fields.
			 *
			 * The accessibility <code>aria-readonly</code> attribute is set according to this property.
			 *
			 * <b>Note:</b> The setting of the property has no influence on the editable functionality of the form's content.
			 */
			editable : {type : "boolean", group : "Misc", defaultValue : null},

			/**
			 * Specifies the min-width in pixels of the label in all form rows.
			 *
			 * <b>Note:</b> This property is only used if a <code>ResponsiveLayout</code> is used as a layout.
			 */
			labelMinWidth : {type : "int", group : "Misc", defaultValue : 192},

			/**
			 * The <code>FormLayout</code> that is used to render the <code>SimpleForm</code>.
			 *
			 * We recommend using the <code>ResponsiveGridLayout</code> for rendering a <code>SimpleForm</code>, as its responsiveness uses the space available in the best way possible.
			 */
			layout : {type : "sap.ui.layout.form.SimpleFormLayout", group : "Misc", defaultValue : sap.ui.layout.form.SimpleFormLayout.ResponsiveLayout},

			/**
			 * Default span for labels in extra large size.
			 *
			 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>labelSpanL</code> value is used (from the backward compatibility reasons).
			 * @since 1.34.0
			 */
			labelSpanXL : {type : "int", group : "Misc", defaultValue : -1},

			/**
			 * Default span for labels in large size.
			 *
			 * <b>Note:</b> If <code>adjustLabelSpanThis</code> is set, this property is only used if more than 1 <code>FormContainer</code> is in one line. If only 1 <code>FormContainer</code> is in the line, then the <code>labelSpanM</code> value is used.
			 *
			 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
			 * @since 1.16.3
			 */
			labelSpanL : {type : "int", group : "Misc", defaultValue : 4},

			/**
			 * Default span for labels in medium size.
			 *
			 * <b>Note:</b> If <code>adjustLabelSpanThis</code> is set, this property is used for full-size <code>FormContainers</code>. If more than one <code>FormContainer</code> is in one line, <code>labelSpanL</code> is used.
			 *
			 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
			 * @since 1.16.3
			 */
			labelSpanM : {type : "int", group : "Misc", defaultValue : 2},

			/**
			 * Default span for labels in small size.
			 *
			 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
			 * @since 1.16.3
			 */
			labelSpanS : {type : "int", group : "Misc", defaultValue : 12},

			/**
			 * If set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the number of <code>FormContainers</code> in one row.
			 * If only one <code>FormContainer</code> is displayed in one row, <code>labelSpanM</code> is used to define the size of the label.
			 * This is the same for medium and large <code>Forms</code>.
			 * This is done to align the labels on forms where full-size <code>FormContainers</code> and multiple-column rows are used in the same <code>Form</code>
			 * (because every <code>FormContainer</code> has its own grid inside).
			 *
			 * If not set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the <code>Form</code> size.
			 * The number of <code>FormContainers</code> doesn't matter in this case.
			 *
			 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
			 * @since 1.34.0
			 */
			adjustLabelSpan : {type : "boolean", group : "Misc", defaultValue : true},

			/**
			 * Number of grid cells that are empty at the end of each line on extra large size.
			 *
			 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>emptySpanL</code> value is used (from the backward compatibility reasons).
			 * @since 1.34.0
			 */
			emptySpanXL : {type : "int", group : "Misc", defaultValue : -1},

			/**
			 * Number of grid cells that are empty at the end of each line on large size.
			 *
			 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
			 * @since 1.16.3
			 */
			emptySpanL : {type : "int", group : "Misc", defaultValue : 0},

			/**
			 * Number of grid cells that are empty at the end of each line on medium size.
			 *
			 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
			 * @since 1.16.3
			 */
			emptySpanM : {type : "int", group : "Misc", defaultValue : 0},

			/**
			 * Number of grid cells that are empty at the end of each line on small size.
			 *
			 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
			 * @since 1.16.3
			 */
			emptySpanS : {type : "int", group : "Misc", defaultValue : 0},

			/**
			 * Form columns for extra large size.
			 * The number of columns for extra large size must not be smaller than the number of columns for large size.
			 *
			 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.If the default value -1 is not overwritten with the meaningful one then the <code>columnsL</code> value is used (from the backward compatibility reasons).
			 * @since 1.34.0
			 */
			columnsXL : {type : "int", group : "Misc", defaultValue : -1},

			/**
			 * Form columns for large size.
			 * The number of columns for large size must not be smaller than the number of columns for medium size.
			 *
			 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
			 * @since 1.16.3
			 */
			columnsL : {type : "int", group : "Misc", defaultValue : 2},

			/**
			 * Form columns for medium size.
			 *
			 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
			 * @since 1.16.3
			 */
			columnsM : {type : "int", group : "Misc", defaultValue : 1},

			/**
			 * If the <code>Form</code> contains only one single <code>FormContainer</code> and this property is set,
			 * the <code>FormContainer</code> is displayed using the full size of the <code>Form</code>.
			 * In this case the properties <code>columnsL</code> and <code>columnsM</code> are ignored.
			 *
			 * In all other cases the <code>FormContainer</code> is displayed in the size of one column.
			 *
			 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
			 * @since 1.34.0
			 */
			singleContainerFullSize : {type : "boolean", group : "Misc", defaultValue : true},

			/**
			 * Breakpoint between Medium size and Large size.
			 *
			 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
			 * @since 1.34.0
			 */
			breakpointXL : {type : "int", group : "Misc", defaultValue : 1440},

			/**
			 * Breakpoint between Medium size and Large size.
			 *
			 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
			 * @since 1.16.3
			 */
			breakpointL : {type : "int", group : "Misc", defaultValue : 1024},

			/**
			 * Breakpoint between Small size and Medium size.
			 *
			 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
			 * @since 1.16.3
			 */
			breakpointM : {type : "int", group : "Misc", defaultValue : 600},

			/**
			 * Specifies the background color of the <code>SimpleForm</code> content.
			 *
			 * The visualization of the different options depends on the used theme.
			 *
			 * @since 1.36.0
			 */
			backgroundDesign : {type : "sap.ui.layout.BackgroundDesign", group : "Appearance", defaultValue : sap.ui.layout.BackgroundDesign.Translucent}
		},
		defaultAggregation : "content",
		aggregations : {

			/**
			 * The content of the form is structured in the following way:
			 * <ul>
			 * <li>Add a <code>Title</code> or <code>Toolbar</code> control to start a new group (<code>FormContainer</code>).</li>
			 * <li>Add a <code>Label</code> control to start a new row (<code>FormElement</code>).</li>
			 * <li>Add controls as input fields, text fields or other as needed.</li>
			 * <li>Use <code>LayoutData</code> to influence the layout for special cases in the single controls.
			 * For example, if a <code>ResponsiveLayout</code> is used as a layout, the form content is weighted using weight 3 for the labels and weight 5 for the fields part. By default the label column is 192 pixels wide.
			 * If your input controls should influence their width, you can add <code>sap.ui.layout.ResponsiveFlowLayoutData</code> to them via <code>setLayoutData</code> method.
			 * Ensure that the sum of the weights in the <code>ResponsiveFlowLayoutData</code> is not more than 5, as this is the total width of the input control part of each form row.</li>
			 * </ul>
			 * Example for a row where the <code>Input</code> weight 4 and the second <code>Input</code> weight 1 (using <code>ResponsiveLayout</code>):
			 * <pre>
			 * new sap.m.Label({text:"Label"});
			 * new sap.m.Input({value:"Weight 4", layoutData: new sap.ui.layout.ResponsiveFlowLayoutData({weight:4})}),
			 * new sap.m.Input({value:"Weight 1", layoutData: new sap.ui.layout.ResponsiveFlowLayoutData({weight:1})}),
			 * </pre>
			 *
			 * For example, if a <code>ResponsiveGridLayout</code> is used as a layout, there are 12 cells in one row. Depending on the screen size the labels use the defined <code>labelSpan</code>.
			 * The remaining cells are used for the fields (and <code>emptySpan</code> if defined). The available cells are distributed to all fields in the row. If one field should use a fixed number of cells
			 * you can add <code>sap.ui.layout.GridData</code> to them via <code>setLayoutData</code> method.
			 * If there are additional fields in the row they will get the remaining cells.
			 * </ul>
			 * Example for a row with two <code>Input</code> controls where one uses four cells on small screens, one cell on medium screens and 2 cells on larger screens (using <code>ResponsiveGridLayout</code>):
			 * <pre>
			 * new sap.m.Label({text:"Label"});
			 * new sap.m.Input({value:"auto size"}),
			 * new sap.m.Input({value:"fix size", layoutData: new sap.ui.layout.GridData({span: "XL1 L1 M2 S4"})}),
			 * </pre>
			 *
			 * <b>Note:</b> Do not put any layout controls in here. This could destroy the visual layout,
			 * keyboard support and screen-reader support.
			 */
			content : {type : "sap.ui.core.Element", multiple : true, singularName : "content"},

			/**
			 * Hidden, for internal use only.
			 */
			form : {type : "sap.ui.layout.form.Form", multiple : false, visibility : "hidden"},

			/**
			 * Title element of the <code>SimpleForm</code>. Can either be a <code>Title</code> element, or a string.
			 * @since 1.16.3
			 */
			title : {type : "sap.ui.core.Title", altTypes : ["string"], multiple : false},

			/**
			 * Toolbar of the <code>SimpleForm</code>.
			 *
			 * <b>Note:</b> If a <code>Toolbar</code> is used, the <code>Title</code> is ignored.
			 * If a title is needed inside the <code>Toolbar</code> it must be added at content to the <code>Toolbar</code>.
			 * In this case add the <code>Title</code> to the <code>ariaLabelledBy</code> association.
			 * @since 1.36.0
			 */
			toolbar : {type : "sap.ui.core.Toolbar", multiple : false}
		},
		associations: {

			/**
			 * Association to controls / IDs which label this control (see WAI-ARIA attribute <code>aria-labelledby</code>).
			 * @since 1.32.0
			 */
			ariaLabelledBy: { type: "sap.ui.core.Control", multiple: true, singularName: "ariaLabelledBy" }
		},
		designTime: true
	}});

	SimpleForm.prototype.init = function() {

		this._iMaxWeight = 8;
		this._iLabelWeight = 3;
		this._iCurrentWidth = 0;
		var oForm = new Form(this.getId() + "--Form");
		// use title of SimpleForm in Form
		oForm.getTitle = function(){
			return this.getParent().getTitle();
		};
		oForm._origInvalidate = oForm.invalidate;
		oForm.invalidate = function(oOrigin) {
			if (this.bOutput) {
				// if Form is not rendered don't invalidate SimpleForm and parents
				this._origInvalidate(oOrigin);
			}
			if (this._bIsBeingDestroyed) {
				return;
			}
			var oSimpleForm = this.getParent();
			if (oSimpleForm) {
				oSimpleForm._formInvalidated(oOrigin);
			}
		};

		oForm.getAriaLabelledBy = function(){
			var oSimpleForm = this.getParent();
			if (oSimpleForm) {
				return oSimpleForm.getAriaLabelledBy();
			}else {
				return null;
			}
		};

		this.setAggregation("form",oForm);
		this._aElements = null;
		this._aLayouts = [];
		this._changedFormContainers = [];
		this._changedFormElements = [];

	};

	SimpleForm.prototype.exit = function() {

		var oForm = this.getAggregation("form");
		oForm.invalidate = oForm._origInvalidate;

		if (this._sResizeListenerId) {
			sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
			this._sResizeListenerId = null;
		}
		for (var i = 0; i < this._aLayouts.length; i++) {
			var oLayout = sap.ui.getCore().byId(this._aLayouts[i]);
			if (oLayout && oLayout.destroy) {
				oLayout.destroy();
			}
		}
		this._aLayouts = [];
		this._aElements = null;
		this._changedFormContainers = [];
		this._changedFormElements = [];

	};

	/*
	 * Update FormContainers, FormElements and LayoutData before controls are rendered
	 */
	SimpleForm.prototype.onBeforeRendering = function() {

		this._bChangedByMe = true;
		//unregister resize
		if (this._sResizeListenerId) {
			sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
			this._sResizeListenerId = null;
		}
		var that = this;

		var oForm = this.getAggregation("form");
		if (!oForm.getLayout()) {
			_setFormLayout(that);
		}

		_updateFormContainers(that);
		this._bChangedByMe = false;

	};

	SimpleForm.prototype.onAfterRendering = function() {

		if (this.getLayout() == sap.ui.layout.form.SimpleFormLayout.ResponsiveLayout) {
			this._bChangedByMe = true;
			this.$().css("visibility", "hidden"); //avoid that a wrong layouting is visible
			this._applyLinebreaks();

			//attach the resize handler
			this._sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef(),  jQuery.proxy(this._resize, this));
			this._bChangedByMe = false;
		}

	};

	SimpleForm.prototype.setEditable = function(bEditable) {

		this._bChangedByMe = true;
		this.setProperty("editable", bEditable, true);

		var oForm = this.getAggregation("form");
		oForm.setEditable(bEditable);

		this._bChangedByMe = false;
		return this;

	};

	SimpleForm.prototype.setToolbar = function(oToolbar) {

		this._bChangedByMe = true;
		var oForm = this.getAggregation("form");
		oForm.setToolbar(oToolbar);

		this._bChangedByMe = false;
		return this;

	};

	SimpleForm.prototype.getToolbar = function() {

		var oForm = this.getAggregation("form");
		return oForm.getToolbar();

	};

	/*
	 * Overwrite generated functions to use internal array to look for aggregation
	 */
	SimpleForm.prototype.indexOfContent = function(oObject) {

		var aChildren = this._aElements;
		if (aChildren) {
			for (var i = 0; i < aChildren.length; i++) {
				if (aChildren[i] == oObject) {
					return i;
				}
			}
		}
		return -1;

	};

	SimpleForm.prototype.addContent = function(oElement) {

		oElement = this.validateAggregation("content", oElement, /* multiple */ true);

		if (this.indexOfContent(oElement) >= 0) {
			// element is already there, remove before adding it
			jQuery.sap.log.warning("SimpleForm.addContent: Content element '" + oElement + "' already assigned. Please remove before adding!", this);
			this.removeContent(oElement);
		}

		if (!this._aElements) {
			this._aElements = [];
		}

		// try to find corresponding FormElement and FormContainer to update them
		this._bChangedByMe = true;
		var iLength = this._aElements.length;
		var oLastElement;
		var oForm = this.getAggregation("form");
		var oFormContainer;
		var oFormElement;
		var oParent;
		var oLayoutData;

		if (oElement instanceof sap.ui.core.Title || oElement.getMetadata().isInstanceOf("sap.ui.core.Toolbar")) {
			//start a new container with a title
			oFormContainer = _createFormContainer(this, oElement);
			oForm.addFormContainer(oFormContainer);
			this._changedFormContainers.push(oFormContainer);
		} else if (oElement.getMetadata().isInstanceOf("sap.ui.core.Label")) { // if the control implements the label interface
			// new label -> create new FormElement
			// determine Container from last Content element
			if (iLength > 0) {
				oLastElement = this._aElements[iLength - 1];
				oParent = oLastElement.getParent();
				if (oParent instanceof FormElement) {
					oFormContainer = oParent.getParent();
				} else if (oParent instanceof FormContainer) {
					oFormContainer = oParent;
				}
			}
			if (!oFormContainer) {
				oFormContainer = _createFormContainer(this);
				oForm.addFormContainer(oFormContainer);
				this._changedFormContainers.push(oFormContainer);
			}

			oFormElement = _addFormElement(this, oFormContainer, oElement);
		} else {
			// new Field -> add to last FormElement
			if (iLength > 0) {
				oLastElement = this._aElements[iLength - 1];
				oParent = oLastElement.getParent();
				if (oParent instanceof FormElement) {
					oFormContainer = oParent.getParent();
					oFormElement = oParent;
					oLayoutData = _getFieldLayoutData(this, oElement);
					if (oLayoutData instanceof ResponsiveFlowLayoutData && !_isMyLayoutData(this, oLayoutData)) {
						if (oLayoutData.getLinebreak()) {
							oFormElement = _addFormElement(this, oFormContainer);
						}
					}
				} else if (oParent instanceof FormContainer) {
					oFormContainer = oParent;
					oFormElement = _addFormElement(this, oFormContainer);
				}
			} else {
				// no FormContainer and FormElement exists
				oFormContainer = _createFormContainer(this);
				oForm.addFormContainer(oFormContainer);
				this._changedFormContainers.push(oFormContainer);
				oFormElement = _addFormElement(this, oFormContainer);
			}

			_createFieldLayoutData(this, oElement, 5, false, true);

			oFormElement.addField(oElement);
			_markFormElementForUpdate(this._changedFormElements, oFormElement);
		}

		this._aElements.push(oElement);
		oElement.attachEvent("_change", _handleContentChange, this);
		this.invalidate();
		this._bChangedByMe = false;
		return this;

	};

	SimpleForm.prototype.insertContent = function(oElement, iIndex) {

		oElement = this.validateAggregation("content", oElement, /* multiple */ true);

		if (this.indexOfContent(oElement) >= 0) {
			// element is already there, remove before insert it
			jQuery.sap.log.warning("SimpleForm.insertContent: Content element '" + oElement + "' already assigned. Please remove before insert!", this);
			this.removeContent(oElement);
		}

		if (!this._aElements) {
			this._aElements = [];
		}

		var iLength = this._aElements.length;
		var iNewIndex;
		if (iIndex < 0) {
			iNewIndex = 0;
		} else if (iIndex > iLength) {
			iNewIndex = iLength;
		} else {
			iNewIndex = iIndex;
		}
		if (iNewIndex !== iIndex) {
			jQuery.sap.log.warning("SimpleForm.insertContent: index '" + iIndex + "' out of range [0," + iLength + "], forced to " + iNewIndex);
		}

		if (iNewIndex == iLength) {
			// just added to the end -> use add function
			this.addContent(oElement);
			return this;
		}

		this._bChangedByMe = true;
		var oOldElement = this._aElements[iNewIndex];
		var oForm = this.getAggregation("form");
		var oFormContainer;
		var oFormElement;
		var oOldFormContainer;
		var oOldFormElement;
		var iContainerIndex;
		var iElementIndex = 0;
		var iFieldIndex;
		var aFields;
		var aFormElements;
		var aFormContainers;
		var i = 0;
		var oField;

		if (oElement instanceof sap.ui.core.Title || oElement.getMetadata().isInstanceOf("sap.ui.core.Toolbar")) {
			//start a new container with a title
			if (iIndex == 0 && !(oOldElement instanceof sap.ui.core.Title || oOldElement.getMetadata().isInstanceOf("sap.ui.core.Toolbar"))) {
				// special case - index==0 and first container has no title -> just add title to Container
				oFormContainer = oOldElement.getParent().getParent();
				if (oElement instanceof sap.ui.core.Title) {
					oFormContainer.setTitle(oElement);
				} else {
					oFormContainer.setToolbar(oElement);
				}
			} else {
				oFormContainer = _createFormContainer(this, oElement);
				if (oOldElement instanceof sap.ui.core.Title || oOldElement.getMetadata().isInstanceOf("sap.ui.core.Toolbar")) {
					// insert before old container
					oOldFormContainer = oOldElement.getParent();
					iContainerIndex = oForm.indexOfFormContainer(oOldFormContainer);
				} else {
					// insert after old container
					oOldFormElement = oOldElement.getParent();
					oOldFormContainer = oOldFormElement.getParent();
					iContainerIndex = oForm.indexOfFormContainer(oOldFormContainer) + 1;
					iElementIndex = oOldFormContainer.indexOfFormElement(oOldFormElement);

					// check if old FormElement must be splited
					if (!oOldElement.getMetadata().isInstanceOf("sap.ui.core.Label")) {
						iFieldIndex = oOldFormElement.indexOfField(oOldElement);
						if (iFieldIndex > 0 || oOldFormElement.getLabel()) {
							// split FormElement
							oFormElement = _addFormElement(this, oFormContainer);
							this._changedFormElements.push(oFormElement);
							_markFormElementForUpdate(this._changedFormElements, oOldFormElement);
							// move all Fields after index into new FormElement
							aFields = oOldFormElement.getFields();
							for ( i = iFieldIndex; i < aFields.length; i++) {
								oField = aFields[i];
								oFormElement.addField(oField);
							}
							iElementIndex++;
						}
					}
					// move all FormElements after the new content into the new container
					aFormElements = oOldFormContainer.getFormElements();
					for ( i = iElementIndex; i < aFormElements.length; i++) {
						oFormContainer.addFormElement(aFormElements[i]);
					}
				}
				oForm.insertFormContainer(oFormContainer, iContainerIndex);
			}
			this._changedFormContainers.push(oFormContainer);
		} else if (oElement.getMetadata().isInstanceOf("sap.ui.core.Label")) {
			if (oOldElement instanceof sap.ui.core.Title || oOldElement.getMetadata().isInstanceOf("sap.ui.core.Toolbar")) {
				// add new FormElement to previous container
				oOldFormContainer = oOldElement.getParent();
				iContainerIndex = oForm.indexOfFormContainer(oOldFormContainer);
				aFormContainers = oForm.getFormContainers();
				if (iContainerIndex == 0) {
					// it's the first container - insert new container before
					oFormContainer = _createFormContainer(this);
					oForm.insertFormContainer(oFormContainer, iContainerIndex);
					this._changedFormContainers.push(oFormContainer);
				} else {
					oFormContainer = aFormContainers[iContainerIndex - 1];
				}
				oFormElement = _addFormElement(this, oFormContainer, oElement);
			} else if (oOldElement.getMetadata().isInstanceOf("sap.ui.core.Label")) {
				// insert new form element before this one
				oOldFormContainer = oOldElement.getParent().getParent();
				iElementIndex = oOldFormContainer.indexOfFormElement(oOldElement.getParent());
				oFormElement = _insertFormElement(this, oOldFormContainer, oElement, iElementIndex);
			} else {
				// split FormElement
				oOldFormElement = oOldElement.getParent();
				oOldFormContainer = oOldFormElement.getParent();
				iElementIndex = oOldFormContainer.indexOfFormElement(oOldFormElement) + 1;
				iFieldIndex = oOldFormElement.indexOfField(oOldElement);

				if (iFieldIndex == 0 && !oOldFormElement.getLabel()) {
					// special case: Form Element has no label and inserted before first Field
					oFormElement = oOldFormElement;
					oFormElement.setLabel(oElement);
					_createFieldLayoutData(this, oElement, this._iLabelWeight, false, true, this.getLabelMinWidth());
				} else {
					oFormElement = _insertFormElement(this, oOldFormContainer, oElement, iElementIndex);
					_markFormElementForUpdate(this._changedFormElements, oOldFormElement);

					// move all Fields after index into new FormElement
					aFields = oOldFormElement.getFields();
					for ( i = iFieldIndex; i < aFields.length; i++) {
						oField = aFields[i];
						oFormElement.addField(oField);
					}
				}
			}
			this._changedFormElements.push(oFormElement);
		} else { // new field
			if (oOldElement instanceof sap.ui.core.Title || oOldElement.getMetadata().isInstanceOf("sap.ui.core.Toolbar")) {
				// add new Field to last FormElement of previous FormContainer
				oOldFormContainer = oOldElement.getParent();
				iContainerIndex = oForm.indexOfFormContainer(oOldFormContainer);

				if (iContainerIndex == 0) {
					// it's the first container - insert new container before
					oFormContainer = _createFormContainer(this);
					oForm.insertFormContainer(oFormContainer, iContainerIndex);
					this._changedFormContainers.push(oFormContainer);
				} else {
					aFormContainers = oForm.getFormContainers();
					oFormContainer = aFormContainers[iContainerIndex - 1];
				}

				aFormElements = oFormContainer.getFormElements();
				if (aFormElements.length == 0) {
					// container has no FormElements -> create one
					oFormElement = _addFormElement(this, oFormContainer);
				} else {
					oFormElement = aFormElements[aFormElements.length - 1];
				}

				oFormElement.addField(oElement);
			} else if (oOldElement.getMetadata().isInstanceOf("sap.ui.core.Label")) {
				// add new field to previous FormElement
				oOldFormElement = oOldElement.getParent();
				oFormContainer = oOldFormElement.getParent();
				iElementIndex = oFormContainer.indexOfFormElement(oOldFormElement);

				if (iElementIndex == 0) {
					// it's already the first FormElement -> insert a new one before
					oFormElement = _insertFormElement(this, oFormContainer, null, 0);
				} else {
					aFormElements = oFormContainer.getFormElements();
					oFormElement = aFormElements[iElementIndex - 1];
				}
				oFormElement.addField(oElement);
			} else {
				// insert new field into same FormElement before old field
				oFormElement = oOldElement.getParent();
				iFieldIndex = oFormElement.indexOfField(oOldElement);
				oFormElement.insertField(oElement, iFieldIndex);
			}
			_markFormElementForUpdate(this._changedFormElements, oFormElement);

			_createFieldLayoutData(this, oElement, 5, false, true);
		}

		this._aElements.splice(iNewIndex, 0, oElement);
		oElement.attachEvent("_change", _handleContentChange, this);
		this.invalidate();
		this._bChangedByMe = false;
		return this;

	};

	SimpleForm.prototype.removeContent = function(vElement) {

		var oElement = null;
		var iIndex = -1;
		var i = 0;

		if (this._aElements) {

			if (typeof (vElement) == "string") { // ID of the element is given
				vElement = sap.ui.getCore().byId(vElement);
			}

			if (typeof (vElement) == "object") { // the element itself is given or has just been retrieved
				for (i = 0; i < this._aElements.length; i++) {
					if (this._aElements[i] == vElement) {
						vElement = i;
						break;
					}
				}
			}

			if (typeof (vElement) == "number") { // "vElement" is the index now
				if (vElement < 0 || vElement >= this._aElements.length) {
					jQuery.sap.log.warning("Element.removeAggregation called with invalid index: Items, " + vElement);
				} else {
					iIndex = vElement;
					oElement = this._aElements[iIndex];
				}
			}
		}
		if (oElement) {
			this._bChangedByMe = true;
			var oForm = this.getAggregation("form");
			var oFormContainer;
			var oFormElement;
			var aFormElements;
			var aFields;

			if (oElement instanceof sap.ui.core.Title || oElement.getMetadata().isInstanceOf("sap.ui.core.Toolbar")) {
				oFormContainer = oElement.getParent();
				oFormContainer.setTitle(null);
				oFormContainer.setToolbar(null);
				if (iIndex > 0) {
					// if it's the first container -> just remove title
					// remove container and add content to previous container
					aFormElements = oFormContainer.getFormElements();
					var iContainerIndex = oForm.indexOfFormContainer(oFormContainer);
					var oPrevFormContainer = oForm.getFormContainers()[iContainerIndex - 1];
					if (aFormElements.length > 0 && !aFormElements[0].getLabel()) {
						// first Form Element has no label -> add its fields to last Form Element of previous container
						var aPrevFormElements = oPrevFormContainer.getFormElements();
						var oLastFormElement = aPrevFormElements[aPrevFormElements.length - 1];
						aFields = aFormElements[0].getFields();
						for (i = 0; i < aFields.length; i++) {
							oLastFormElement.addField(aFields[i]);
						}
						_markFormElementForUpdate(this._changedFormElements, oLastFormElement);
						oFormContainer.removeFormElement(aFormElements[0]);
						aFormElements[0].destroy();
						aFormElements.splice(0,1);
					}
					for (i = 0; i < aFormElements.length; i++) {
						oPrevFormContainer.addFormElement(aFormElements[i]);
					}
					_markFormElementForUpdate(this._changedFormContainers, oPrevFormContainer);
					oForm.removeFormContainer(oFormContainer);
					oFormContainer.destroy();
				}
			} else if (oElement.getMetadata().isInstanceOf("sap.ui.core.Label")) {
				oFormElement = oElement.getParent();
				oFormContainer = oFormElement.getParent();
				oFormElement.setLabel(null);
				var iElementIndex = oFormContainer.indexOfFormElement(oFormElement);
				if (iElementIndex == 0) {
					// its the first Element of the container -> just remove label
					if (oFormElement.getFields().length == 0) {
						// FormElement has no fields -> just delete
						oFormContainer.removeFormElement(oFormElement);
						oFormElement.destroy();
						if (oFormContainer.getFormElements().length == 0) {
							oForm.removeFormContainer(oFormContainer);
							oFormContainer.destroy();
						}
					} else {
						_markFormElementForUpdate(this._changedFormElements, oFormElement);
					}
				} else {
					// add fields to previous FormElement
					aFormElements = oFormContainer.getFormElements();
					var oPrevFormElement = aFormElements[iElementIndex - 1];
					aFields = oFormElement.getFields();
					for (i = 0; i < aFields.length; i++) {
						oPrevFormElement.addField(aFields[i]);
					}
					_markFormElementForUpdate(this._changedFormElements, oPrevFormElement);
					oFormContainer.removeFormElement(oFormElement);
					oFormElement.destroy();
					if (oFormContainer.getFormElements().length == 0) {
						oForm.removeFormContainer(oFormContainer);
						oFormContainer.destroy();
					}
				}
			} else { // remove field
				oFormElement = oElement.getParent();
				oFormElement.removeField(oElement);
				if (oFormElement.getFields().length == 0 && !oFormElement.getLabel()) {
					// FormElement has no more fields and no label -> just delete
					oFormContainer = oFormElement.getParent();
					oFormContainer.removeFormElement(oFormElement);
					oFormElement.destroy();
					if (oFormContainer.getFormElements().length == 0) {
						oForm.removeFormContainer(oFormContainer);
						oFormContainer.destroy();
					}
				} else {
					_markFormElementForUpdate(this._changedFormElements, oFormElement);
				}
			}

			this._aElements.splice(iIndex, 1);
			oElement.setParent(null);
			oElement.detachEvent("_change", _handleContentChange, this);
			_removeLayoutData(this, oElement);

			this.invalidate();
			this._bChangedByMe = false;
			return oElement;
		}
		return null;

	};

	SimpleForm.prototype.removeAllContent = function() {

		var i = 0;

		if (this._aElements) {
			this._bChangedByMe = true;
			var oForm = this.getAggregation("form");
			var aFormContainers = oForm.getFormContainers();
			for (i = 0; i < aFormContainers.length; i++) {
				var oFormContainer = aFormContainers[i];
				oFormContainer.setTitle(null);
				oFormContainer.setToolbar(null);
				var aFormElements = oFormContainer.getFormElements();
				for ( var j = 0; j < aFormElements.length; j++) {
					var oFormElement = aFormElements[j];
					oFormElement.setLabel(null);
					oFormElement.removeAllFields();
				}
				oFormContainer.destroyFormElements();
			}
			oForm.destroyFormContainers();

			for (i = 0; i < this._aElements.length; i++) {
				var oElement = this._aElements[i];
				_removeLayoutData(this, oElement);
				oElement.detachEvent("_change", _handleContentChange, this);
			}
			var aElements = this._aElements;
			this._aElements = null;
			this.invalidate();
			this._bChangedByMe = false;
			return aElements;
		} else {
			return [];
		}

	};

	SimpleForm.prototype.destroyContent = function() {

		var aElements = this.removeAllContent();

		if (aElements) {
			this._bChangedByMe = true;
			for (var i = 0; i < aElements.length; i++) {
				aElements[i].destroy();
			}
			this.invalidate();
			this._bChangedByMe = false;
		}
		return this;

	};

	SimpleForm.prototype.getContent = function() {

		if (!this._aElements) {
			this._aElements = this.getAggregation("content", []);
		}
		return this._aElements.slice();

	};

/*
 * Set the FormLayout to the Form. If a FormLayout is already set, just set a new one.
 */
	SimpleForm.prototype.setLayout = function(sLayout) {

		this._bChangedByMe = true;
		var sOldLayout = this.getLayout();
		this.setProperty("layout", sLayout);

		if (sLayout != sOldLayout) {
			var that = this;
			_setFormLayout(that);

			// update LayoutData for Containers, Elements and Fields
			var oForm = this.getAggregation("form");
			var aContainers = oForm.getFormContainers();
			var aElements;
			var aFields;
			var oLayoutData;

			for ( var i = 0; i < aContainers.length; i++) {
				var oContainer = aContainers[i];
				this._changedFormContainers.push(oContainer);
				oLayoutData = oContainer.getLayoutData();
				if (oLayoutData) {
					oLayoutData.destroy();
				}
				_createContainerLayoutData(this, oContainer);
				aElements = oContainer.getFormElements();
				for ( var j = 0; j < aElements.length; j++) {
					var oElement = aElements[j];
					_markFormElementForUpdate(this._changedFormElements, oElement);
					oLayoutData = oElement.getLayoutData();
					if (oLayoutData) {
						oLayoutData.destroy();
					}
					_createElementLayoutData(this, oElement);
					var oLabel = oElement.getLabel();
					if (oLabel) {
						_removeLayoutData(this, oLabel);
						_createFieldLayoutData(this, oLabel, this._iLabelWeight, false, true, this.getLabelMinWidth());
					}
					aFields = oElement.getFields();
					for ( var k = 0; k < aFields.length; k++) {
						var oField = aFields[k];
						_removeLayoutData(this, oField);
						_createFieldLayoutData(this, oField, 5, false, true);
					}
				}
			}
		}

		this._bChangedByMe = false;
		return this;

	};

	/*
	 * Overwrite the clone function because content will not be cloned in default one
	 */
	SimpleForm.prototype.clone = function(sIdSuffix) {

		this._bChangedByMe = true;
		var oClone = Control.prototype.clone.apply(this, arguments);
		var aContent = this.getContent();

		for ( var i = 0; i < aContent.length; i++) {
			var oElement = aContent[i];
			var oLayoutData = oElement.getLayoutData();
			var oElementClone = oElement.clone(sIdSuffix);
			if (oLayoutData) {
				// mark private LayoutData
				if (oLayoutData.getMetadata().getName() == "sap.ui.core.VariantLayoutData") {
					var aLayoutData = oLayoutData.getMultipleLayoutData();
					for ( var j = 0; j < aLayoutData.length; j++) {
						if (_isMyLayoutData(this, aLayoutData[j])) {
							oClone._aLayouts.push(oElementClone.getLayoutData().getMultipleLayoutData()[j].getId());
						}
					}
				} else if (_isMyLayoutData(this, oLayoutData)) {
					oClone._aLayouts.push(oElementClone.getLayoutData().getId());
				}
			}
			oClone.addContent(oElementClone);
		}

		this._bChangedByMe = false;
		return oClone;

	};

	function _setFormLayout(oThis) {

			var oForm = oThis.getAggregation("form");
			var oLayout = oForm.getLayout();
			if (oLayout) {
				oLayout.destroy();
			}

			switch (oThis.getLayout()) {
			case sap.ui.layout.form.SimpleFormLayout.ResponsiveLayout:
				jQuery.sap.require("sap.ui.layout.form.ResponsiveLayout");
				oForm.setLayout(new sap.ui.layout.form.ResponsiveLayout(oThis.getId() + "--Layout"));
				break;
			case sap.ui.layout.form.SimpleFormLayout.GridLayout:
				jQuery.sap.require("sap.ui.layout.form.GridLayout");
				jQuery.sap.require("sap.ui.layout.form.GridContainerData");
				jQuery.sap.require("sap.ui.layout.form.GridElementData");
				oForm.setLayout(new sap.ui.layout.form.GridLayout(oThis.getId() + "--Layout"));
				break;
			case sap.ui.layout.form.SimpleFormLayout.ResponsiveGridLayout:
				jQuery.sap.require("sap.ui.layout.form.ResponsiveGridLayout");
				jQuery.sap.require("sap.ui.layout.GridData");
				oForm.setLayout(new sap.ui.layout.form.ResponsiveGridLayout(oThis.getId() + "--Layout"));
				break;

			default:
				break;
			}

	}

	/*
	 * Updates the FormContainers of the simple form.
	 */
	function _updateFormContainers(oThis) {

		oThis._changedFormContainers = [];

		var sLayout = oThis.getLayout();
		var oLayout = oThis.getAggregation("form").getLayout();

		oLayout.setBackgroundDesign(oThis.getBackgroundDesign());

		switch (sLayout) {
		case sap.ui.layout.form.SimpleFormLayout.ResponsiveLayout:
			// set the default values for linebreakes to avoid flickering for default case
			oThis._applyLinebreaks();
			break;
		case sap.ui.layout.form.SimpleFormLayout.GridLayout:
			_applyContainerSize(oThis);
			break;
		case sap.ui.layout.form.SimpleFormLayout.ResponsiveGridLayout:
			oLayout.setLabelSpanXL(oThis.getLabelSpanXL());
			oLayout.setLabelSpanL(oThis.getLabelSpanL());
			oLayout.setLabelSpanM(oThis.getLabelSpanM());
			oLayout.setLabelSpanS(oThis.getLabelSpanS());
			oLayout.setAdjustLabelSpan(oThis.getAdjustLabelSpan());
			oLayout.setEmptySpanXL(oThis.getEmptySpanXL());
			oLayout.setEmptySpanL(oThis.getEmptySpanL());
			oLayout.setEmptySpanM(oThis.getEmptySpanM());
			oLayout.setEmptySpanS(oThis.getEmptySpanS());
			oLayout.setColumnsXL(oThis.getColumnsXL());
			oLayout.setColumnsL(oThis.getColumnsL());
			oLayout.setColumnsM(oThis.getColumnsM());
			oLayout.setSingleContainerFullSize(oThis.getSingleContainerFullSize());
			oLayout.setBreakpointXL(oThis.getBreakpointXL());
			oLayout.setBreakpointL(oThis.getBreakpointL());
			oLayout.setBreakpointM(oThis.getBreakpointM());
			break;
		default:
			break;
		}

		for ( var i = 0; i < oThis._changedFormElements.length; i++) {
			var oFormElement = oThis._changedFormElements[i];

			switch (sLayout) {
			case sap.ui.layout.form.SimpleFormLayout.ResponsiveLayout:
				_applyFieldWeight(oThis, oFormElement);
				break;
			case sap.ui.layout.form.SimpleFormLayout.GridLayout:
				break;
			default:
				break;
			}

			_updateVisibility(oThis, oFormElement);
		}
		oThis._changedFormElements = [];

	}

	/*
	 * Checks whether the given LayoutData is created and added by this Simple Form
	 * @param { sap.ui.layout.ResponsiveFlowLayoutData} optional (interface) The layout data
	 * @returns {boolean} Whether the given layout was created by this Simple Form
	 * @private
	 */
	function _isMyLayoutData(oThis, oLayoutData) {

		var sId = oLayoutData.getId(),
		sLayouts = " " + oThis._aLayouts.join(" ") + " ";
		return sLayouts.indexOf(" " + sId + " ") >  -1;

	}

	/*
	 * Creates new sap.ui.layout.ResponsiveFlowLayoutData with the given parameters
	 * @param {int} iWeight the weight for the layout data
	 * @param {boolean} bLinebreak Whether the layout data has a linebreak
	 * @param {boolean} bLinebreakable Whether the layout data is linebreakable
	 * @returns {sap.ui.layout.ResponsiveFlowLayoutData} The newly created ResponsiveFlowLayoutData
	 * @private
	 */
	function _createRFLayoutData(oThis, iWeight, bLinebreak, bLinebreakable, iMinWidth) {

		var oLayout = new ResponsiveFlowLayoutData({weight:iWeight,linebreak:bLinebreak === true,linebreakable: bLinebreakable === true});
		if (iMinWidth) {
			oLayout.setMinWidth(iMinWidth);
		}
		oThis._aLayouts.push(oLayout.getId());
		return oLayout;

	}

	/*
	 * There may be VariantLayoutData used -> so get the right one for the used Layout
	 */
	function _getFieldLayoutData(oThis, oField){

		var oLayoutData;

		switch (oThis.getLayout()) {
		case sap.ui.layout.form.SimpleFormLayout.ResponsiveLayout:
			oLayoutData = FormLayout.prototype.getLayoutDataForElement(oField, "sap.ui.layout.ResponsiveFlowLayoutData");
			break;
		case sap.ui.layout.form.SimpleFormLayout.GridLayout:
			oLayoutData = FormLayout.prototype.getLayoutDataForElement(oField, "sap.ui.layout.form.GridElementData");
			break;
		case sap.ui.layout.form.SimpleFormLayout.ResponsiveGridLayout:
			oLayoutData = FormLayout.prototype.getLayoutDataForElement(oField, "sap.ui.layout.GridData");
			break;

		default:
			break;
		}

		return oLayoutData;

	}

	function _createFieldLayoutData(oThis, oField, iWeight, bLinebreak, bLinebreakable, iMinWidth) {

		var oLayoutData;

		switch (oThis.getLayout()) {
		case sap.ui.layout.form.SimpleFormLayout.ResponsiveLayout:
			oLayoutData = _getFieldLayoutData(oThis, oField);
			if (!oLayoutData || !_isMyLayoutData(oThis, oLayoutData)) {
				oLayoutData = oField.getLayoutData();
				if (oLayoutData && oLayoutData.getMetadata().getName() == "sap.ui.core.VariantLayoutData") {
					oLayoutData.addMultipleLayoutData(_createRFLayoutData(oThis, iWeight, bLinebreak, bLinebreakable, iMinWidth));
				} else if (!oLayoutData) {
					oField.setLayoutData(_createRFLayoutData(oThis, iWeight, bLinebreak, bLinebreakable, iMinWidth));
				} else {
					jQuery.sap.log.warning("ResponsiveFlowLayoutData can not be set on Field " + oField.getId(), "_createFieldLayoutData", "SimpleForm");
				}
			}
			break;
		case sap.ui.layout.form.SimpleFormLayout.GridLayout:
			// no default LayoutData needed"
			break;

		default:
			break;
		}

	}

	function _createElementLayoutData(oThis, oElement) {

		switch (oThis.getLayout()) {
		case sap.ui.layout.form.SimpleFormLayout.ResponsiveLayout:
			oElement.setLayoutData(new ResponsiveFlowLayoutData({linebreak:true, margin:false}));
			break;
		case sap.ui.layout.form.SimpleFormLayout.GridLayout:
			// no default LayoutData needed"
			break;

		default:
			break;
		}

	}

	function _createContainerLayoutData(oThis, oContainer) {

		switch (oThis.getLayout()) {
		case sap.ui.layout.form.SimpleFormLayout.ResponsiveLayout:
			oContainer.setLayoutData(new ResponsiveFlowLayoutData({minWidth:280}));
			break;
		case sap.ui.layout.form.SimpleFormLayout.GridLayout:
			if (oThis.getMaxContainerCols() > 1) {
				oContainer.setLayoutData(new sap.ui.layout.form.GridContainerData({halfGrid: true}));
			} else {
				oContainer.setLayoutData(new sap.ui.layout.form.GridContainerData({halfGrid: false}));
			}
			break;

		default:
			break;
		}

	}

	function _removeLayoutData(oThis, oElement) {

		var oLayout = _getFieldLayoutData(oThis, oElement);
		if (oLayout) {
			var sLayoutId = oLayout.getId();

			for ( var i = 0; i < oThis._aLayouts.length; i++) {
				var sId = oThis._aLayouts[i];
				if (sLayoutId == sId) {
					oLayout.destroy(); // is removed from parent during destroy
					oThis._aLayouts.splice(i, 1);
					break;
				}
			}
		}

	}

	/*
	 * Adds a new form element to the given FormContainer and adds the given label to it.
	 * @param {sap.ui.layout.form.FormContainer} The form container
	 * @param {sap.ui.core.Label} optional (interface) The label of the element
	 * @returns {sap.ui.layout.form.FormElement} The newly created FormElement
	 * @private
	 */
	function _addFormElement(oThis, oFormContainer, oLabel) {

		var oElement = _createFormElement(oThis, oLabel);
		oFormContainer.addFormElement(oElement);
		return oElement;

	}

	function _insertFormElement(oThis, oFormContainer, oLabel, iIndex) {

		var oElement = _createFormElement(oThis, oLabel);
		oFormContainer.insertFormElement(oElement, iIndex);
		return oElement;

	}

	function _createFormElement(oThis, oLabel) {

		var oElement = new FormElement();
		_createElementLayoutData(oThis, oElement);
		if (oLabel) {
			oLabel.addStyleClass("sapUiFormLabel-CTX");
			oElement.setLabel(oLabel);
			if (!_getFieldLayoutData(oThis, oLabel)) {
				_createFieldLayoutData(oThis, oLabel, oThis._iLabelWeight, false, true, oThis.getLabelMinWidth());
			}
		}
		oElement.setVisible(false);
		return oElement;

	}

	/*
	 * Creates a new form container and adds the given title to it.
	 * @param {sap.ui.core.Title || sap.ui.core.Toolbar} optional The title or toolbar of the container
	 * @returns {sap.ui.layout.form.FormContainer} The newly created FormContainer
	 * @private
	 */
	function _createFormContainer(oThis, oTitle) {

		var oContainer = new FormContainer();
		_createContainerLayoutData(oThis, oContainer);
		if (oTitle) {
			if (oTitle instanceof sap.ui.core.Title) {
				oContainer.setTitle(oTitle);
			} else if (oTitle.getMetadata().isInstanceOf("sap.ui.core.Toolbar")) {
				oContainer.setToolbar(oTitle);
			}
		}
		return oContainer;

	}

	/*
	 * Applies the weight property for the fields in the responsive layout.
	 * @param {sap.ui.layout.form.FormElement} oElement The FormElement where the weight is applied.
	 * @private
	 */
	function _applyFieldWeight(oThis, oElement){

		var iMaxWeight = oThis._iMaxWeight;
		var aFields = oElement.getFields();
		var oField;
		var iLength = aFields.length;
		var oLabel = oElement.getLabel();
		var oLayoutData;
		var i = 0;

		if (oLabel && _getFieldLayoutData(oThis, oLabel)) {
			iMaxWeight = iMaxWeight - _getFieldLayoutData(oThis, oLabel).getWeight();
		}

		// determine weights set from application
		for (i = 0; i < aFields.length; i++) {
			oField = aFields[i];
			oLayoutData = _getFieldLayoutData(oThis, oField);
			if (oLayoutData instanceof ResponsiveFlowLayoutData && !_isMyLayoutData(oThis, oLayoutData)) {
				iMaxWeight = iMaxWeight - oLayoutData.getWeight();
				iLength--;
			}
		}

		var iWeight = Math.floor(iMaxWeight / iLength);
		var iRest = iMaxWeight % iLength;

		for (i = 0; i < aFields.length; i++) {
			oField = aFields[i];
			oLayoutData = _getFieldLayoutData(oThis, oField);
			var iCurrentWeight = iWeight;

			if (!oLayoutData) {
				_createFieldLayoutData(oThis, oField, iCurrentWeight, false, i == 0);
			} else if (_isMyLayoutData(oThis, oLayoutData) && oLayoutData instanceof ResponsiveFlowLayoutData) {
				// devide rest to first fields (not only to last one) (fist because to ignore manual set weigths)
				if (iRest > 0) {
					iCurrentWeight++;
					iRest--;
				}
				oLayoutData.setWeight(iCurrentWeight);
			}
		}

	}

	function _updateVisibility(oThis, oElement){

		var aFields = oElement.getFields();
		var bVisible = false;

		for (var i = 0; i < aFields.length; i++) {
			var oField = aFields[i];
			if (!oField.getVisible || oField.getVisible()) {
				// at least one Field is visible
				bVisible = true;
				break;
			}
		}

		if (oElement.getVisible() != bVisible) {
			// set visibility of FormElement
			oElement.setVisible(bVisible);
		}

	}

	/*
	 * Applies the linebreaks of form containers according to the minWidth and maxContainerCol settings of the SimpleForm
	 * @private
	 */
	SimpleForm.prototype._applyLinebreaks = function(){

		var oForm = this.getAggregation("form"),
		aContainers = oForm.getFormContainers();
		// set line break on every container if Form is smaller than getMinWidth pixel
		// and reset it if it's larger
		var oDomRef = this.getDomRef();
		var o$ = this.$();
		for (var i = 1; i < aContainers.length; i++) {
			var oContainer = aContainers[i],
			oLayoutData = oContainer.getLayoutData();
			if (!oDomRef || o$.outerWidth(true) > this.getMinWidth()) {
				// if not already rendered use default values according to column number
				if (i % this.getMaxContainerCols() == 0) {
					oLayoutData.setLinebreak(true);
				} else {
					oLayoutData.setLinebreak(false);
				}
			} else {
				oLayoutData.setLinebreak(true);
			}
		}
		if (oDomRef && o$.css("visibility") == "hidden") {
			var that = this;
			setTimeout(function() {
				if (that.getDomRef()) {
					that.$().css("visibility", "");
				}
			},10);
		}

	};

	/*
	 * Applies size of the containers in GridLayout: if only one container is in the last line -> make it full size
	 * adapt all containers because container can be inserted or added later on
	 * @private
	 */
	function _applyContainerSize(oThis){

		var oForm = oThis.getAggregation("form");
		var aContainers = oForm.getFormContainers();
		var iLength = aContainers.length;
		for (var i = 0; i < iLength; i++) {
			var oContainer = aContainers[i];
			if ((i == iLength - 1) && (iLength % 2 > 0)) {
				oContainer.getLayoutData().setHalfGrid(false);
			} else if (!oContainer.getLayoutData().getHalfGrid()) {
				oContainer.getLayoutData().setHalfGrid(true);
			}
		}
	}

	/*
	 * Handles the resize event
	 * @private
	 */
	SimpleForm.prototype._resize = function(){

		this._bChangedByMe = true;
		if (this._iCurrentWidth == this.$().outerWidth()) {
			return;
		}
		this._iCurrentWidth = this.$().outerWidth();
		this._applyLinebreaks();
		this._bChangedByMe = false;

	};

	function _markFormElementForUpdate(aFormElements, oFormElement){

		var bFound = false;
		for ( var i = 0; i < aFormElements.length; i++) {
			var oChangedFormElement = aFormElements[i];
			if (oChangedFormElement == oFormElement) {
				bFound = true;
				break;
			}
		}
		if (!bFound) {
			aFormElements.push(oFormElement);
		}

	}

	function _handleContentChange(oEvent) {
		if (oEvent.getParameter("name") == "visible") {
			var oFormElement = oEvent.oSource.getParent();
			_updateVisibility(this, oFormElement);
		}
	}

	function _getFormContent(oForm) {

		var aElements = [];
		var aFormContainers = oForm.getFormContainers();

		for ( var i = 0; i < aFormContainers.length; i++) {
			var oFormContainer = aFormContainers[i];
			var oTitle = oFormContainer.getTitle();
			if (oTitle) {
				aElements.push(oTitle);
			} else {
				var oToolbar = oFormContainer.getToolbar();
				if (oToolbar) {
					aElements.push(oToolbar);
				}
			}

			var aFormElements = oFormContainer.getFormElements();
			for ( var j = 0; j < aFormElements.length; j++) {
				var oFormElement = aFormElements[j];
				var oLabel = oFormElement.getLabel();
				if (oLabel) {
					aElements.push(oLabel);
				}
				var aFields = oFormElement.getFields();
				for (var k = 0; k < aFields.length; k++) {
					var oField = aFields[k];
					aElements.push(oField);
				}
			}
		}

		return aElements;

	}

	SimpleForm.prototype._formInvalidated = function(oOrigin){

		if (!this._bChangedByMe) {
			// check if content is still the same like in array
			// maybe ca Control was destroyed or removed without using the SimpleForm API
			// as invalidate is fired for every single object only one object can be changed
			var aContent = _getFormContent(this.getAggregation("form"));
			var i = 0;
			var j = 0;
			var bCreateNew = false;

			if (!this._aElements || aContent.length < this._aElements.length) {
				// at least one element must be removed -> create completely new,
				// because for deleted controls it's hard to find out the old parent.
				bCreateNew = true;
			} else {
				for (i = 0; i < aContent.length; i++) {
					var oElement1 = aContent[i];
					var oElement2 = this._aElements[j];
					if (oElement1 === oElement2) {
						j++;
					} else {
						// check if Element1 is new
						var oElementNext = aContent[i + 1];
						if (oElementNext === oElement2) {
							this.insertContent(oElement1, i);
							break;
						}

						// check if Element2 is removed
						oElementNext = this._aElements[j + 1];
						if (oElementNext === oElement1) {
							// difficult to find out old Formelement or FormContainer -> create content completely new.
							bCreateNew = true;
							break;
						}

						break;
					}
				}
			}

			if (bCreateNew) {
				this.removeAllContent();
				for (i = 0; i < aContent.length; i++) {
					var oElement = aContent[i];
					this.addContent(oElement);
				}
			}
		}

	};

	return SimpleForm;

}, /* bExport= */ true);

}; // end of sap/ui/layout/form/SimpleForm.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.AssociativeSplitter') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.layout.AssociativeSplitter.
jQuery.sap.declare('sap.ui.layout.AssociativeSplitter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/layout/AssociativeSplitter",['./Splitter', './SplitterRenderer'],
	function (Splitter, SplitterRenderer) {
	"use strict";

	/**
	 * Constructor for a new AssociativeSplitter.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * AssociativeSplitter is a version of Splitter that uses an association in addition to the aggregation
	 * @extends sap.ui.layout.Splitter
	 *
	 * @author SAP SE
	 * @version 1.48.5
	 *
	 * @constructor
	 * @private
	 * @since 1.38
	 * @alias sap.ui.layout.AssociativeSplitter
	 */
	var AssociativeSplitter = Splitter.extend("sap.ui.layout.AssociativeSplitter", /** @lends sap.ui.layout.AssociativeSplitter.prototype */ {
		metadata : {
			associations : {
				/**
				 * The same as content, but provided in the form of an association
				 */
				associatedContentAreas: {type : "sap.ui.core.Control", multiple : true, singularName : "associatedContentArea"}
			}
		},
		renderer: SplitterRenderer
	});

	AssociativeSplitter.prototype.init = function () {
		Splitter.prototype.init.call(this);
		// We need to have different step size than the existing in the Splitter
		this._keyListeners = {
			increase     : this._onKeyboardResize.bind(this, "inc", 1),
			decrease     : this._onKeyboardResize.bind(this, "dec", 1),
			increaseMore : this._onKeyboardResize.bind(this, "incMore", 2),
			decreaseMore : this._onKeyboardResize.bind(this, "decMore", 2),
			max          : this._onKeyboardResize.bind(this, "max", 1),
			min          : this._onKeyboardResize.bind(this, "min", 1)
		};
		this._enableKeyboardListeners();
	};

	/**
	 * Adds shift + arrows keyboard handling to the existing one
	 * @returns {void}
	 * @private
	 */
	AssociativeSplitter.prototype._enableKeyboardListeners = function () {
		Splitter.prototype._enableKeyboardListeners.call(this);
		this.onsaprightmodifiers = this._keyListeners.increase;
		this.onsapleftmodifiers = this._keyListeners.decrease;
		this.onsapupmodifiers = this._keyListeners.decrease;
		this.onsapdownmodifiers = this._keyListeners.increase;
		this.onsapright = this._keyListeners.increaseMore;
		this.onsapdown = this._keyListeners.increaseMore;
		this.onsapleft = this._keyListeners.decreaseMore;
		this.onsapup = this._keyListeners.decreaseMore;
		this.onsapend = this._keyListeners.max;
		this.onsaphome = this._keyListeners.min;

		this._keyboardEnabled = true;
	};

	AssociativeSplitter.prototype.addAssociatedContentArea = function (oContent) {
		this._needsInvalidation = true;
		_ensureLayoutData(oContent);
		return this.addAssociation("associatedContentAreas", oContent);
	};

	AssociativeSplitter.prototype.indexOfAssociatedContentArea = function (area) {
		var contentAreas = this._getContentAreas();
		for (var i = 0; i < contentAreas.length; i++) {
			if (area == contentAreas[i]) {
				return i;
			}
		}
		return -1;
	};

	//TODO: Review this with caution, and check whether there will be any side effects
	AssociativeSplitter.prototype.insertAssociatedContentArea = function (oContent, iIndex) {
		var id = oContent.getId();
		this._needsInvalidation = true;
		_ensureLayoutData(oContent);
		var content = this.getAssociatedContentAreas();

		//Remove duplicate IDs
		for (var i = 0; i < content.length; i++) {
			if (content[i] === id) {
				content.splice(i,1);
			}
		}

		content.splice(iIndex, 0, id);
		this.setAssociation("associatedContentAreas", null);
		var that = this;

		content.forEach(function (id) {
			that.addAssociation("associatedContentAreas", id);
		});
	};

	AssociativeSplitter.prototype.removeAssociatedContentArea = function (area) {
		this.removeAssociation("associatedContentAreas", area);
	};

	AssociativeSplitter.prototype._getContentAreas = function () {
		var aAssociatedContentAreas = this.getAssociatedContentAreas() || [];
		var aContentAreas = this.getContentAreas();

		var aValidAssContentAreas = aAssociatedContentAreas.map(function (sId) {
			return sap.ui.getCore().byId(sId);
		}).filter(function (oContent) { return oContent; });

		return aContentAreas.concat(aValidAssContentAreas);
	};

	/**
	 * Starts the resize of splitter contents (when the bar is moved by mouse)
	 *
	 * @param {jQuery.Event} [oJEv] The jQuery event
	 * @private
	 */
	AssociativeSplitter.prototype.onmousedown = function (oJEv) {
		if (this._ignoreMouse) {
			return;
		}

		if (jQuery(oJEv.target).hasClass("sapUiLoSplitterBarIcon")) {
			oJEv.target = oJEv.target.parentElement;
		}

		var sId = this.getId();
		if (!oJEv.target.id || oJEv.target.id.indexOf(sId + "-splitbar") !== 0) {
			// The clicked element was not one of my splitter bars
			return;
		}

		this._ignoreTouch = true;
		this._onBarMoveStart(oJEv);
		this._oLastDOMclicked = oJEv.target;
	};

	AssociativeSplitter.prototype.ondblclick = function (oEvent) {
		// For some reason dblclick returns the whole Splitter not only the clicked splitbar
		var sId = this.getId(),
			iBar, oContentArea;
		if (!(oEvent.target.contains(this._oLastDOMclicked) && (this._oLastDOMclicked.id.indexOf(sId + "-splitbar") > -1))) {
			// The clicked element was not one of my splitter bars
			return;
		}

		iBar = parseInt(this._oLastDOMclicked.id.substr((sId + "-splitbar-").length), 10);
		oContentArea = this._getContentAreas()[iBar];
		oContentArea._currentPosition = this.getCalculatedSizes()[iBar];
		oContentArea._lastPosition = oContentArea._lastPosition || oContentArea._currentPosition;

		if (oContentArea._currentPosition === oContentArea._lastPosition) {
			this._resizeContents(iBar, (this.getCalculatedSizes()[iBar]) * -1, true);
		} else {
			this._resizeContents(iBar, oContentArea._lastPosition, true);
			oContentArea._lastPosition = null;
		}
	};

	/**
	 * Starts the resize of splitter contents (when the bar is moved by touch)
	 *
	 * @param {jQuery.Event} [oJEv] The jQuery event
	 * @private
	 */
	AssociativeSplitter.prototype.ontouchstart = function (oJEv) {
		if (this._ignoreTouch) {
			return;
		}

		if (jQuery(oJEv.target).hasClass("sapUiLoSplitterBarIcon")) {
			oJEv.target = oJEv.target.parentElement;
		}

		var sId = this.getId();
		if (!oJEv.target.id || oJEv.target.id.indexOf(sId + "-splitbar") !== 0) {
			// The clicked element was not one of my splitter bars
			return;
		}

		if (!oJEv.changedTouches || !oJEv.changedTouches[0]) {
			// No touch in event
			return;
		}

		this._ignoreMouse = true;
		this._onBarMoveStart(oJEv.changedTouches[0], true);
	};

	AssociativeSplitter.prototype._onBarMoveStart = function (oJEv, bTouch) {
		var sId = this.getId();

		// Disable auto resize during bar move
		this.disableAutoResize(/* temporarily: */ true);

		var iPos = oJEv[this._moveCord];
		var iSplitBar = parseInt(oJEv.target.id.substr((sId + "-splitbar-").length), 10);
		var iSplitBarCircle = parseInt(oJEv.target.parentElement.id.substr((sId + "-splitbar-").length), 10);
		var iBar = (iSplitBar + 1) ? iSplitBar : iSplitBarCircle;
		var $Bar = jQuery(oJEv.target);
		var mCalcSizes = this.getCalculatedSizes();
		var iBarSize = this._bHorizontal ?  $Bar.innerWidth() : $Bar.innerHeight();

		var aContentAreas = this._getContentAreas();
		var oLd1   = aContentAreas[iBar].getLayoutData();
		var oLd2   = aContentAreas[iBar + 1].getLayoutData();

		if (!oLd1.getResizable() || !oLd2.getResizable()) {
			// One of the contentAreas is not resizable, do not resize
			// Also: disallow text-marking behavior when not moving bar
			_preventTextSelection(bTouch);
			return;
		}

		// Calculate relative starting position of the bar for virtual bar placement
		var iRelStart = 0 - iBarSize;
		for (var i = 0; i <= iBar; ++i) {
			iRelStart += mCalcSizes[i] + iBarSize;
		}

		this._move = {
			// Start coordinate
			start : iPos,
			// Relative starting position of the bar
			relStart : iRelStart,
			// The number of the bar that is moved
			barNum : iBar,
			// The splitter bar that is moved
			bar : jQuery(oJEv.target),
			// The content sizes for fast resize bound calculation
			c1Size : mCalcSizes[iBar],
			c1MinSize : oLd1 ? parseInt(oLd1.getMinSize(), 10) : 0,
			c2Size : mCalcSizes[iBar + 1],
			c2MinSize : oLd2 ? parseInt(oLd2.getMinSize(), 10) : 0
		};

		// Event handlers use bound handler methods - see init()
		if (bTouch) {
			// this._ignoreMouse = true; // Ignore mouse-events until touch is done
			document.addEventListener("touchend",  this._boundBarMoveEnd);
			document.addEventListener("touchmove", this._boundBarMove);
		} else {
			document.addEventListener("mouseup",   this._boundBarMoveEnd);
			document.addEventListener("mousemove", this._boundBarMove);
		}

		this._$SplitterOverlay.css("display", "block"); // Needed because it is set to none in renderer
		this._$SplitterOverlay.appendTo(this.getDomRef());
		this._$SplitterOverlayBar.css(this._sizeDirNot, "");
		this._move["bar"].css("visibility", "hidden");
		this._onBarMove(oJEv);
	};

	// Overriding sap.ui.layout.Splitter's calculation functions in order to make it responsive

	/**
	 * Resizes the contents after a bar has been moved
	 *
	 * @param {Number} [iLeftContent] Number of the first (left) content that is resized
	 * @param {Number} [iPixels] Number of pixels to increase the first and decrease the second content
	 * @param {boolean} [bFinal] Whether this is the final position (sets the size in the layoutData of the
	 * content areas)
	 */
	AssociativeSplitter.prototype._resizeContents = function (iLeftContent, iPixels, bFinal) {
		var aContentAreas, oLd1, oLd2, sSize1,
			sSize2, $Cnt1, $Cnt2, iNewSize1, iNewSize2,
			iMinSize1, iMinSize2, sOrientation, iSplitterSize,
			sFinalSize1, sFinalSize2, iDiff,
			sMoveContentSize1 = parseFloat(this._move.c1Size).toFixed(5),
			sMoveContentSize2 = parseFloat(this._move.c2Size).toFixed(5),
			fMoveC1Size = parseFloat(sMoveContentSize1),
			fMoveC2Size = parseFloat(sMoveContentSize2);

		if (isNaN(iPixels)) {
			jQuery.sap.log.warning("Splitter: Received invalid resizing values - resize aborted.");
			return;
		}

		aContentAreas = this._getContentAreas();
		oLd1 = aContentAreas[iLeftContent].getLayoutData();
		oLd2 = aContentAreas[iLeftContent + 1].getLayoutData();

		sSize1 = oLd1.getSize();
		sSize2 = oLd2.getSize();

		$Cnt1 = this.$("content-" + iLeftContent);
		$Cnt2 = this.$("content-" + (iLeftContent + 1));

		iNewSize1 = fMoveC1Size + iPixels;
		iNewSize2 = fMoveC2Size - iPixels;
		iMinSize1 = parseInt(oLd1.getMinSize(), 10);
		iMinSize2 = parseInt(oLd2.getMinSize(), 10);

		sOrientation = this.getOrientation();
		iSplitterSize = sOrientation === "Horizontal" ? this.$().width() : this.$().height();

		// Adhere to size constraints
		if (iNewSize1 < iMinSize1) {
			iDiff = iMinSize1 - iNewSize1;
			iPixels += iDiff;
			iNewSize1 = iMinSize1;
			iNewSize2 -= iDiff;
		} else if (iNewSize2 < iMinSize2) {
			iDiff = iMinSize2 - iNewSize2;
			iPixels -= iDiff;
			iNewSize2 = iMinSize2;
			iNewSize1 -= iDiff;
		}

		if (bFinal) {
			// Resize finished, set layout data in content areas
			if (sSize1 === "auto" && sSize2 !== "auto") {
				// First pane has auto size - only change size of second pane
				sFinalSize2 = this._pxToPercent(iNewSize2, iSplitterSize);
				oLd2.setSize(sFinalSize2);
			} else if (sSize1 !== "auto" && sSize2 === "auto") {
				// Second pane has auto size - only change size of first pane
				sFinalSize1 = this._pxToPercent(iNewSize1, iSplitterSize);
				oLd1.setSize(sFinalSize1);
			} else {
				sFinalSize1 = this._pxToPercent(iNewSize1, iSplitterSize);
				sFinalSize2 = this._pxToPercent(iNewSize2, iSplitterSize);


				oLd1.setSize(sFinalSize1);
				oLd2.setSize(sFinalSize2);
			}
		} else {
			// Live-Resize, resize contents in Dom
			sFinalSize1 = this._pxToPercent(iNewSize1, iSplitterSize);
			sFinalSize2 = this._pxToPercent(iNewSize2, iSplitterSize);

			$Cnt1.css(this._sizeType, sFinalSize1);
			$Cnt2.css(this._sizeType, sFinalSize2);
		}
	};

	AssociativeSplitter.prototype._pxToPercent = function (iPx, iFullSize) {
		return (iPx * 100) / iFullSize + "%";
	};

	/**
	 * Recalculates the content sizes in three steps:
	 *  1. Searches for all absolute values ("px") and deducts them from the available space.
	 *  2. Searches for all percent values and interprets them as % of the available space after step 1
	 *  3. Divides the rest of the space uniformly between all contents with "auto" size values
	 *
	 * @private
	 */
	AssociativeSplitter.prototype._recalculateSizes = function () {
		// TODO: (?) Use maxSize value from layoutData
		var i, sSize, oLayoutData, iColSize, idx, iSize;

		// Read all content sizes from the layout data
		var aSizes = [];
		var aContentAreas = this._getContentAreas();
		var sOrientation = this.getOrientation();
		var aAutosizeIdx = [];
		var aAutoMinsizeIdx = [];
		var aPercentsizeIdx = [];

		for (i = 0; i < aContentAreas.length; ++i) {
			oLayoutData = aContentAreas[i].getLayoutData();
			sSize = oLayoutData ? oLayoutData.getSize() : "auto";

			aSizes.push(sSize);
		}

		var iAvailableSize = this._calculateAvailableContentSize(aSizes) + 1;
		this._calculatedSizes = [];

		// Remove fixed sizes from available size
		for (i = 0; i < aSizes.length; ++i) {
			sSize = aSizes[i];

			if (sSize.indexOf("px") > -1) {
				// Pixel based Value - deduct it from available size
				iSize = parseInt(sSize, 10);
				iAvailableSize -= iSize;
				this._calculatedSizes[i] = iSize;
			} else if (sSize.indexOf("%") > -1) {
				aPercentsizeIdx.push(i);
			} else if (sSize === "auto") {
				oLayoutData = aContentAreas[i].getLayoutData();
				if (oLayoutData && parseInt(oLayoutData.getMinSize(), 10) !== 0) {
					aAutoMinsizeIdx.push(i);
				} else {
					aAutosizeIdx.push(i);
				}
			} else {
				jQuery.sap.log.error("Illegal size value: " + aSizes[i]);
			}
		}

		var bWarnSize = false; // Warn about sizes being too big for the available space

		// If more than the available size if assigned to fixed width content, the rest will get no
		// space at all
		if (iAvailableSize < 0) { bWarnSize = true; iAvailableSize = 0; }

		// Now calculate % of the available space
		var iRest = iAvailableSize;
		iAvailableSize = sOrientation === "Horizontal" ? this.$().width() : this.$().height();

		var iPercentSizes = aPercentsizeIdx.length;
		for (i = 0; i < iPercentSizes; ++i) {
			idx = aPercentsizeIdx[i];
			if (iPercentSizes === 1 && aContentAreas.length === 1) {
				iColSize = iAvailableSize;
			} else {
				// Percent based Value - deduct it from available size
				iColSize = parseFloat(aSizes[idx]) / 100 * iAvailableSize;
			}
			this._calculatedSizes[idx] = iColSize;
			iRest -= iColSize;
		}
		iAvailableSize = iRest;

		if (iAvailableSize < 0) { bWarnSize = true; iAvailableSize = 0; }

		// Calculate auto sizes
		iColSize = Math.floor(iAvailableSize / (aAutoMinsizeIdx.length + aAutosizeIdx.length), 0);

		// First calculate auto-sizes with a minSize constraint
		var iAutoMinSizes = aAutoMinsizeIdx.length;
		for (i = 0; i < iAutoMinSizes; ++i) {
			idx = aAutoMinsizeIdx[i];
			var iMinSize = parseInt(aContentAreas[idx].getLayoutData().getMinSize(), 10);
			if (iMinSize > iColSize) {
				this._calculatedSizes[idx] = iMinSize;
				iAvailableSize -= iMinSize;
			} else {
				this._calculatedSizes[idx] = iColSize;
				iAvailableSize -= iColSize;
			}
		}

		if (iAvailableSize < 0) { bWarnSize = true; iAvailableSize = 0; }

		// Now calculate "auto"-sizes
		iRest = iAvailableSize;
		var iAutoSizes = aAutosizeIdx.length;
		iColSize = Math.floor(iAvailableSize / iAutoSizes, 0);
		for (i = 0; i < iAutoSizes; ++i) {
			idx = aAutosizeIdx[i];
			this._calculatedSizes[idx] = iColSize;
			iRest -= iColSize;
		}

		if (bWarnSize) {
			// TODO: Decide if the warning should be kept - might spam the console but on the other
			//       hand it might make analyzing of splitter bugs easier, since we can just ask
			//       developers if there was a [Splitter] output on the console if the splitter looks
			//       weird in their application.
			jQuery.sap.log.info(
				"[Splitter] The set sizes and minimal sizes of the splitter contents are bigger " +
				"than the available space in the UI."
			);
		}
		this._calculatedSizes = this._calculatedSizes;
	};

	AssociativeSplitter.prototype._ensureAllSplittersCollapsed = function (iBar) {
		var aAreas = this._getContentAreas();
		var bAllCollapsed = false;
		for (var i = 0; i < aAreas.length; i++) {
			var sSize = aAreas[i].getLayoutData().getSize().slice(0, -2);

			if (sSize === "0" || sSize === "au") {
				bAllCollapsed = true;
				continue;
			} else if (i === (aAreas.length - 1) && bAllCollapsed) {
				this._getContentAreas()[iBar + 1].setLayoutData(new sap.ui.layout.SplitterLayoutData({ size: "100%" }));
			}
		}
	};

	function _ensureLayoutData(oContent) {
		var oLd = oContent.getLayoutData();
		// Make sure LayoutData is set on the content
		// But this approach has the advantage that "compatible" LayoutData can be used.
		if (oLd && (!oLd.getResizable || !oLd.getSize || !oLd.getMinSize)) {
			jQuery.sap.log.warning(
				"Content \"" + oContent.getId() + "\" for the Splitter contained wrong LayoutData. " +
				"The LayoutData has been replaced with default values."
			);
			oLd = null;
		}
		if (!oLd) {
			oContent.setLayoutData(new sap.ui.layout.SplitterLayoutData());
		}
	}

	/**
	 * Prevents the selection of text while the mouse is moving when pressed
	 *
	 * @param {boolean} [bTouch] If set to true, touch events instead of mouse events are captured
	 */
	function _preventTextSelection(bTouch) {
		var fnPreventSelection = function (oEvent) {
			oEvent.preventDefault();
		};
		var fnAllowSelection = null;
		fnAllowSelection = function () {
			document.removeEventListener("touchend",  fnAllowSelection);
			document.removeEventListener("touchmove", fnPreventSelection);
			document.removeEventListener("mouseup",   fnAllowSelection);
			document.removeEventListener("mousemove", fnPreventSelection);
		};

		if (bTouch) {
			this._ignoreMouse = true; // Ignore mouse-events until touch is done
			document.addEventListener("touchend",  fnAllowSelection);
			document.addEventListener("touchmove", fnPreventSelection);
		} else {
			document.addEventListener("mouseup",   fnAllowSelection);
			document.addEventListener("mousemove", fnPreventSelection);
		}
	}

	return AssociativeSplitter;

}, /* bExport= */ false);
}; // end of sap/ui/layout/AssociativeSplitter.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.PaneContainer') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.layout.PaneContainer.
jQuery.sap.declare('sap.ui.layout.PaneContainer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/PaneContainer",['jquery.sap.global', './library', 'sap/ui/core/Element', './Splitter', './AssociativeSplitter'],
	function(jQuery, library, Element, Splitter, AssociativeSplitter) {
	"use strict";

	/**
	 * Constructor for a new PaneContainer.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * PaneContainer is an abstraction of Splitter
	 * Could be used as an aggregation of ResponsiveSplitter or other PaneContainers.
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.48.5
	 *
	 * @constructor
	 * @public
	 * @since 1.38
	 * @alias sap.ui.layout.PaneContainer
	 */
	var PaneContainer = Element.extend("sap.ui.layout.PaneContainer", { metadata : {
		library : "sap.ui.layout",
		properties : {
			/**
			 The orientation of the Splitter
			 */
			orientation : { type : "sap.ui.core.Orientation", group : "Behavior", defaultValue : sap.ui.core.Orientation.Horizontal }
		},
		defaultAggregation : "panes",
		aggregations : {
			/**
			 The Pane that will be shown when there is no suitable pane for ResponsiveSplitter's current width.
			 */
			panes: { type: "sap.ui.core.Element", multiple: true, singularName: "pane" }
		}
	}});

	PaneContainer.prototype.init = function () {
		this._oSplitter = new AssociativeSplitter({
			orientation: this.getOrientation(),
			height: "100%"
		});

		this._oSplitter._bUseIconForSeparator = false;
	};

	/**
	 * Setter for property orientation.
	 * Default value is sap.ui.core.Orientation.Horizontal
	 * @public
	 * @param {sap.ui.core.Orientation} sOrientation The Orientation type.
	 * @returns {sap.ui.layout.PaneContainer} this to allow method chaining.
	 */
	PaneContainer.prototype.setOrientation = function(sOrientation) {
		this._oSplitter.setOrientation(sOrientation);
		return this.setProperty("orientation", sOrientation, true);
	};


	PaneContainer.prototype._getPanesInInterval = function (iFrom) {
		return this.getPanes().filter(function(oPane) {
			return oPane instanceof sap.ui.layout.SplitPane && oPane._isInInterval(iFrom);
		});
	};

	/**
	 * Setter for property layoutData.
	 * @public
	 * @param {sap.ui.core.LayoutData} oLayoutData The LayoutData object.
	 * @returns {sap.ui.layout.PaneContainer} this to allow method chaining.
	 */
	PaneContainer.prototype.setLayoutData = function(oLayoutData) {
		return this._oSplitter.setLayoutData(oLayoutData);
	};

	/**
	 * Pane insertion
	 *
	 * @public
	 * @param oObject
	 * @param iIndex
	 * @returns {sap.ui.base.ManagedObject}
	 */
	PaneContainer.prototype.insertPane = function (oObject, iIndex) {
		var vResult =  this.insertAggregation("panes", oObject, iIndex),
			oEventDelegate = {
				onAfterRendering: function () {
					this.triggerResize();
					this.removeEventDelegate(oEventDelegate);
				}
			};

		// When nesting Panes there should be resize event everytime a new pane is inserted.
		// However for the newly inserted pane is too early and it has not been subscribed yet to the resize handler.
		// Therefore the resize event should be triggered manually.
		if (oObject instanceof PaneContainer && oObject._oSplitter) {
			oObject._oSplitter.addEventDelegate(oEventDelegate, oObject._oSplitter);
		}

		return vResult;
	};

	return PaneContainer;

}, /* bExport= */ true);
}; // end of sap/ui/layout/PaneContainer.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.ResponsiveFlowLayout') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.layout.ResponsiveFlowLayout.
jQuery.sap.declare('sap.ui.layout.ResponsiveFlowLayout'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IntervalTrigger'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/ResponsiveFlowLayout",['jquery.sap.global', 'sap/ui/core/Control', 'sap/ui/core/IntervalTrigger', 'sap/ui/core/theming/Parameters', './ResponsiveFlowLayoutData', './library'],
	function(jQuery, Control, IntervalTrigger, Parameters, ResponsiveFlowLayoutData, library) {
	"use strict";



	/**
	 * Constructor for a new ResponsiveFlowLayout.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * This is a layout where several controls can be added. These controls are blown up to fit in an entire row. If the window resizes, the controls are moved between the rows and resized again.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.48.5
	 *
	 * @constructor
	 * @public
	 * @since 1.16.0
	 * @alias sap.ui.layout.ResponsiveFlowLayout
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ResponsiveFlowLayout = Control.extend("sap.ui.layout.ResponsiveFlowLayout", /** @lends sap.ui.layout.ResponsiveFlowLayout.prototype */ { metadata : {

		library : "sap.ui.layout",
		properties : {

			/**
			 * If set to false, all added controls will keep their width, or otherwise, the controls will be stretched to the possible width of a row.
			 */
			responsive : {type : "boolean", group : "Misc", defaultValue : true}
		},
		defaultAggregation : "content",
		aggregations : {

			/**
			 * Added content that should be positioned. Every content item should have a ResponsiveFlowLayoutData attached, or otherwise, the default values are used.
			 */
			content : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
		}
	}});


	(function() {
		ResponsiveFlowLayout.prototype.init = function() {
			this._rows = [];

			this._bIsRegistered = false;
			this._proxyComputeWidths = jQuery.proxy(computeWidths, this);

			this._iRowCounter = 0;
		};
		ResponsiveFlowLayout.prototype.exit = function() {
			delete this._rows;

			if (this._IntervalCall) {
				jQuery.sap.clearDelayedCall(this._IntervalCall);
				this._IntervalCall = undefined;
			}

			if (this._resizeHandlerComputeWidthsID) {
				sap.ui.core.ResizeHandler.deregister(this._resizeHandlerComputeWidthsID);
			}
			delete this._resizeHandlerComputeWidthsID;
			delete this._proxyComputeWidths;

			if (this.oRm) {
				this.oRm.destroy();
				delete this.oRm;
			}

			delete this._$DomRef;
			delete this._oDomRef;

			delete this._iRowCounter;
		};

		var updateRows = function(oThis) {
			var aControls = oThis.getContent();
			var aRows = [];
			var iRow = -1;
			var oItem = {}, oLast = {};
			var sId = "";
			var oLD;
			var minWidth = 0, weight = 0, length = 0;
			var bBreak = false, bMargin = false, bLinebreakable = false;

			for (var i = 0; i < aControls.length; i++) {
				// use default values -> are overwritten if LayoutData exists
				minWidth = ResponsiveFlowLayoutData.MIN_WIDTH;
				weight = ResponsiveFlowLayoutData.WEIGHT;
				bBreak = ResponsiveFlowLayoutData.LINEBREAK;
				bMargin = ResponsiveFlowLayoutData.MARGIN;
				bLinebreakable = ResponsiveFlowLayoutData.LINEBREAKABLE;

				// set the values of the layout data if available
				oLD = _getLayoutDataForControl(aControls[i]);
				if (oLD instanceof ResponsiveFlowLayoutData) {
					bBreak = oLD.getLinebreak();
					minWidth = oLD.getMinWidth();
					weight = oLD.getWeight();
					bMargin = oLD.getMargin();
					bLinebreakable = oLD.getLinebreakable();
				}

				if (iRow < 0 || bBreak) {
					/*
					 * if first run OR current control should cause a line break, the
					 * control will be placed in a new row
					 */
					iRow++;
					aRows.push({
						height : -1,
						cont : []
					});
				}

				length = aRows[iRow].cont.length;
				sId = aControls[i].getId() + "-cont" + iRow + "_" + length;
				oItem = {
					minWidth : minWidth,
					weight : weight,
					linebreakable : bLinebreakable,
					// since the margin of the element is used outside of it it
					// becomes padding
					padding : bMargin,
					control : aControls[i],
					id : sId,
					breakWith : []
				};

				// check if item has been pushed -> needed if no element was found that
				// is allowed to be wrapped into a new line
				var bPushed = false;
				if (!bLinebreakable) {
					// if an element mustn't break -> find any previous element that
					// is allowed to do wrapping
					for (var br = length; br > 0; br--) {
						oLast = aRows[iRow].cont[br - 1];
						if (oLast.linebreakable) {
							oLast.breakWith.push(oItem);
							bPushed = true;
							break;
						}
					}
				}

				if (!bPushed) {
					aRows[iRow].cont.push(oItem);
				}

			}

			oThis._rows = aRows;
		};

		var getCurrentWrapping = function(oRow, $Row, oThis) {
			var r = [];
			var lastOffsetLeft = 10000000;
			var currentRow = -1;

			var fnCurrentWrapping = function(j) {
				var $cont = jQuery.sap.byId(oRow.cont[j].id);
				if ($cont.length > 0) {
					var offset = $cont[0].offsetLeft;
					if (lastOffsetLeft >= offset) {
						r.push({
							cont : []
						});
						currentRow++;
					}
					lastOffsetLeft = offset;
					r[currentRow].cont.push(oRow.cont[j]);
				}
			};

			// Find out the "rows" within a row
			if (sap.ui.getCore().getConfiguration().getRTL()) {
				// for RTL-mode the elements have to be checked the other way round
				for (var i = oRow.cont.length - 1; i >= 0; i--) {
					fnCurrentWrapping(i);
				}
			} else {
				for (var i = 0; i < oRow.cont.length; i++) {
					fnCurrentWrapping(i);
				}
			}

			return r;
		};

		/**
		 * Returns the target wrapping.
		 * @param {object}
		 *            [oRow] The corresponding row of possible controls
		 * @param {int}
		 *            [iWidth] The width of the row in pixels
		 *
		 */
		var getTargetWrapping = function(oRow, iWidth) {
			/*
			 * initiating all required variables to increase speed and memory
			 * efficiency
			 */
			var r = [];
			var currentRow = -1;
			var currentWidth = 0;
			var totalWeight = 0;
			var indexLinebreak = 0;
			var w1 = 0, w2 = 0;
			var j = 0, k = 0;

			// Find out the "rows" within a row
			for (j = 0; j < oRow.cont.length; j++) {
				currentWidth = 0;
				totalWeight = 0;
				for (k = indexLinebreak; k <= j; k++) {
					totalWeight = totalWeight + oRow.cont[k].weight;
				}
				for (k = indexLinebreak; k <= j; k++) {
					w1 = iWidth / totalWeight * oRow.cont[k].weight;
					w1 = Math.floor(w1);

					w2 = oRow.cont[k].minWidth;

					currentWidth += Math.max(w1, w2);
				}

				if (currentRow == -1 || currentWidth > iWidth) {
					r.push({
						cont : []
					});
					if (currentRow !== -1) {
						/*
						 * if this is NOT the first run -> all coming iterations
						 * needn't to start from '0' since the calculation of a new
						 * row has begun
						 */
						indexLinebreak = j;
					}
					currentRow++;
				}
				r[currentRow].cont.push(oRow.cont[j]);
			}
			return r;
		};

		var checkWrappingDiff = function(wrap1, wrap2) {
			if (wrap1.length != wrap2.length) {
				return true;
			}

			for (var i = 0; i < wrap1.length; i++) {
				if (wrap1[i].cont.length != wrap2[i].cont.length) {
					return true;
				}
			}

			return false;
		};

		/**
		 * Creates the corresponding content of the targeted wrapping and pushes it
		 * to the RenderManager instance.
		 *
		 * @param {object}
		 *            [oTargetWrapping] The targeted wrapping (may differ
		 *            from current wrapping)
		 * @param {int}
		 *            [iWidth] The available inner width of the row
		 * @private
		 */
		ResponsiveFlowLayout.prototype.renderContent = function(oTargetWrapping, iWidth) {
			var r = oTargetWrapping,
				iRowProcWidth = 0,
				aWidths = [],
				i = 0, ii = 0, j = 0, jj = 0,
				totalWeight = 0,
				iProcWidth = 0,
				oCont,
				tWeight = 0, tMinWidth = 0,
				aBreakWidths = [],
				aClasses = [],
				sId = this.getId(),
				sHeaderId = "",
				oRm = this._getRenderManager();

			for (i = 0; i < r.length; i++) {
				/*
				 * reset all corresponding values for each row
				 */
				iProcWidth = 0;
				aWidths.length = 0;
				iRowProcWidth = 100; // subtract the used values from a whole row
				aClasses.length = 0;

				aClasses.push("sapUiRFLRow");
				if (r[i].cont.length <= 1) {
					aClasses.push("sapUiRFLCompleteRow");
				}
				var sRowId = sId + "-row" + this._iRowCounter;
				var oStyles = {};
				oRm.writeHeader(sRowId, oStyles, aClasses);

				totalWeight = 0;
				for (ii = 0; ii < r[i].cont.length; ii++) {
					totalWeight += r[i].cont[ii].weight;
				}

				for (j = 0; j < r[i].cont.length; j++) {
					oCont = r[i].cont[j];
					tWeight = 0;
					tMinWidth = 0;

					if (oCont.breakWith.length > 0) {
						tWeight = oCont.weight;
						tMinWidth = oCont.minWidth;
						for (var br = 0; br < oCont.breakWith.length; br++) {
							tWeight += oCont.breakWith[br].weight;
							tMinWidth += oCont.breakWith[br].minWidth;
						}
					}

					/*
					 * Render Container
					 */
					sHeaderId = r[i].cont[j].id;
					aClasses.length = 0;
					// clear all other values from the object
					oStyles = {
						// the unit "px" is added below to be able to calculate with
						// the value of min-width
						"min-width" : oCont.breakWith.length > 0 ? tMinWidth : oCont.minWidth
					};

					iProcWidth = 100 / totalWeight * oCont.weight;
					var iProcMinWidth = oStyles["min-width"] / iWidth * 100;
					// round the values BEFORE they are used for the percentage value
					// because if the un-rounded values don't need the percentage
					// value
					// of the min-width, the percentage value of the calculated width
					// might be lower
					// after it is floored.
					var iPMinWidth = Math.ceil(iProcMinWidth);
					var iPWidth = Math.floor(iProcWidth);
					if (iPWidth !== 100 && iPMinWidth > iPWidth) {
						// if the percentage of the element's width will lead
						// into a too small element, use the corresponding
						// percentage value of the min-width
						iProcWidth = iPMinWidth;
					} else {
						iProcWidth = iPWidth;
					}

					// check how many percentage points are still left. If there
					// are less available than calculated, just use the rest of
					// the row
					iProcWidth = iRowProcWidth < iProcWidth ? iRowProcWidth : iProcWidth;

					iRowProcWidth -= iProcWidth;
					aWidths.push(iProcWidth);

					// if possible, percentage amount is not 0% and this is the
					// last item
					if (iRowProcWidth > 0 && j === (r[i].cont.length - 1)) {
						iProcWidth += iRowProcWidth;
					}

					aClasses.push("sapUiRFLContainer");
					oStyles["width"] = iProcWidth + "%";
					oStyles["min-width"] = oStyles["min-width"] + "px";
					oRm.writeHeader(sHeaderId, oStyles, aClasses);

					/*
					 * content rendering (render control)
					 */
					aClasses.length = 0;
					aClasses.push("sapUiRFLContainerContent");
					if (oCont.breakWith.length > 0) {
						aClasses.push("sapUiRFLMultiContainerContent");
					}
					if (oCont.padding) {
						aClasses.push("sapUiRFLPaddingClass");
					}

					var sClass = this._addContentClass(oCont.control, j);
					if (sClass) {
						aClasses.push(sClass);
					}

					oStyles = {};
					oRm.writeHeader("", oStyles, aClasses);

					/*
					 * Render all following elements into same container if there
					 * are any that should wrap together with container. Otherwise, simply
					 * render the control.
					 */
					if (oCont.breakWith.length > 0) {
						/*
						 * Render first element of wrap-together-group
						 */
						sHeaderId = r[i].cont[j].id + "-multi0";
						aClasses.length = 0;
						oStyles = {
							"min-width" : tMinWidth + "px"
						};
						// set width of first element
						var percW = 100 / tWeight * oCont.weight;
						percW = Math.floor(percW);
						aBreakWidths.push(percW);

						aClasses.push("sapUiRFLMultiContent");
						oStyles["width"] = percW + "%";

						if (r[i].cont[j].padding) {
							aClasses.push("sapUiRFLPaddingClass");
						}
						oRm.writeHeader(sHeaderId, oStyles, aClasses);

						// total percentage for all elements
						var tPercentage = percW;

						oRm.renderControl(oCont.control);
						oRm.write("</div>");

						/*
						 * Render all following elements that should wrap with the
						 * trailing one
						 */
						for (jj = 0; jj < oCont.breakWith.length; jj++) {
							sHeaderId = oCont.breakWith[jj].id + '-multi' + (jj + 1);
							aClasses.length = 0;
							oStyles = {
								"min-width" : oCont.breakWith[jj].minWidth + "px"
							};

							percW = 100 / tWeight * oCont.breakWith[jj].weight;
							percW = Math.floor(percW);

							aBreakWidths.push(percW);
							tPercentage += percW;

							// if percentage is not 100% and this is the last
							// item
							if (tPercentage < 100 && jj === (oCont.breakWith.length - 1)) {
								percW += 100 - tPercentage;
							}

							aClasses.push("sapUiRFLMultiContent");
							oStyles["width"] = percW + "%";

							if (oCont.breakWith[jj].padding) {
								aClasses.push("sapUiRFLPaddingClass");
							}
							oRm.writeHeader(sHeaderId, oStyles, aClasses);

							oRm.renderControl(oCont.breakWith[jj].control);
							oRm.write("</div>");
						}
					} else {
						oRm.renderControl(oCont.control);
					}
					oRm.write("</div>"); // content

					oRm.write("</div>"); // container
				}
				oRm.write("</div>"); // row

				this._iRowCounter++;
			}
		};

		var computeWidths = function(bInitial) {
			this._iRowCounter = 0;

			this._oDomRef = this.getDomRef();
			if (this._oDomRef) {
				var sId = this.getId();
				var iInnerWidth = jQuery(this._oDomRef).width(); //width without the padding
				var bRender = false;

				if (this._rows) {
					for (var i = 0; i < this._rows.length; i++) {
						var $Row = this._$DomRef.find("#" + sId + "-row" + i);

						var oTargetWrapping = getTargetWrapping(this._rows[i], iInnerWidth);
						var oCurrentWrapping = getCurrentWrapping(this._rows[i], $Row, this);

						// render if wrapping differs
						bRender = checkWrappingDiff(oCurrentWrapping, oTargetWrapping);

						// if the width/height changed so the sizes need to be
						// recalculated
						var oRowRect = this._getElementRect($Row);
						var oPrevRect = this._rows[i].oRect;

						if (oRowRect && oPrevRect) {
							bRender = bRender || (oRowRect.width !== oPrevRect.width) && (oRowRect.height !== oPrevRect.height);
						}

						// if this should be the initial rendering -> do it
						bRender = bRender || (typeof (bInitial) === "boolean" && bInitial);

						if (this._bLayoutDataChanged || bRender) {

							//in IE when setting the innerHTML property to "" the changes do not take effect correctly and all the children are gone
							if (sap.ui.Device.browser.internet_explorer){
								jQuery(this._oDomRef).empty();
							} else {
								this._oDomRef.innerHTML = "";
							}

							// reset this to be clean for next check interval
							this._bLayoutDataChanged = false;
							this.renderContent(oTargetWrapping, iInnerWidth);
						}
					}

					if (this._oDomRef.innerHTML === "") {
						this._getRenderManager().flush(this._oDomRef);

						for (var i = 0; i < this._rows.length; i++) {
							var oTmpRect = this._getElementRect(jQuery.sap.byId(sId + "-row" + i));
							this._rows[i].oRect = oTmpRect;
						}
					}

					if (this._rows.length === 0) {
						if (this._resizeHandlerComputeWidthsID) {
							sap.ui.core.ResizeHandler.deregister(this._resizeHandlerComputeWidthsID);
							delete this._resizeHandlerComputeWidthsID;
						}
					}
				}
			}
		};

		/**
		 * Handles the internal event onBeforeRendering.
		 * Before all controls are rendered, the internal structure of the rows needs to be updated.
		 *
		 */
		ResponsiveFlowLayout.prototype.onBeforeRendering = function() {
			// update the internal structure of the rows
			updateRows(this);

			if (this._resizeHandlerFullLengthID) {
				sap.ui.core.ResizeHandler.deregister(this._resizeHandlerFullLengthID);
				delete this._resizeHandlerFullLengthID;
			}
		};

		/**
		 * Handles the internal event onAfterRendering.
		 * If the layout should be responsive, it is necessary to fix the width of the content
                 * items to correspond to the width of the layout.
		 */
		ResponsiveFlowLayout.prototype.onAfterRendering = function(oEvent) {
			this._oDomRef = this.getDomRef();
			this._$DomRef = jQuery(this._oDomRef);

			// Initial Width Adaptation
			this._proxyComputeWidths(true);

			if (this.getResponsive()) {
				if (!this._resizeHandlerComputeWidthsID) {
					this._resizeHandlerComputeWidthsID = sap.ui.core.ResizeHandler.register(this, this._proxyComputeWidths);
				}
			} else {
				if (this._resizeHandlerComputeWidthsID) {
					sap.ui.core.ResizeHandler.deregister(this._resizeHandlerComputeWidthsID);
					delete this._resizeHandlerComputeWidthsID;
				}
			}
		};

		ResponsiveFlowLayout.prototype.onThemeChanged = function(oEvent) {
			if (oEvent.type === "LayoutDataChange") {
				this._bLayoutDataChanged = true;
			}
			if (!this._resizeHandlerComputeWidthsID) {
				this._resizeHandlerComputeWidthsID = sap.ui.core.ResizeHandler.register(this, this._proxyComputeWidths);
			}

			updateRows(this);
			this._proxyComputeWidths();
		};

		/**
		 * If any LayoutData was changed, the same logic should be applied as in onThemeChanged.
		 */
		ResponsiveFlowLayout.prototype.onLayoutDataChange = ResponsiveFlowLayout.prototype.onThemeChanged;

		var _getLayoutDataForControl = function(oControl) {
			var oLayoutData = oControl.getLayoutData();

			if (!oLayoutData) {
				return undefined;
			} else if (oLayoutData instanceof ResponsiveFlowLayoutData) {
				return oLayoutData;
			} else if (oLayoutData.getMetadata().getName() == "sap.ui.core.VariantLayoutData") {
				// multiple LayoutData available - search here
				var aLayoutData = oLayoutData.getMultipleLayoutData();
				for (var i = 0; i < aLayoutData.length; i++) {
					var oLayoutData2 = aLayoutData[i];
					if (oLayoutData2 instanceof ResponsiveFlowLayoutData) {
						return oLayoutData2;
					}
				}
			}
		};

		/**
		 * Adds content.
		 * This function needs to be overridden to prevent any rendering while some
		 * content is still being added.
		 *
		 * @param {sap.ui.core.Control}
		 *            oContent The content that should be added to the layout
		 * @public
		 */
		ResponsiveFlowLayout.prototype.addContent = function(oContent) {
			if (oContent && this._IntervalCall) {
				jQuery.sap.clearDelayedCall(this._IntervalCall);
				this._IntervalCall = undefined;
			}
			this.addAggregation("content", oContent);
		};

		/**
		 * Inserts content.
		 * This function needs to be overridden to prevent any rendering while some
		 * content is still being added.
		 *
		 * @param {sap.ui.core.Control}
		 *            oContent The content that should be inserted to the layout
		 * @param {int}
		 *            iIndex The index where the content should be inserted into
		 * @public
		 */
		ResponsiveFlowLayout.prototype.insertContent = function(oContent, iIndex) {
			if (oContent && this._IntervalCall) {
				jQuery.sap.clearDelayedCall(this._IntervalCall);
				this._IntervalCall = undefined;
			}
			this.insertAggregation("content", oContent, iIndex);
		};

		/**
		 * Removes content.
		 * This function needs to be overridden to prevent any rendering while some
		 * content is still being added.
		 *
		 * @param {int|string|sap.ui.core.Control}
		 *            oContent The content that should be removed from the layout
		 * @returns {sap.ui.core.Control} The <code>this</code> pointer for chaining
		 * @public
		 */
		ResponsiveFlowLayout.prototype.removeContent = function(oContent) {
			if (oContent && this._IntervalCall) {
				jQuery.sap.clearDelayedCall(this._IntervalCall);
				this._IntervalCall = undefined;
			}
			this.removeAggregation("content", oContent);
		};

		/**
		 * Gets the role used for accessibility.
		 * Set by the Form control if ResponsiveFlowLayout represents a FormContainer.
		 * @return {string} sRole Accessibility role
		 * @since 1.28.0
		 * @private
		 */
		ResponsiveFlowLayout.prototype._getAccessibleRole = function() {

			return null;

		};

		/**
		 * Sets a class at the content container
		 * Set by the Form control if ResponsiveFlowLayout represents a FormElement.
		 * @return {string} sClass CSS class
		 * @since 1.28.22
		 * @private
		 */
		ResponsiveFlowLayout.prototype._addContentClass = function(oControl, iIndex) {

			return null;

		};

		/**
		 * Returns a rectangle describing the current visual positioning of 1st DOM in the collection.
		 * The difference with the function rect() in jQuery.sap.dom.js is that the height and width are cut to the
		 * 1st digit after the decimal separator and this is consistent across all browsers.
		 * @param oElement the jQuery collection to check
		 * @returns {{top, left, width, height}} or null if no such element
		 * @private
		 */
		ResponsiveFlowLayout.prototype._getElementRect = function (oElement) {
			var oRect = oElement && oElement.rect();

			if (oRect) {
				oRect.height = oRect.height.toFixed(1);
				oRect.width = oRect.width.toFixed(1);
			}
			return oRect;
		};

		/**
		 * Lazily obtains custom version of render manager
		 * @private
		 * @returns {sap.ui.core.RenderManager} instance of render manager.
		 * Note: the instance is also available as <code>this.oRm</code>
		 */
		ResponsiveFlowLayout.prototype._getRenderManager = function () {
			if (!this.oRm) {
				this.oRm = sap.ui.getCore().createRenderManager();
				this.oRm.writeStylesAndClasses = function() {
					this.writeStyles();
					this.writeClasses();
				};
				this.oRm.writeHeader = function(sId, oStyles, aClasses) {
					this.write('<div id="' + sId + '"');

					if (oStyles) {
						for ( var key in oStyles) {
							if (key === "width" && oStyles[key] === "100%") {
								this.addClass("sapUiRFLFullLength");
							}
							this.addStyle(key, oStyles[key]);
						}
					}
					for (var i = 0; i < aClasses.length; i++) {
						this.addClass(aClasses[i]);
					}

					this.writeStylesAndClasses();
					this.write(">");
				};
			}
			return this.oRm;
		};

	}());

	return ResponsiveFlowLayout;

}, /* bExport= */ true);

}; // end of sap/ui/layout/ResponsiveFlowLayout.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.ResponsiveSplitter') ) {
/*!
* UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
*/

// Provides control sap.ui.layout.ResponsiveSplitter.
jQuery.sap.declare('sap.ui.layout.ResponsiveSplitter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/ResponsiveSplitter",["jquery.sap.global", "./library", "sap/ui/core/Control", "./ResponsiveSplitterUtilities", "./ResponsiveSplitterPage", "./PaneContainer", "./SplitPane", "sap/ui/core/delegate/ItemNavigation"], function (jQuery, library, Control, RSUtil, ResponsiveSplitterPage, PaneContainer, SplitPane, ItemNavigation) {
	"use strict";

	/**
	 * Constructor for a new ResponsiveSplitter.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * ResponsiveSplitter is a control that enables responsiveness of normal Splitter.
	 * ResponsiveSplitter consists of PaneContainers that further  agregate other PaneContainers and SplitPanes.
	 * SplitPanes can be moved to the pagination when a minimum width of their parent is reached.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.48.5
	 *
	 * @constructor
	 * @public
	 * @since 1.38
	 * @alias sap.ui.layout.ResponsiveSplitter
	 */
	var ResponsiveSplitter = Control.extend("sap.ui.layout.ResponsiveSplitter", /** @lends sap.ui.layout.ResponsiveSplitter.prototype */ {
		metadata: {
			library: "sap.ui.layout",
			properties: {
				/**
				 * The width of the control
				 */
				width : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : '100%'},

				/**
				 * The height of the control
				 */
				height : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : '100%'}
			},
			defaultAggregation : "rootPaneContainer",
			aggregations: {
				/**
				 * The root PaneContainer of the ResponsiveSplitter
				 */
				rootPaneContainer: { type: "sap.ui.layout.PaneContainer", multiple: false },
				/**
				 * Contains the internal pages that are used for pagination
				 */
				_pages: { type: "sap.ui.layout.ResponsiveSplitterPage", multiple : true, visibility: "hidden" }
			},
			associations: {
				/**
				 * The default pane that will remain always visible
				 * If no defaultPane is specified, the ResponsiveSplitter sets the first SplitPane that is added to a PaneContainer in it as a default.
				 */
				defaultPane: { type: "sap.ui.layout.SplitPane", multiple: false }
			},
			events: {

			}
		}
	});

	var CONSTANTS = {
		MAX_VISIBLE_BUTTONS: 7
	};

	ResponsiveSplitter.prototype.init = function () {
		this._aPaneContainers = [];
		this._aPanes = [];
		this._oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.layout");
		this.addEventDelegate({
			onAfterRendering: function () {
				this._initItemNavigation();
			}
		}, this);
	};

	ResponsiveSplitter.prototype.onBeforeRendering = function () {
		var oRootContainer = this.getRootPaneContainer();
		if (oRootContainer) {
			oRootContainer._oSplitter.addEventDelegate({
				onAfterRendering: function () {
					this._setSplitterBarsTooltips(oRootContainer._oSplitter);
					this._updatePaginatorButtonsTooltips();
				}
			}, this);

			this._createWidthIntervals();
			this._createPages();
			this._detachResizeHandler();
		}
	};

	ResponsiveSplitter.prototype.onAfterRendering = function () {
		this._parentResizeHandler = sap.ui.core.ResizeHandler.register(this, this._onParentResize.bind(this));
		var oRootContainer = this.getRootPaneContainer();
		if (oRootContainer) {
			this._onParentResize();
		}
	};

	/**
	 * Detaches the resize handler on exit
	 */
	ResponsiveSplitter.prototype.exit = function () {
		this._detachResizeHandler();
	};

	/**
	 * Sets tooltips to the SplitterBars
	 * @returns {void}
	 * @private
	 */
	ResponsiveSplitter.prototype._setSplitterBarsTooltips = function (oContent, iParent) {
		var	aSplitterBars = oContent.$().find(" > .sapUiLoSplitterBar"),
			aContentAreas = oContent.$().find(" > .sapUiLoSplitterContent"),
			sBaseTooltip = this._oResourceBundle.getText("RESPONSIVE_SPLITTER_RESIZE") + " ",
			sTooltip = sBaseTooltip,
			iCurrentPaneIndex, iNextPaneIndex, oAreaContent, sContentId;

		for (var i = 0; i < aContentAreas.length; i++) {
			sContentId = aContentAreas[i].childNodes[0].id;
			oAreaContent = sap.ui.getCore().byId(sContentId);
			iCurrentPaneIndex = i + 1;
			iNextPaneIndex = i + 2;

			if (iParent) {
				sTooltip += this._oResourceBundle.getText("RESPONSIVE_SPLITTER_PANES", [iParent + "." + iCurrentPaneIndex, iParent + "." + iNextPaneIndex]);
			} else {
				sTooltip += this._oResourceBundle.getText("RESPONSIVE_SPLITTER_PANES", [iCurrentPaneIndex, iNextPaneIndex]);
			}

			if (aSplitterBars[i]) {
				aSplitterBars[i].setAttribute("title", sTooltip);
				sTooltip = sBaseTooltip;
			}
			if (oAreaContent instanceof sap.ui.layout.Splitter) {
				this._setSplitterBarsTooltips(oAreaContent, iCurrentPaneIndex);
			}
		}
	};

	/**
	 * Sets and updates the tooltips of the Paginator's buttons.E.g.
	 * Go to split screen 1 and 2
	 * Go to screen 3
	 * @returns {void}
	 * @private
	 */
	ResponsiveSplitter.prototype._updatePaginatorButtonsTooltips = function () {
		var aVisibleButtons = Array.prototype.slice.call(this._getVisibleButtons()),
			iHomePageCount = this.getRootPaneContainer()._oSplitter.getAssociatedContentAreas().length,
			sHomeTooltip = this._oResourceBundle.getText("RESPONSIVE_SPLITTER_HOME") + " ",
			sAnd = this._oResourceBundle.getText("RESPONSIVE_SPLITTER_AND"),
			sTooltip = "",
			that = this,
			oHomeButton;

		if (aVisibleButtons.length > 0) {
			oHomeButton = aVisibleButtons.shift();
			for (var i = 1; i <= iHomePageCount; i++) {
				sHomeTooltip += i;

				if (i < (iHomePageCount - 1)) {
					sHomeTooltip += ", ";
				} else if (i === iHomePageCount - 1){
					sHomeTooltip += " " + sAnd + " ";
				}
			}
			oHomeButton.setAttribute("title", sHomeTooltip);

			[].forEach.call(aVisibleButtons, function(oButton) {
				sTooltip = that._oResourceBundle.getText("RESPONSIVE_SPLITTER_GOTO") + " " + (iHomePageCount + 1);
				iHomePageCount += 1;
				oButton.setAttribute("title", sTooltip);
			});
		}
	};

	/**
	 * Handles tab / space / enter of Paginator's button
	 * @returns {void}
	 * @private
	 */
	ResponsiveSplitter.prototype._handlePaginatorButtonTap = function (oEvent) {
		var iOldFocusedIndex = this._oItemNavigation.getFocusedIndex();
		if (jQuery(oEvent.target).hasClass("sapUiResponsiveSplitterPaginatorButton")) {
			jQuery(oEvent.target).attr("tabindex", 0);
			var iPageIndex = parseInt(jQuery(oEvent.target).attr("page-index"), 10);
			this.getAggregation("_pages").forEach(function (page) {
				page.setVisible(false);
			});

			if (iPageIndex !== 0) {
				var aDemandPanes = this._currentInterval.aPages.filter(function(page) { return page.demandPane; });

				iPageIndex = this._currentInterval.aPages.indexOf(aDemandPanes[iPageIndex - 1]);
			}

			this._activatePage(iPageIndex, parseInt(jQuery(oEvent.target).attr("page-index"), 10));
		}

		if (jQuery(oEvent.target).hasClass("sapUiResponsiveSplitterPaginatorNavButton")) {
			if (jQuery(oEvent.target).hasClass("sapUiResponsiveSplitterPaginatorButtonForward")) {
				this._handlePaginatorForward(oEvent);
			} else {
				this._handlePaginatorBack(oEvent);
			}
			this._setItemNavigation();
			this._oItemNavigation.focusItem(iOldFocusedIndex);
		}
		this._setItemNavigation();
	};

	ResponsiveSplitter.prototype.ontap = ResponsiveSplitter.prototype._handlePaginatorButtonTap;

	ResponsiveSplitter.prototype.onsapenter = ResponsiveSplitter.prototype._handlePaginatorButtonTap;

	ResponsiveSplitter.prototype.onsapspace = ResponsiveSplitter.prototype._handlePaginatorButtonTap;

	ResponsiveSplitter.prototype.onsapright = function (oEvent) {
		this._handleArrowNavigation(6, "Forward", oEvent);
	};

	ResponsiveSplitter.prototype.onsapleft = function (oEvent) {
		this._handleArrowNavigation(0, "Back", oEvent);
	};


	/**
	 * Creates an ItemNavigation
	 * @returns {void}
	 * @private
	 */
	ResponsiveSplitter.prototype._initItemNavigation = function () {
		if (this._oItemNavigation) {
			this._bPrevItemNavigation = true;
			this._clearItemNavigation();
		}
		this._oItemNavigation = new ItemNavigation();
		this._oItemNavigation.setCycling(false);
		this.addDelegate(this._oItemNavigation);
		this._setItemNavigation();

		if (this._bPrevItemNavigation) {
			this._oItemNavigation.focusItem(0);
		}
	};

	/**
	 * Enables ItemNavigation for Paginator
	 * @returns {void}
	 * @private
	 */
	ResponsiveSplitter.prototype._setItemNavigation = function () {
		var aButtons = this._getVisibleButtons(),
			aDomRefs = [];

		this._oItemNavigation.setRootDomRef(this.$().find(".sapUiResponsiveSplitterPaginator")[0]);
		for (var i = 0; i < aButtons.length; i++) {
			if (aButtons[i]) {
				aDomRefs.push(aButtons[i]);
			}
		}
		this._oItemNavigation.setItemDomRefs(aDomRefs);
	};

	/**
	 * Destroys the ItemNavigation
	 * @returns {void}
	 * @private
	 */
	ResponsiveSplitter.prototype._clearItemNavigation = function () {
		this.removeDelegate(this._oItemNavigation);
		this._oItemNavigation.destroy();
		delete this._oItemNavigation;
	};

	/**
	 * Handle for arrow keys
	 * @returns {void}
	 * @private
	 */
	ResponsiveSplitter.prototype._handleArrowNavigation = function (iButtonIndex, sDirection, oEvent) {
		if (oEvent.target === this._getVisibleButtons()[iButtonIndex]) {
			this["_handlePaginator" + sDirection](oEvent);
			this._setItemNavigation();
		} else {
			return;
		}
	};

	/**
	 * Handles the resize event of the parent
	 * @private
	 */
	ResponsiveSplitter.prototype._onParentResize = function () {
		var bIntervalHasChanged = this._intervalHasChanged(),
			oRootContainer = this.getRootPaneContainer();

		if (bIntervalHasChanged && oRootContainer) {
			this._arrangeContent();
			this._setPaginatorVisibility();
		}
	};

	/**
	 * Detaches the parent resize handler
	 * @private
	 */
	ResponsiveSplitter.prototype._detachResizeHandler = function () {
		if (this._parentResizeHandler) {
			sap.ui.core.ResizeHandler.deregister(this._parentResizeHandler);
			this._parentResizeHandler = null;
		}
	};

	/**
	 * The WidthIntervals is a sorted array in ascdending order, containing all breakpoints for the splitter
	 * The interval is defined as 2 sequent array elements.
	 * This array includes Number.MIN_VALUE and Number.MAX_VALUE as -Infinity and +Infinity,
	 * and covers the whole numeric axis
	 * @private
	 */
	ResponsiveSplitter.prototype._createWidthIntervals = function () {
		var aBreakpoints = [];
		this._aIntervals = [];

		RSUtil.visitPanes(this.getRootPaneContainer(), function (oPane) {
			var iRequiredWidth = oPane.getRequiredParentWidth();
			if (jQuery.inArray(iRequiredWidth, aBreakpoints) == -1) {
				aBreakpoints.push(iRequiredWidth);
			}
		});

		aBreakpoints.push(Number.NEGATIVE_INFINITY); // -Infinity
		aBreakpoints.push(Number.POSITIVE_INFINITY); // +Infinity

		aBreakpoints.sort(function (a, b) {
			return a - b;
		});

		for (var i = 0; i < aBreakpoints.length - 1; i++) {
			var oInterval = new RSUtil.splitterInterval(aBreakpoints[i], aBreakpoints[i + 1], this.getRootPaneContainer());
			this._aIntervals.push(oInterval);
		}
	};

	/**
	 * Initiates the internal pages aggregation
	 * @private
	 */
	ResponsiveSplitter.prototype._createPages = function () {
		var iMaxPageCount = this._getMaxPageCount();
		this.destroyAggregation("_pages", true);
		for (var i = 0; i < iMaxPageCount; i++) {
			var oPage = new ResponsiveSplitterPage();
			this.addAggregation("_pages", oPage, true);
		}
	};

	/**
	 * Checks whether during the resizing the breakpoint interval has changed
	 * @returns {boolean}
	 * @private
	 */
	ResponsiveSplitter.prototype._intervalHasChanged = function () {
		var width = this.getDomRef().clientWidth,
			oInterval = null,
			aIntervals = this._aIntervals;

		for (var i = 0; i < aIntervals.length; i++) {
			if (aIntervals[i].iFrom < width && width <= aIntervals[i].iTo) {
				oInterval = aIntervals[i];
				break;
			}
		}

		if (this._currentInterval !== oInterval) {
			this._currentInterval = oInterval;
			return true;
		}

		return false;
	};

	/**
	 * Sets the visibility of the paginator buttons
	 * @param width
	 * @private
	 */
	ResponsiveSplitter.prototype._setPaginatorVisibility = function () {
		var $Buttons = this.$().find(".sapUiResponsiveSplitterPaginatorButton"),
			$NavButtons = this.$().find(".sapUiResponsiveSplitterPaginatorNavButton"),
			$Paginator = this.$().find(".sapUiResponsiveSplitterPaginator"),
			iPageCount = (this._getHiddenPanes().length + 1),
			bShowNavButtons = iPageCount < CONSTANTS.MAX_VISIBLE_BUTTONS;

		$Buttons.addClass("sapUiResponsiveSplitterHiddenElement");
		if (iPageCount > 1) {
			this.getDomRef().classList.add("sapUiRSVisiblePaginator");
			$Buttons = $Buttons.slice(0, bShowNavButtons ? iPageCount : CONSTANTS.MAX_VISIBLE_BUTTONS);
			$Buttons.removeClass("sapUiResponsiveSplitterHiddenElement");
			$Buttons.removeClass("sapUiResponsiveSplitterHiddenPaginatorButton");
			$NavButtons.toggleClass("sapUiResponsiveSplitterHiddenPaginatorButton", bShowNavButtons);
			$Paginator.toggleClass("sapUiResponsiveSplitterWithNavButtons", !bShowNavButtons);
		} else {
			this.getDomRef().classList.remove("sapUiRSVisiblePaginator");
		}
	};

	/**
	 * Iterates all intervals, and returns the maximum page count found
	 * @private
	 */
	ResponsiveSplitter.prototype._getMaxPageCount = function () {
		var iTempMax = 0;

		this._aIntervals.forEach(function (oInterval) {
			if (oInterval.iPagesCount > iTempMax) {
				iTempMax = oInterval.iPagesCount;
			}
		});
		return iTempMax;
	};

	/**
	 * Clears the existing layout and activates the first page
	 * Invokes _fillPageContent to build a new layout
	 * @private
	 */
	ResponsiveSplitter.prototype._arrangeContent = function () {
		var aPages = this.getAggregation("_pages") || [];
		this._clearContent();
		aPages.forEach(function (oPage) {
			oPage.setVisible(false);
		});

		this._fillPageContent(this.getRootPaneContainer());

		this._activatePage(0);
	};

	/**
	 * Sets the indexed page to visible and changes the selected button in the paginator
	 * @param iPageIndex
	 * @private
	 */
	ResponsiveSplitter.prototype._activatePage = function (iPageIndex) {
		var $PaginatorButtons = this.$().find(".sapUiResponsiveSplitterPaginatorButton"),
			$OldSelectedButton = this.$().find(".sapUiResponsiveSplitterPaginatorSelectedButton"),
			iOldActivePage = $PaginatorButtons.index($OldSelectedButton),
			aPages = this.getAggregation("_pages") || [];

		aPages[iOldActivePage] && aPages[iOldActivePage].setVisible(false);
		aPages[iPageIndex] && aPages[iPageIndex].setVisible(true);
		$OldSelectedButton.removeClass("sapUiResponsiveSplitterPaginatorSelectedButton");
		$PaginatorButtons.eq(iPageIndex).addClass("sapUiResponsiveSplitterPaginatorSelectedButton");
		$OldSelectedButton.attr("aria-checked", false);
		$PaginatorButtons.eq(iPageIndex).attr("aria-checked", true);
	};

	/**
	 * Goes through all SplitPanes and PaneContainers and defines which panes will be shown
	 * The content of the demand Panes which are not on the main page gets moved into pages
	 * @private
	 */
	ResponsiveSplitter.prototype._fillPageContent = function (oSplitterElement) {
		var bIsPaneContainer = oSplitterElement instanceof PaneContainer,
			bIsSplitPane = oSplitterElement instanceof SplitPane,
			oSplitterElementParent = oSplitterElement.getParent(),
			bIsParentPaneContainer = oSplitterElementParent instanceof PaneContainer,
			aPages = this.getAggregation("_pages"),
			aHiddenPanes, bHasPanesInCurrentInterval, oInternalSplitter, bDemandPane,
			iHiddenPanesCount, iMaxPageCount;

		if (bIsPaneContainer && aPages) {
			this._aPaneContainers.push(oSplitterElement);
			bHasPanesInCurrentInterval = this._getAllPanesInInterval(oSplitterElement, this._currentInterval.iFrom).length > 0;
			oInternalSplitter = oSplitterElement._oSplitter;

			if (bIsParentPaneContainer && bHasPanesInCurrentInterval) {
				oSplitterElementParent._oSplitter.addAssociatedContentArea(oInternalSplitter);
			} else if (!bIsParentPaneContainer) {
				aPages[0].setContent(oInternalSplitter);
			}
			oSplitterElement.getPanes().forEach(function(oPane) { this._fillPageContent(oPane); }, this);
		} else if (bIsSplitPane && aPages) {
			this._assignDefault(oSplitterElement);
			this._aPanes.push(oSplitterElement);
			bDemandPane = oSplitterElement.getDemandPane();
			aHiddenPanes = this._getHiddenPanes();
			iHiddenPanesCount = aHiddenPanes.length;
			iMaxPageCount = this._getMaxPageCount();

			if (oSplitterElement._isInInterval(this._currentInterval.iFrom)) {
				oSplitterElementParent._oSplitter.addAssociatedContentArea(oSplitterElement.getContent());
			} else if (bDemandPane && (iHiddenPanesCount < iMaxPageCount)) {
				for (var i = 0; i < iHiddenPanesCount; i++) {
					aPages[i + 1].setContent(aHiddenPanes[i].getContent());
				}
			} else if (bDemandPane && iHiddenPanesCount === iMaxPageCount) {
				for (var i = 0; i < iHiddenPanesCount; i++) {
					aPages[i].setContent(aHiddenPanes[i].getContent());
				}
			} else if (this._isDefault(oSplitterElement)) {
				aPages[0].setContent(oSplitterElement.getContent());
			}
		}
	};

	ResponsiveSplitter.prototype._isDefault = function (oPane) {
		return this.getDefaultPane() === oPane.getId();
	};

	ResponsiveSplitter.prototype._assignDefault = function (oPane) {
		var oDefaultPane = this.getDefaultPane();
		this.setDefaultPane(oDefaultPane || oPane);
	};

	/**
	 * Returns an array of all nested panes which are suitable for the current interval
	 * @returns {array}
	 * @private
	 */
	ResponsiveSplitter.prototype._getAllPanesInInterval = function (oPaneContainer, iFrom) {
		var aPanes = [];

		function fnVisitAllContainers(oPaneContainer) {
			oPaneContainer.getPanes().forEach(function(oPane) {
				if (oPane instanceof PaneContainer) {
					fnVisitAllContainers(oPane);
				} else if (oPane._isInInterval(iFrom)) {
					aPanes.push(oPane);
				}
			});
			return aPanes;
		}
		return fnVisitAllContainers(oPaneContainer, iFrom);
	};

	/**
	 * Returns an array of all hidden panes which are with demand set to true
	 * @returns {array}
	 * @private
	 */
	ResponsiveSplitter.prototype._getHiddenPanes = function () {
		return this._aPanes.filter(function(oPane) {
			return oPane.getDemandPane() && !oPane._isInInterval(this._currentInterval.iFrom);
		}, this);
	};

	/**
	 * Remove the internal AssociatedContentAreas of the AssociativeSplitters
	 * @private
	 */
	ResponsiveSplitter.prototype._clearContent = function () {
		this._aPaneContainers.forEach(function(oPaneContainer) {
			oPaneContainer._oSplitter.removeAllAssociatedContentArea();
		});

		this._aPaneContainers = [];
		this._aPanes = [];
	};

	/**
	 * Returns an array of all visible buttons from the Paginator
	 * @returns {object}
	 * @private
	 */
	ResponsiveSplitter.prototype._getVisibleButtons = function () {
		return this.$().find(".sapUiResponsiveSplitterPaginatorButton:not(.sapUiResponsiveSplitterHiddenElement, .sapUiResponsiveSplitterHiddenPaginatorButton)");
	};

	/**
	 * Handles tab / space / enter of Paginator's button
	 * @returns {void}
	 * @private
	 */
	ResponsiveSplitter.prototype._handlePaginatorButtonTap = function (oEvent) {
		var oTarget = oEvent.target,
			aTargetClassList = oEvent.target.classList,
			iPageIndex;

		if (aTargetClassList.contains("sapUiResponsiveSplitterPaginatorButton")) {
			iPageIndex = oTarget.getAttribute("page-index");
			this._activatePage(iPageIndex);
		} else if (aTargetClassList.contains("sapUiResponsiveSplitterPaginatorNavButton")) {
			if (aTargetClassList.contains("sapUiResponsiveSplitterPaginatorButtonForward")) {
				this._handlePaginatorForward(oEvent);
			} else {
				this._handlePaginatorBack(oEvent);
			}
		}
	};

	/**
	 * Handles when forward button in the paginator is pressed
	 * @param oEvent
	 * @private
	 */
	ResponsiveSplitter.prototype._handlePaginatorForward = function (oEvent) {
		var $VisibleButtons = this._getVisibleButtons(),
			iHiddenPaneCount = this._getHiddenPanes().length,
			$HiddenButtons = this.$().find(".sapUiResponsiveSplitterPaginatorButton.sapUiResponsiveSplitterHiddenElement"),
			$HiddenRightButtons = $HiddenButtons.filter(function() {
				return this.getAttribute("page-index") >= CONSTANTS.MAX_VISIBLE_BUTTONS &&
				 this.getAttribute("page-index") <= iHiddenPaneCount;
			});

		if ($HiddenRightButtons.length > 0) {
			$VisibleButtons.first().addClass("sapUiResponsiveSplitterHiddenElement");
			$HiddenRightButtons.last().removeClass("sapUiResponsiveSplitterHiddenElement");
		}
	};

	/**
	 * Handles when back button in the paginator is pressed
	 * @param oEvent
	 * @returns {void}
	 * @private
	 */
	ResponsiveSplitter.prototype._handlePaginatorBack = function (oEvent) {
		var $VisibleButtons = this._getVisibleButtons(),
			iMaxPageCount = this._getMaxPageCount() - CONSTANTS.MAX_VISIBLE_BUTTONS,
			$HiddenButtons = this.$().find(".sapUiResponsiveSplitterPaginatorButton.sapUiResponsiveSplitterHiddenElement"),
			$HiddenLeftButtons = $HiddenButtons.filter(function() { return this.getAttribute("page-index") < iMaxPageCount; });

		if ($HiddenLeftButtons.length > 0) {
			$VisibleButtons.last().addClass("sapUiResponsiveSplitterHiddenElement");
			$HiddenLeftButtons.last().removeClass("sapUiResponsiveSplitterHiddenElement");
		}
	};

	ResponsiveSplitter.prototype.ontap = ResponsiveSplitter.prototype._handlePaginatorButtonTap;

	ResponsiveSplitter.prototype.onsapenter = ResponsiveSplitter.prototype._handlePaginatorButtonTap;

	ResponsiveSplitter.prototype.onsapspace = ResponsiveSplitter.prototype._handlePaginatorButtonTap;

	return ResponsiveSplitter;

}, /* bExport= */ true);

}; // end of sap/ui/layout/ResponsiveSplitter.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.form.FormElement.designtime') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the Design Time Metadata for the sap.ui.layout.form.FormElement
jQuery.sap.declare('sap.ui.layout.form.FormElement.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/layout/form/FormElement.designtime",['sap/ui/layout/form/Form', 'sap/ui/layout/form/FormContainer', 'sap/ui/layout/form/ResponsiveGridLayout'],
	function(Form, FormContainer, ResponsiveGridLayout) {
	"use strict";

	return {
		domRef : function(oFormElement) {
			var oParent = oFormElement.getParent();
			if (oParent instanceof FormContainer) {
				oParent = oParent.getParent();
				if (oParent instanceof Form) {
					var oLayout = oParent.getLayout();
					// formLayout, responsiveLayout and GridLayout are implementing getRenderedDomFor
					// method thus don't need design-time dom ref definition
					if (oLayout instanceof ResponsiveGridLayout) {
						var aFields = oFormElement.getFields();
						var oLabel = oFormElement.getLabelControl();
						if (oLabel) {
							aFields.unshift(oLabel);
						}

						return aFields.filter(function(oElement) {
							return oElement.getDomRef && oElement.getDomRef();
						}).map(function(oElement) {
							var oDomRef = oElement.getDomRef();
							return oDomRef.parentNode;
						});
					}
				}
			}
		},
		actions: {
			remove: {
				changeType: "hideControl"
			},
			rename: {
				changeType: "renameField",
				domRef: function (oControl) {
					return oControl.getLabelControl().getDomRef();
				}
			},
			reveal: {
				changeType: "unhideControl"
			}
		},
		name: {
			singular: "FIELD_CONTROL_NAME",
			plural: "FIELD_CONTROL_NAME_PLURAL"
		}
	};

}, /* bExport= */ false);

}; // end of sap/ui/layout/form/FormElement.designtime.js
if ( !jQuery.sap.isDeclared('sap.ui.layout.form.ResponsiveLayout') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides control sap.ui.layout.form.ResponsiveLayout.
jQuery.sap.declare('sap.ui.layout.form.ResponsiveLayout'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/layout/form/ResponsiveLayout",['jquery.sap.global', 'sap/ui/layout/ResponsiveFlowLayout', 'sap/ui/layout/ResponsiveFlowLayoutData', './FormLayout', 'sap/ui/layout/library'],
	function(jQuery, ResponsiveFlowLayout, ResponsiveFlowLayoutData, FormLayout, library) {
	"use strict";

	/**
	 * Constructor for a new sap.ui.layout.form.ResponsiveLayout.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * The <code>ResponsiveLayout</code> renders a <code>Form</code> with a responsive layout. Internally the <code>ResponsiveFlowLayout</code> is used.
	 * The responsiveness of this layout tries to best use the available space. This means that the order of the <code>FormContainers</code>, labels and fields depends on the available space.
	 *
	 * On the <code>FormContainers</code>, <code>FormElements</code>, labels and content fields, <code>ResponsiveFlowLayoutData</code> can be used to change the default rendering.
	 *
	 * We suggest using the <code>ResponsiveGridLayout</code> instead of this layout because this is easier to consume and brings more stable responsive output.
	 *
	 * <b>Note:</b> If <code>ResponsiveFlowLayoutData</code> are used this may result in a much more complex layout than the default one. This means that in some cases, the calculation for the other content may not bring the expected result.
	 * In such cases, <code>ResponsiveFlowLayoutData</code> should be used for all content controls to disable the default behavior.
	 *
	 * This control cannot be used stand-alone, it just renders a <code>Form</code>, so it must be assigned to a <code>Form</code> using the <code>layout</code> aggregation.
	 * @extends sap.ui.layout.form.FormLayout
	 *
	 * @author SAP SE
	 * @version 1.48.5
	 *
	 * @constructor
	 * @public
	 * @since 1.16.0
	 * @alias sap.ui.layout.form.ResponsiveLayout
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ResponsiveLayout = FormLayout.extend("sap.ui.layout.form.ResponsiveLayout", /** @lends sap.ui.layout.form.ResponsiveLayout.prototype */ { metadata : {

		library : "sap.ui.layout"
	}});

	/*
	 * The ResponsiveLayout for forms inside is using ResponsiveFlowLayouts to render the form.
	 * There is no own rendering for FormContainers or FormElements.
	 * The whole Layout has a Responsive FlowLayout inside to make the FormContainers responsive.
	 * Only if there is only one FormContainer inside the Form there is no ResponsiveFlowLayout
	 * for the whole layout.
	 * A FormContainer is rendered as a Panel if it has a title or an expander. Inside the panel there
	 * is a ResponsiveFlowLayout for the single FormElements. If the FormContainer has no title or
	 * expander, just the ResponsiveFlowLayout is rendered.
	 * A FormElement is rendered as ResponsiveFlowLayout to make the label and the fields responsive.
	 * If the Element has a label and more than 1 Field a ResponsiveFlowLayout including the fields is rendered.
	 * The Panels and ResponsiveFlowLayouts are stored in object this.mContainers. This has the following
	 * structure:
	 * - For each FormContainer there is an entry inside the object. (this.mContainers[FormContainerId])
	 * - For each FormContainer there is an array with 3 entries:
	 *   - [0]: The Panel that renders the Container (undefined if no panel is used)
	 *          - It's not the standard Panel, is a special panel defined for the ResponsiveLayout
	 *   - [1]: The ResponsiveFlowLayout that holds the Containers content
	 *          - the getLayoutData function of this ResponsiveFlowLayouts is overwritten to get the LayoutData of the FormContainer
	 *            (If no panel is used)
	 *   - [2]: An object that holds the ResponsiveFlowLayouts for the FormElements:
	 *          - For each FormElement there is an entry inside the object. (this.mContainers[FormElementId])
	 *          - Each object includes an array with 2 entries:
	 *            - [0]: The ResponsiveFlowLayout for the FormElement
	 *            - [1]: If more than 1 Field and a label, here the ResponsiveFlowLayout for the fields is stored
	 *          - the getContent function of this ResponsiveFlowLayouts is overwritten to get the content of the FormElement
	 *          - the getLayoutData function of this ResponsiveFlowLayouts is overwritten to get the LayoutData of the FormElement
	 *
	 * It must be made sure to hold this object up to date. So it is filled onBeforeRendering. Entries no longer used are deleted
	 *
	 * In this._mainRFLayout the ResponsiveFlowLayout of the whole layout is stored. (If more than one Container.)
	 */

	/*
	 * as the panel can not be used in mobile environment an own internal control is needed to render the containers
	 * use FormContainer as association to have access to it's content directly. So no mapping of properties and aggregations needed
	 */
	sap.ui.core.Control.extend("sap.ui.layout.form.ResponsiveLayoutPanel", {

		metadata : {
			aggregations: {
				"content"   : {type: "sap.ui.layout.ResponsiveFlowLayout", multiple: false}
			},
			associations: {
				"container" : {type: "sap.ui.layout.form.FormContainer", multiple: false},
				"layout"    : {type: "sap.ui.layout.form.ResponsiveLayout", multiple: false}
			}
		},

		getLayoutData :  function(){

			// only ResponsiveFlowLayoutData are interesting
			var oContainer = sap.ui.getCore().byId(this.getContainer());
			var oLayout    = sap.ui.getCore().byId(this.getLayout());
			var oLD;
			if (oLayout && oContainer) {
				oLD = oLayout.getLayoutDataForElement(oContainer, "sap.ui.layout.ResponsiveFlowLayoutData");
			}
			return oLD;

		},

		getCustomData :  function(){

			var oContainer = sap.ui.getCore().byId(this.getContainer());
			if (oContainer) {
				return oContainer.getCustomData();
			}

		},

		refreshExpanded :  function(){

			var oContainer = sap.ui.getCore().byId(this.getContainer());
			if (oContainer) {
				if (oContainer.getExpanded()) {
					this.$().removeClass("sapUiRLContainerColl");
				} else {
					this.$().addClass("sapUiRLContainerColl");
				}
			}
		},

		renderer : function(oRm, oPanel) {

			var oContainer = sap.ui.getCore().byId(oPanel.getContainer());
			var oLayout    = sap.ui.getCore().byId(oPanel.getLayout());
			var oContent   = oPanel.getContent();

			if (!oContainer || !oLayout) {
				// Container might be removed, but ResponsiveFlowLayout still calls a rerendering with old content
				return;
			}

			var bExpandable = oContainer.getExpandable();
			var sTooltip = oContainer.getTooltip_AsString();
			var oToolbar = oContainer.getToolbar();
			var oTitle = oContainer.getTitle();

			oRm.write("<div");
			oRm.writeControlData(oPanel);
			oRm.addClass("sapUiRLContainer");
			if (bExpandable && !oContainer.getExpanded()) {
				oRm.addClass("sapUiRLContainerColl");
			}
			if (oToolbar) {
				oRm.addClass("sapUiFormContainerToolbar");
			} else if (oTitle) {
				oRm.addClass("sapUiFormContainerTitle");
			}

			if (sTooltip) {
				oRm.writeAttributeEscaped('title', sTooltip);
			}
			oRm.writeClasses();

			oLayout.getRenderer().writeAccessibilityStateContainer(oRm, oContainer);

			oRm.write(">");

			// container header
			if (oToolbar) {
				oRm.renderControl(oToolbar);
			} else if (oContainer.getTitle()) {
				oLayout.getRenderer().renderTitle(oRm, oTitle, oContainer._oExpandButton, bExpandable, false, oContainer.getId());
			}

			if (oContent) {
				oRm.write("<div");
				oRm.addClass("sapUiRLContainerCont");
				oRm.writeClasses();
				oRm.write(">");
				// container is not expandable or is expanded -> render elements
				oRm.renderControl(oContent);
				oRm.write("</div>");
			}

			oRm.write("</div>");
		}

	});

	/* eslint-disable no-lonely-if */

	ResponsiveLayout.prototype.init = function(){

		this.mContainers = {}; //association of container to panel and ResponsiveFlowLayout
		this._defaultLayoutData = new ResponsiveFlowLayoutData({margin: false});

	};

	ResponsiveLayout.prototype.exit = function(){

		var that = this;

		// clear panels
		for ( var sContainerId in this.mContainers) {
			_cleanContainer(that, sContainerId);
		}

		// clear ResponsiveFlowLayouts
		if (this._mainRFLayout) {
			this._mainRFLayout.destroy();
			delete this._mainRFLayout;
		}

		this._defaultLayoutData.destroy();
		delete this._defaultLayoutData;

	};

	ResponsiveLayout.prototype.onBeforeRendering = function( oEvent ){

		var oForm = this.getParent();
		if (!oForm || !(oForm instanceof sap.ui.layout.form.Form)) {
			// layout not assigned to form - nothing to do
			return;
		}

		oForm._bNoInvalidate = true; // don't invalidate Form if only the Grids, Panels and LayoutData are created or changed)
		var that = this;
		_createPanels(that, oForm);
		_createMainResponsiveFlowLayout(that, oForm);
		oForm._bNoInvalidate = false;

	};

	/*
	 * If onAfterRendering of a field is processed the width must be set to 100% (if no other width set)
	 */
	ResponsiveLayout.prototype.contentOnAfterRendering = function(oFormElement, oControl){

		FormLayout.prototype.contentOnAfterRendering.apply(this, arguments);

		if (oControl.getWidth && ( !oControl.getWidth() || oControl.getWidth() == "auto" ) &&
				(!oControl.getFormDoNotAdjustWidth || !oControl.getFormDoNotAdjustWidth())) {
			oControl.$().css("width", "100%");
		}

	};

	ResponsiveLayout.prototype.toggleContainerExpanded = function(oContainer){

		//adapt the corresponding panel
		var sContainerId = oContainer.getId();
		if (this.mContainers[sContainerId] && this.mContainers[sContainerId][0]) {
			var oPanel = this.mContainers[sContainerId][0];
			oPanel.refreshExpanded();
		}

	};

	ResponsiveLayout.prototype.onLayoutDataChange = function(oEvent){

		var oSource = oEvent.srcControl;
		var oContainer;
		var sContainerId;
		var sElementId;

		// if layoutData changed for a Container, Element, or Field call the
		// onLayoutDataChange function of the parent ResponsiveFlowLayout

		if (oSource instanceof sap.ui.layout.form.FormContainer) {
			if (this._mainRFLayout) {
				this._mainRFLayout.onLayoutDataChange(oEvent);
			}
		} else if (oSource instanceof sap.ui.layout.form.FormElement) {
			sContainerId = oSource.getParent().getId();
			if (this.mContainers[sContainerId] && this.mContainers[sContainerId][1]) {
				this.mContainers[sContainerId][1].onLayoutDataChange(oEvent);
			}
		} else {
			var oParent = oSource.getParent();
			if (oParent instanceof sap.ui.layout.form.FormElement) {
				oContainer = oParent.getParent();
				sContainerId = oContainer.getId();
				sElementId = oParent.getId();
				if (this.mContainers[sContainerId] && this.mContainers[sContainerId][2] &&
				    this.mContainers[sContainerId][2][sElementId]) {
					this.mContainers[sContainerId][2][sElementId][0].onLayoutDataChange(oEvent);
				}
			}
		}

	};

	ResponsiveLayout.prototype.onsapup = function(oEvent){
		this.onsapleft(oEvent);
	};

	ResponsiveLayout.prototype.onsapdown = function(oEvent){
		this.onsapright(oEvent);
	};

	/**
	 * As Elements must not have a DOM reference it is not sure if one exists
	 * If the <code>FormContainer</code> has a title or is expandable an internal panel is rendered.
	 * In this case, the panel's DOM reference is returned, otherwise the DOM reference
	 * of the <code>ResponsiveFlowLayout</code> rendering the container's content.
	 * @param {sap.ui.layout.form.FormContainer} oContainer <code>FormContainer</code>
	 * @return {Element} The Element's DOM representation or null
	 * @private
	 */
	ResponsiveLayout.prototype.getContainerRenderedDomRef = function(oContainer) {

		if (this.getDomRef()) {
			var sContainerId = oContainer.getId();
			if (this.mContainers[sContainerId]) {
				if (this.mContainers[sContainerId][0]) {
					var oPanel = this.mContainers[sContainerId][0];
					return oPanel.getDomRef();
				}else if (this.mContainers[sContainerId][1]){
					// no panel used -> return RFLayout
					var oRFLayout = this.mContainers[sContainerId][1];
					return oRFLayout.getDomRef();
				}
			}
		}

		return null;

	};

	/**
	 * As Elements must not have a DOM reference it is not sure if one exists.
	 * In this Layout each <code>FormElement</code> is represented by an own ResponsiveFlowLayout.
	 * So the DOM of this <code>ResponsiveFlowLayout</code> is returned
	 * @param {sap.ui.layout.form.FormElement} oElement <code>FormElement</code>
	 * @return {Element} The Element's DOM representation or null
	 * @private
	 */
	ResponsiveLayout.prototype.getElementRenderedDomRef = function(oElement) {

		if (this.getDomRef()) {
			var oContainer = oElement.getParent();
			var sElementId = oElement.getId();
			var sContainerId = oContainer.getId();
			if (this.mContainers[sContainerId]) {
				if (this.mContainers[sContainerId][2]){
					var mRFLayouts = this.mContainers[sContainerId][2];
					if (mRFLayouts[sElementId]) {
						var oRFLayout = mRFLayouts[sElementId][0];
						return oRFLayout.getDomRef();
					}
				}
			}
		}

		return null;

	};

	function _createPanels( oLayout, oForm ) {

		var aContainers = oForm.getFormContainers();
		var oContainer;
		var sContainerId;
		var iLength = aContainers.length;
		var iVisibleContainers = 0;
		var oPanel;
		var oRFLayout;
		var i = 0;
		for ( i = 0; i < iLength; i++) {
			oContainer = aContainers[i];
			oContainer._checkProperties();
			if (oContainer.getVisible()) {
				iVisibleContainers++;
				sContainerId = oContainer.getId();
				oPanel = undefined;
				oRFLayout = undefined;
				if (oLayout.mContainers[sContainerId] && oLayout.mContainers[sContainerId][1]) {
					// ResponsiveFlowLayout already created
					oRFLayout = oLayout.mContainers[sContainerId][1];
				} else {
					oRFLayout = _createResponsiveFlowLayout(oLayout, oContainer, undefined);
				}

				var oTitle = oContainer.getTitle();
				var oToolbar = oContainer.getToolbar();
				if (oToolbar || oTitle || oContainer.getExpandable()) {
					// only if container has a title a panel is used
					if (oLayout.mContainers[sContainerId] && oLayout.mContainers[sContainerId][0]) {
						// Panel already created
						oPanel = oLayout.mContainers[sContainerId][0];
					} else {
						oPanel = _createPanel(oLayout, oContainer, oRFLayout);
						_changeGetLayoutDataOfResponsiveFlowLayout(oRFLayout, true);
					}
					oRFLayout.removeStyleClass("sapUiRLContainer");
				} else {
					// panel not longer needed
					if (oLayout.mContainers[sContainerId] && oLayout.mContainers[sContainerId][0]) {
						_deletePanel(oLayout.mContainers[sContainerId][0]);
						_changeGetLayoutDataOfResponsiveFlowLayout(oRFLayout, false);
					}
					oRFLayout.addStyleClass("sapUiRLContainer");
				}

				var mContent = _createContent(oLayout, oContainer, oRFLayout);

				oLayout.mContainers[sContainerId] = [oPanel, oRFLayout, mContent];
			}
		}

		var iObjectLength = _objectLength(oLayout.mContainers);
		if (iVisibleContainers < iObjectLength) {
			// delete old containers panels
			for ( sContainerId in oLayout.mContainers) {
				var bFound = false;
				for ( i = 0; i < iLength; i++) {
					oContainer = aContainers[i];
					if (sContainerId == oContainer.getId() && oContainer.getVisible()) {
						bFound = true;
						break;
					}
				}
				if (!bFound) {
					_cleanContainer(oLayout, sContainerId);
				}
			}
		}

	}

	function _createPanel( oLayout, oContainer, oRFLayout ) {

		var sContainerId = oContainer.getId();
		var oPanel = new sap.ui.layout.form.ResponsiveLayoutPanel(sContainerId + "--Panel", {
			container: oContainer,
			layout   : oLayout,
			content : oRFLayout
		});

		return oPanel;

	}

	/*
	 * clear variables before delete it
	 */
	function _deletePanel( oPanel ) {

		oPanel.setContent("");
		oPanel.setLayout("");
		oPanel.setContainer("");
		oPanel.destroy();

	}

	function _createContent( oLayout, oContainer, oContainerLayout ) {

		var sContainerId = oContainer.getId();
		var aElements = oContainer.getFormElements();
		var iLength = aElements.length;
		var iVisibleElements = 0;
		var mRFLayouts = {};
		if (oLayout.mContainers[sContainerId] && oLayout.mContainers[sContainerId][2]) {
			mRFLayouts = oLayout.mContainers[sContainerId][2];
		}

		var oRFLayout;
		var oFieldsRFLayout;
		var iLastIndex = -1;
		var oElement;
		var sElementId;
		var i = 0;
		for (i = 0; i < iLength; i++) {
			oElement = aElements[i];
			if (oElement.getVisible()) {
				sElementId = oElement.getId();
				_checkElementMoved(oLayout, oContainer, oElement, mRFLayouts, oContainerLayout, i);
				if (mRFLayouts[sElementId]) {
					// ResponsiveFlowLayout already created
					oRFLayout = mRFLayouts[sElementId][0];
					iLastIndex = oContainerLayout.indexOfContent(oRFLayout);
					if (iLastIndex != iVisibleElements) {
						// order has changed -> move it
						oContainerLayout.removeContent(oRFLayout);
						oContainerLayout.insertContent(oRFLayout, iVisibleElements);
						iLastIndex = iVisibleElements;
					}
				} else {
					oRFLayout = _createResponsiveFlowLayout(oLayout, oContainer, oElement);
					oRFLayout.addStyleClass("sapUiRLElement");
					if (oElement.getLabel()) {
						oRFLayout.addStyleClass("sapUiRLElementWithLabel");
					}
					mRFLayouts[sElementId] = [oRFLayout, undefined];
					iLastIndex++;
					oContainerLayout.insertContent(oRFLayout, iLastIndex);
				}

				// if more fields after a label put the fields in an additional ResponsiveFlowLayout
				var aFields = oElement.getFields();
				if (oElement.getLabel() && aFields.length > 1) {
					if (mRFLayouts[sElementId][1]) {
						oFieldsRFLayout = mRFLayouts[sElementId][1];
					} else {
						oFieldsRFLayout = _createResponsiveFlowLayout(oLayout, oContainer, oElement, true);
						oFieldsRFLayout.addStyleClass("sapUiRLElementFields");
						mRFLayouts[sElementId][1] = oFieldsRFLayout;
					}
					_updateLayoutDataOfContentResponsiveFlowLayout(oLayout, oFieldsRFLayout, aFields);
				} else {
					if (mRFLayouts[sElementId][1]) {
						// ResponsiveFlowLayout for fields not longer needed
						oFieldsRFLayout = mRFLayouts[sElementId][1];
						_deleteResponsiveFlowLayout(oFieldsRFLayout);
						mRFLayouts[sElementId][1] = undefined;
					}
				}
				iVisibleElements++;
			}
		}

		var iObjectLength = _objectLength(mRFLayouts);
		if (iVisibleElements < iObjectLength) {
			// delete old elements RFLayouts
			for ( sElementId in mRFLayouts) {
				var bFound = false;
				for ( i = 0; i < iLength; i++) {
					oElement = aElements[i];
					if (sElementId == oElement.getId() && oElement.getVisible()) {
						bFound = true;
						break;
					}
				}
				if (!bFound) {
					if (mRFLayouts[sElementId][1]) {
						// ResponsiveFlowLayout for fields not longer needed
						oFieldsRFLayout = mRFLayouts[sElementId][1];
						_deleteResponsiveFlowLayout(oFieldsRFLayout);
					}
					oRFLayout = mRFLayouts[sElementId][0];
					oContainerLayout.removeContent(oRFLayout);
					_deleteResponsiveFlowLayout(oRFLayout);
					delete mRFLayouts[sElementId];
				}
			}
		}

		return mRFLayouts;

	}

	function _createResponsiveFlowLayout( oLayout, oContainer, oElement, bElementContent ) {

		var sId;
		if (oElement && !bElementContent) {
			sId = oElement.getId() + "--RFLayout";
		} else if (oElement && bElementContent) {
			sId = oElement.getId() + "--content--RFLayout";
		} else if (oContainer) {
			sId = oContainer.getId() + "--RFLayout";
		} else {
			return false;
		}

		var oRFLayout = new ResponsiveFlowLayout(sId);
		oRFLayout.__myParentLayout = oLayout;
		oRFLayout.__myParentContainerId = oContainer.getId();

		if (oElement) {
			oRFLayout.__myParentElementId = oElement.getId();
			// assign Elements content -> overwrite getContent function of responsiveFlowLayout
			// to not change parent assignment of controls
			if (!bElementContent) {
				oRFLayout.getContent = function(){
					var oElement = sap.ui.getCore().byId(this.__myParentElementId);
					if (oElement) {
						var aContent = [];
						var oLabel = oElement.getLabelControl();
						var aFields = oElement.getFields();
						if (!oLabel || aFields.length <= 1) {
							aContent = aFields;
							if (oLabel) {
								aContent.unshift(oLabel);
							}
						} else {
							// more than one field -> put in the content RFLayout
							var oLayout = this.__myParentLayout;
							var sContainerId = this.__myParentContainerId;
							var sElementId = oElement.getId();
							if (oLabel) {
								aContent.push(oLabel);
							}
							if (oLayout.mContainers[sContainerId] && oLayout.mContainers[sContainerId][2] &&
									oLayout.mContainers[sContainerId][2][sElementId] &&
									oLayout.mContainers[sContainerId][2][sElementId][1]) {
								aContent.push(oLayout.mContainers[sContainerId][2][sElementId][1]);
							}
						}

						return aContent;
					} else {
						return false;
					}
				};

				oRFLayout._addContentClass = function(oControl, iIndex) {

					if (iIndex == 0) {
						// check if it's the label of the FormElement
						var oElement = sap.ui.getCore().byId(this.__myParentElementId);
						if (oElement) {
							var oLabel = oElement.getLabelControl();
							if (oControl == oLabel) {
								return "sapUiFormElementLbl";
							}
						}
					}

					return null;

				};
			} else {
				oRFLayout.getContent = function(){
					var oElement = sap.ui.getCore().byId(this.__myParentElementId);
					if (oElement) {
						return oElement.getFields();
					} else {
						return false;
					}
				};
			}
		}else if (oContainer) {
			oRFLayout._getAccessibleRole = function() {

				var oContainer = sap.ui.getCore().byId(this.__myParentContainerId);
				var oLayout = this.__myParentLayout;
				if (oLayout._mainRFLayout && !oContainer.getToolbar() && !oContainer.getTitle() && !oContainer.getExpandable()) {
					return "form";
				}

			};
		}

		if ((oElement && !bElementContent) || (!oElement && !oContainer.getToolbar() && !oContainer.getTitle() && !oContainer.getExpandable())) {
			// use LayoutData of container only if no panel is used
			_changeGetLayoutDataOfResponsiveFlowLayout(oRFLayout, false);
		} else {
			// create LayoutData to disable margins
			oRFLayout.setLayoutData(new ResponsiveFlowLayoutData({margin: false}));
		}

		return oRFLayout;

	}

	function _changeGetLayoutDataOfResponsiveFlowLayout( oRFLayout, bOriginal ) {
		// only ResponsiveFlowLayoutData are from interest
		// if none maintained use default one to disable margins

		if (bOriginal) {
			if (oRFLayout.__originalGetLayoutData) {
				oRFLayout.getLayoutData = oRFLayout.__originalGetLayoutData;
				delete oRFLayout.__originalGetLayoutData;
			}
		} else if (!oRFLayout.__originalGetLayoutData) {
			oRFLayout.__originalGetLayoutData = oRFLayout.getLayoutData;
			oRFLayout.getLayoutData = function(){
				var oLayout = this.__myParentLayout;
				var oContainer = sap.ui.getCore().byId(this.__myParentContainerId);
				var oElement = sap.ui.getCore().byId(this.__myParentElementId);

				var oLD;
				if (oElement) {
					oLD = oLayout.getLayoutDataForElement(oElement, "sap.ui.layout.ResponsiveFlowLayoutData");
				} else if (oContainer) {
					oLD = oLayout.getLayoutDataForElement(oContainer, "sap.ui.layout.ResponsiveFlowLayoutData");
				}

				if (oLD) {
					return oLD;
				} else if (oElement) {
					// for containers without panel the margins are needed.
					return oLayout._defaultLayoutData;
				}
			};
		}

	}

	/*
	 * If a ResponsiveFlowLayout for the fields of a FormElement is used it must get the weight
	 * of all fields to have the right weight relative to the label.
	 */
	function _updateLayoutDataOfContentResponsiveFlowLayout( oLayout, oRFLayout, aFields ) {

		var oLD;
		var iWeight = 0;
		for ( var i = 0; i < aFields.length; i++) {
			var oField = aFields[i];
			oLD = oLayout.getLayoutDataForElement(oField, "sap.ui.layout.ResponsiveFlowLayoutData");
			if (oLD) {
				iWeight = iWeight + oLD.getWeight();
			} else {
				iWeight++;
			}
		}

		oLD = oRFLayout.getLayoutData();
		if (oLD) {
			oLD.setWeight(iWeight);
		} else {
			oRFLayout.setLayoutData(
					new ResponsiveFlowLayoutData({weight: iWeight})
			);
		}

	}

	/*
	 * clear variables before delete it
	 */
	function _deleteResponsiveFlowLayout( oRFLayout ) {

		if (oRFLayout.__myParentContainerId) {
			oRFLayout.__myParentContainerId = undefined;
		}
		if (oRFLayout.__myParentElementId) {
			oRFLayout.__myParentElementId = undefined;
		}
		oRFLayout.__myParentLayout = undefined;

		oRFLayout.destroy();

	}

	function _cleanContainer( oLayout, sContainerId ) {

		var aContainerContent = oLayout.mContainers[sContainerId];
		var oRFLayout;

		//delete Elements Content
		var oElementRFLayouts = aContainerContent[2];
		if (oElementRFLayouts) {
			for ( var sElementId in oElementRFLayouts) {
				if (oElementRFLayouts[sElementId][1]) {
					// ResponsiveFlowLayout for fields not longer needed
					_deleteResponsiveFlowLayout(oElementRFLayouts[sElementId][1]);
				}
				oRFLayout = oElementRFLayouts[sElementId][0];
				_deleteResponsiveFlowLayout(oRFLayout);
				delete oElementRFLayouts[sElementId];
			}
		}

		//delete ResponsiveFlowLayout
		oRFLayout = aContainerContent[1];
		if (oRFLayout) {
			oRFLayout.removeAllContent();
			_deleteResponsiveFlowLayout(oRFLayout);
		}

		//delete panel
		var oPanel = aContainerContent[0];
		if (oPanel) {
			_deletePanel(oPanel);
		}

		delete oLayout.mContainers[sContainerId];

	}

	function _checkElementMoved(oLayout, oContainer, oElement, mRFLayouts, oContainerLayout, iIndex){

		// if an Element is just moved from one Container to another this is not recognized
		// so the ResponsiveFlowLayouts must be updated and the control object must be adjusted
		var sElementId = oElement.getId();
		var sId = sElementId + "--RFLayout";
		var oRFLayout = sap.ui.getCore().byId(sId);

		if (!mRFLayouts[sElementId] && oRFLayout) {
			// Element not maintained in control object of container but already has a RFLayout
			// find old container id
			var sOldContainerId = oRFLayout.__myParentContainerId;

			// move to new containers control object
			mRFLayouts[sElementId] = oLayout.mContainers[sOldContainerId][2][sElementId];
			oContainerLayout.insertContent(oRFLayout, iIndex);
			oRFLayout.__myParentContainerId = oContainer.getId();
			if (mRFLayouts[sElementId][1]) {
				mRFLayouts[sElementId][1].__myParentContainerId = oContainer.getId();
			}

			// delete from old container in control object
			delete oLayout.mContainers[sOldContainerId][2][sElementId];
		}

	}

	function _createMainResponsiveFlowLayout( oLayout, oForm ) {

		var aContainers = oForm.getFormContainers();
		var aVisibleContainers = [];
		var oContainer;
		var iLength = 0;
		var iContentLenght = 0;
		var i = 0;
		var j = 0;

		// count only visible containers
		for ( i = 0; i < aContainers.length; i++) {
			oContainer = aContainers[i];
			if (oContainer.getVisible()) {
				iLength++;
				aVisibleContainers.push(oContainer);
			}
		}

		// special case: only one container -> do not render an outer ResponsiveFlowLayout
		if (iLength > 1) {
			if (!oLayout._mainRFLayout) {
				oLayout._mainRFLayout = new ResponsiveFlowLayout(oForm.getId() + "--RFLayout").setParent(oLayout);
			} else {
				// update containers
				var aLayoutContent = oLayout._mainRFLayout.getContent();
				iContentLenght = aLayoutContent.length;
				var bExchangeContent = false;
				// check if content has changed
				for ( i = 0; i < iContentLenght; i++) {
					var oContentElement = aLayoutContent[i];
					oContainer = undefined;
					if (oContentElement.getContainer) {
						// it's a panel
						oContainer = sap.ui.getCore().byId(oContentElement.getContainer());
					} else {
						// it's a RFLayout
						oContainer = sap.ui.getCore().byId(oContentElement.__myParentContainerId);
					}
					if (oContainer && oContainer.getVisible()) {
						var oVisibleContainer = aVisibleContainers[j];
						if (oContainer != oVisibleContainer) {
							// order of containers has changed
							bExchangeContent = true;
							break;
						}

						var aContainerContent = oLayout.mContainers[oContainer.getId()];
						if (aContainerContent[0] && aContainerContent[0] != oContentElement) {
							// container uses panel but panel not the same element in content
							bExchangeContent = true;
							break;
						}
						if (!aContainerContent[0] && aContainerContent[1] && aContainerContent[1] != oContentElement) {
							// container uses no panel but RFLayout not the same element in content
							bExchangeContent = true;
							break;
						}
						j++;
					} else {
						// no container exits for content -> just remove this content
						oLayout._mainRFLayout.removeContent(oContentElement);
					}
				}
				if (bExchangeContent) {
					// remove all content and add it new.
					oLayout._mainRFLayout.removeAllContent();
					iContentLenght = 0;
				}
			}
			if (iContentLenght < iLength) {
				// new containers added
				var iStartIndex = 0;
				if (iContentLenght > 0) {
					iStartIndex = iContentLenght--;
				}
				for ( i = iStartIndex; i < iLength; i++) {
					oContainer = aVisibleContainers[i];
					var sContainerId = oContainer.getId();
					if (oLayout.mContainers[sContainerId]) {
						if (oLayout.mContainers[sContainerId][0]) {
							// panel used
							oLayout._mainRFLayout.addContent(oLayout.mContainers[sContainerId][0]);
						} else if (oLayout.mContainers[sContainerId][1]) {
							// no panel - used ResponsiveFlowLayot directly
							oLayout._mainRFLayout.addContent(oLayout.mContainers[sContainerId][1]);
						}
					}
				}
			}
		}

	}

	function _objectLength(oObject){

		var iLength = 0;

		if (!Object.keys) {
			jQuery.each(oObject, function(){
				iLength++;
			});
		} else {
			iLength = Object.keys(oObject).length;
		}

		return iLength;

	}

	return ResponsiveLayout;

}, /* bExport= */ true);

}; // end of sap/ui/layout/form/ResponsiveLayout.js
